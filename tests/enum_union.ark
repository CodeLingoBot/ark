[c] func printf(fmt: ^u8, ...) -> int;

type Tree enum {
    Node{left: ^Tree, right: ^Tree},
    Leaf(int)
};

func (tree: ^Tree) dump() {
	match @tree {
		Node(left, right) => {
			C::printf(c"Node\n", left, right);
			left.dump();
			right.dump();
		},
		Leaf(value) => {
			C::printf(c"Leaf: %d\n", value);
		},
		_ => {
			C::printf(c"Invalid tree instance\n");
		},
	}
}

x := Tree::Leaf(42);

pub func main() -> int {
	y := Tree::Leaf(36);
	z := Tree::Node{left: ^x, right: ^y};

	//C::printf(c"^x: %p\n", ^x);
	//C::printf(c"^y: %p\n", ^y);
	//C::printf(c"^x: %p, ^y: %p\n", ^x, ^y);

	zp := ^z;
    zp.dump();

    return 0;
}
