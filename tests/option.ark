#use std::io
#use std::panic

type Option enum<T> {
    Some(T),
    None,
};

func (o: Option<T>) unwrap() -> T {
    match o {
        Some(t) => return t,
        None => panic::panic("hi!"),
    }

    mut a: T;
    return a;
}

// this function should be removed eventually
func debugDumpOption<T>(o: Option<T>) {
    match o {
        Some(_) => io::println("Option::Some"),
        None => io::println("Option::None"),
    }
}

pub func main() -> int {
    io::println("Option test");

    some := Option::Some<int>(5);
    none := Option::None<int>();

    debugDumpOption<int>(some);
    debugDumpOption<int>(none);
    debugDumpOption<int>(Option::Some<int>(5));

    io::printInt(some.unwrap());
    io::println("");

    return 0;
}
