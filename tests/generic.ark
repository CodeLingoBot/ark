#[c] func printf(fmt: ^u8, ...) -> int;

type Option enum<T> {
    None,
    Some(T, u8)
};

type RC struct<T> {
	refs: int,
	val: ^T,
};

func do<T>(t: T) -> T {
    return t;
}

#use std::mem

pub func main() -> int {

	a: int = 0;
	x := Option::None<bool>;
	y := Option::Some<int>(a, 5);

	C::printf(c"x tag: %d\n", x);
	C::printf(c"y tag: %d\n", y);

	h: u8 = 1;
	mut i := RC<u8>{refs: 0};
	i.val = ^h;

    mut ival := i.val;
    ival = ^h;

	C::printf(c"sizeof(@i.val) = %d\n", sizeof(@i.val));
	if sizeof(@i.val) != 1 {
		return 1;
	}

	j: u16 = 1;
	mut k := RC<u16>{refs: 0};
	k.val = ^j;
	C::printf(c"sizeof(@k.val) = %d\n", sizeof(@k.val));
	if sizeof(@k.val) != 2 {
		return 1;
	}

    l := do<int>(5);
    C::printf(c"l = %d\n", l);
    m := do<int>(10);
    C::printf(c"m = %d\n", m);
    str := do<^u8>(c"hi!");
    C::printf(c"str = \"%s\"\n", str);

    n := mem::alloc<int>();
    o := n;
    @o = 111;
    C::printf(c"@o = %d\n", @o);
    mem::free<int>(n);

    mut arr := mem::allocArray<int>(5);
    arr[4] = 4;
    mem::freeArray<int>(arr);

	return 0;
}
