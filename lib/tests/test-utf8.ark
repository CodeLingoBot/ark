#use unicode::utf8
#use mem

[c] func printf(fmt: ^u8, ...) -> int;

tests := [][]u8{
	[]u8("Iñtërnâtiônàlizætiøn"),
	[]u8("κόσμε"),
	[]u8("東京"),
	[]u8("北京市"),
};

pub func main() -> int {
	mut i: uint = 0;
	for i < len(tests) {
		test := tests[i];
		C::printf(c"test: %d, len(test): %d, ", i, len(test));

		runes := utf8::num_runes(test);
		C::printf(c"#runes: %d, ", runes);

		dest := mem::allocArray<rune>(runes);
		utf8::decode(dest, test);

		bytes := utf8::num_bytes(dest);
		C::printf(c"#bytes: %d\n", bytes);

		mut h: uint = 0;
		C::printf(c"runes: ");
		for h < len(dest) {
			C::printf(c"%d ", dest[h]);
			h += 1;
		}
		C::printf(c"\n");

		test_copy := mem::allocArray<u8>(bytes);
		utf8::encode(test_copy, dest);

		// Verify that the encoded output matches the original test
		if len(test) != len(test_copy) {
			C::printf(c"len(test) != len(test_copy) : %d != %d\n", len(test), len(test_copy));
			return 1;
		}

		mut j: uint = 0;
		for j < len(test) {
			x := test[j];
			y := test_copy[j];
			if x != y {
				C::printf(c"#%d: %d != %d\n", j, x, y);
				return 1;
			}
			j += 1;
		}

		i += 1;
	}
	return 0;
}