[01m[32mStarted lexing[00m runtime
[   1:   2:  separator] `[`
[   2:   3: identifier] `c`
[   3:   4:  separator] `]`
[   5:   9: identifier] `func`
[  10:  16: identifier] `printf`
[  16:  17:  separator] `(`
[  17:  20: identifier] `fmt`
[  20:  21:   operator] `:`
[  22:  23:   operator] `^`
[  23:  25: identifier] `u8`
[  25:  26:  separator] `,`
[  27:  28:  separator] `.`
[  28:  29:  separator] `.`
[  29:  30:  separator] `.`
[  30:  31:  separator] `)`
[  32:  34:   operator] `->`
[  35:  38: identifier] `int`
[  38:  39:  separator] `;`
[  40:  41:  separator] `[`
[  41:  42: identifier] `c`
[  42:  43:  separator] `]`
[  44:  48: identifier] `func`
[  49:  53: identifier] `exit`
[  53:  54:  separator] `(`
[  54:  58: identifier] `code`
[  58:  59:   operator] `:`
[  60:  61: identifier] `C`
[  61:  63:   operator] `::`
[  63:  66: identifier] `int`
[  66:  67:  separator] `)`
[  67:  68:  separator] `;`
[  70:  73: identifier] `pub`
[  74:  78: identifier] `func`
[  79:  84: identifier] `panic`
[  84:  85:  separator] `(`
[  85:  92: identifier] `message`
[  92:  93:   operator] `:`
[  94: 100: identifier] `string`
[ 100: 101:  separator] `)`
[ 102: 103:  separator] `{`
[ 105: 107: identifier] `if`
[ 108: 111: identifier] `len`
[ 111: 112:  separator] `(`
[ 112: 119: identifier] `message`
[ 119: 120:  separator] `)`
[ 121: 123:   operator] `==`
[ 124: 125:     number] `0`
[ 126: 127:  separator] `{`
[ 130: 131: identifier] `C`
[ 131: 133:   operator] `::`
[ 133: 139: identifier] `printf`
[ 139: 140:  separator] `(`
[ 140: 141: identifier] `c`
[ 142: 144:     string] `\n`
[ 145: 146:  separator] `)`
[ 146: 147:  separator] `;`
[ 149: 150:  separator] `}`
[ 151: 155: identifier] `else`
[ 156: 157:  separator] `{`
[ 160: 161: identifier] `C`
[ 161: 163:   operator] `::`
[ 163: 169: identifier] `printf`
[ 169: 170:  separator] `(`
[ 170: 171: identifier] `c`
[ 172: 185:     string] `panic: %.*s\n`
[ 186: 187:  separator] `,`
[ 188: 191: identifier] `len`
[ 191: 192:  separator] `(`
[ 192: 199: identifier] `message`
[ 199: 200:  separator] `)`
[ 200: 201:  separator] `,`
[ 202: 203:   operator] `&`
[ 203: 210: identifier] `message`
[ 210: 211:  separator] `[`
[ 211: 212:     number] `0`
[ 212: 213:  separator] `]`
[ 213: 214:  separator] `)`
[ 214: 215:  separator] `;`
[ 217: 218:  separator] `}`
[ 223: 224: identifier] `C`
[ 224: 226:   operator] `::`
[ 226: 230: identifier] `exit`
[ 230: 231:  separator] `(`
[ 231: 232:   operator] `-`
[ 232: 233:     number] `1`
[ 233: 234:  separator] `)`
[ 234: 235:  separator] `;`
[ 236: 237:  separator] `}`
[ 239: 242: identifier] `pub`
[ 243: 247: identifier] `type`
[ 248: 254: identifier] `Option`
[ 255: 259: identifier] `enum`
[ 259: 260:   operator] `<`
[ 260: 261: identifier] `T`
[ 261: 262:   operator] `>`
[ 263: 264:  separator] `{`
[ 269: 273: identifier] `Some`
[ 273: 274:  separator] `(`
[ 274: 275: identifier] `T`
[ 275: 276:  separator] `)`
[ 276: 277:  separator] `,`
[ 282: 286: identifier] `None`
[ 286: 287:  separator] `,`
[ 288: 289:  separator] `}`
[ 289: 290:  separator] `;`
[ 292: 295: identifier] `pub`
[ 296: 300: identifier] `func`
[ 301: 302:  separator] `(`
[ 302: 303: identifier] `o`
[ 303: 304:   operator] `:`
[ 305: 311: identifier] `Option`
[ 311: 312:   operator] `<`
[ 312: 313: identifier] `T`
[ 313: 314:   operator] `>`
[ 314: 315:  separator] `)`
[ 316: 322: identifier] `unwrap`
[ 322: 323:  separator] `(`
[ 323: 324:  separator] `)`
[ 325: 327:   operator] `->`
[ 328: 329: identifier] `T`
[ 330: 331:  separator] `{`
[ 336: 341: identifier] `match`
[ 342: 343: identifier] `o`
[ 344: 345:  separator] `{`
[ 354: 358: identifier] `Some`
[ 358: 359:  separator] `(`
[ 359: 360: identifier] `t`
[ 360: 361:  separator] `)`
[ 362: 364:   operator] `=>`
[ 365: 371: identifier] `return`
[ 372: 373: identifier] `t`
[ 373: 374:  separator] `,`
[ 383: 387: identifier] `None`
[ 388: 390:   operator] `=>`
[ 391: 396: identifier] `panic`
[ 396: 397:  separator] `(`
[ 398: 437:     string] `Option.unwrap: expected Some, have None`
[ 438: 439:  separator] `)`
[ 439: 440:  separator] `,`
[ 445: 446:  separator] `}`
[ 452: 455: identifier] `mut`
[ 456: 457: identifier] `a`
[ 457: 458:   operator] `:`
[ 459: 460: identifier] `T`
[ 460: 461:  separator] `;`
[ 466: 472: identifier] `return`
[ 473: 474: identifier] `a`
[ 474: 475:  separator] `;`
[ 476: 477:  separator] `}`
[01m[32mEnded lexing[00m runtime (1.74ms)
[01m[32mStarted parsing[00m runtime
[01m[32mEnded parsing[00m runtime (0.91ms)
[01m[32mStarted constructing module[00m __runtime
 [32mStarted constructing submodule[00m runtime
 [32mEnded constructing submodule[00m runtime (0.18ms)
[01m[32mEnded constructing module[00m __runtime (0.23ms)
[01m[32mStarted resolving module[00m __runtime
[01m[32mEnded resolving module[00m __runtime (0.44ms)
This scope:
 panic (function)
 Option (type)
Parent scope:
  u32 (type)
  bool (type)
  void (type)
  ype(18) (type)
  s32 (type)
  s128 (type)
  uintptr (type)
  rune (type)
  u8 (type)
  f64 (type)
  u64 (type)
  u128 (type)
  f32 (type)
  f128 (type)
  int (type)
  uint (type)
  s64 (type)
  u16 (type)
  string (type)
  s8 (type)
  s16 (type)
[01m[32mStarted inferring submodule[00m runtime
[01m[32mEnded inferring submodule[00m runtime (0.86ms)
[01m[32mStarted analysis pass[00m attribute
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.06ms)
[01m[32mEnded analysis pass[00m attribute (0.11ms)
[01m[32mStarted analysis pass[00m unreachable
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.05ms)
[01m[32mEnded analysis pass[00m unreachable (0.07ms)
[01m[32mStarted analysis pass[00m break and next
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.05ms)
[01m[32mEnded analysis pass[00m break and next (0.06ms)
[01m[32mStarted analysis pass[00m deprecated
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.04ms)
[01m[32mEnded analysis pass[00m deprecated (0.06ms)
[01m[32mStarted analysis pass[00m recusrive definition
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.04ms)
[01m[32mEnded analysis pass[00m recusrive definition (0.06ms)
[01m[32mStarted analysis pass[00m type
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.09ms)
[01m[32mEnded analysis pass[00m type (0.11ms)
[01m[32mStarted analysis pass[00m immutable assign
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.04ms)
[01m[32mEnded analysis pass[00m immutable assign (0.06ms)
[01m[32mStarted analysis pass[00m use before declare
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.05ms)
[01m[32mEnded analysis pass[00m use before declare (0.07ms)
[01m[32mStarted analysis pass[00m misc
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.04ms)
[01m[32mEnded analysis pass[00m misc (0.06ms)
[01m[32mStarted analysis pass[00m reference
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.04ms)
[01m[32mEnded analysis pass[00m reference (0.06ms)
[01m[32mStarted analysis pass[00m unused
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.05ms)
[01m[32mEnded analysis pass[00m unused (0.07ms)
[01m[32mStarted lexing[00m test-dynamic-string
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  12: identifier] `io`
[  13:  14:   operator] `#`
[  14:  17: identifier] `use`
[  18:  21: identifier] `std`
[  21:  23:   operator] `::`
[  23:  29: identifier] `string`
[  31:  34: identifier] `pub`
[  35:  39: identifier] `func`
[  40:  44: identifier] `main`
[  44:  45:  separator] `(`
[  45:  46:  separator] `)`
[  47:  49:   operator] `->`
[  50:  53: identifier] `int`
[  54:  55:  separator] `{`
[  57:  61: identifier] `test`
[  62:  63:   operator] `:`
[  63:  64:   operator] `=`
[  65:  71: identifier] `string`
[  71:  73:   operator] `::`
[  73:  79: identifier] `String`
[  79:  81:   operator] `::`
[  81:  85: identifier] `from`
[  85:  86:  separator] `(`
[  87:  93:     string] `hello `
[  94:  95:  separator] `)`
[  95:  96:  separator] `;`
[  98: 103: identifier] `defer`
[ 104: 108: identifier] `test`
[ 108: 109:  separator] `.`
[ 109: 116: identifier] `destroy`
[ 116: 117:  separator] `(`
[ 117: 118:  separator] `)`
[ 118: 119:  separator] `;`
[ 122: 124: identifier] `io`
[ 124: 126:   operator] `::`
[ 126: 144: identifier] `printDynamicString`
[ 144: 145:  separator] `(`
[ 145: 149: identifier] `test`
[ 149: 150:  separator] `)`
[ 150: 151:  separator] `;`
[ 154: 158: identifier] `test`
[ 158: 159:  separator] `.`
[ 159: 165: identifier] `append`
[ 165: 166:  separator] `(`
[ 166: 169:       rune] `'w'`
[ 169: 170:  separator] `)`
[ 170: 171:  separator] `;`
[ 173: 177: identifier] `test`
[ 177: 178:  separator] `.`
[ 178: 184: identifier] `append`
[ 184: 185:  separator] `(`
[ 185: 188:       rune] `'o'`
[ 188: 189:  separator] `)`
[ 189: 190:  separator] `;`
[ 192: 196: identifier] `test`
[ 196: 197:  separator] `.`
[ 197: 203: identifier] `concat`
[ 203: 204:  separator] `(`
[ 205: 208:     string] `rld`
[ 209: 210:  separator] `)`
[ 210: 211:  separator] `;`
[ 213: 215: identifier] `io`
[ 215: 217:   operator] `::`
[ 217: 235: identifier] `printDynamicString`
[ 235: 236:  separator] `(`
[ 236: 240: identifier] `test`
[ 240: 241:  separator] `)`
[ 241: 242:  separator] `;`
[ 245: 256: identifier] `poppedValue`
[ 257: 258:   operator] `:`
[ 258: 259:   operator] `=`
[ 260: 264: identifier] `test`
[ 264: 265:  separator] `.`
[ 265: 268: identifier] `pop`
[ 268: 269:  separator] `(`
[ 269: 270:  separator] `)`
[ 270: 271:  separator] `;`
[ 274: 276: identifier] `io`
[ 276: 278:   operator] `::`
[ 278: 285: identifier] `println`
[ 285: 286:  separator] `(`
[ 287: 300:     string] `just popped: `
[ 301: 302:  separator] `)`
[ 302: 303:  separator] `;`
[ 305: 307: identifier] `io`
[ 307: 309:   operator] `::`
[ 309: 318: identifier] `printRune`
[ 318: 319:  separator] `(`
[ 319: 330: identifier] `poppedValue`
[ 330: 331:  separator] `.`
[ 331: 337: identifier] `unwrap`
[ 337: 338:  separator] `(`
[ 338: 339:  separator] `)`
[ 339: 340:  separator] `)`
[ 340: 341:  separator] `;`
[ 343: 345: identifier] `io`
[ 345: 347:   operator] `::`
[ 347: 354: identifier] `println`
[ 354: 355:  separator] `(`
[ 356: 356:     string] ``
[ 357: 358:  separator] `)`
[ 358: 359:  separator] `;`
[ 362: 364: identifier] `io`
[ 364: 366:   operator] `::`
[ 366: 384: identifier] `printDynamicString`
[ 384: 385:  separator] `(`
[ 385: 389: identifier] `test`
[ 389: 390:  separator] `)`
[ 390: 391:  separator] `;`
[ 394: 397: identifier] `mut`
[ 398: 401: identifier] `idx`
[ 402: 403:   operator] `:`
[ 403: 404:   operator] `=`
[ 405: 409: identifier] `uint`
[ 409: 410:  separator] `(`
[ 410: 411:     number] `0`
[ 411: 412:  separator] `)`
[ 412: 413:  separator] `;`
[ 415: 418: identifier] `for`
[ 419: 422: identifier] `idx`
[ 423: 424:   operator] `<`
[ 425: 429: identifier] `test`
[ 429: 430:  separator] `.`
[ 430: 436: identifier] `length`
[ 436: 437:  separator] `(`
[ 437: 438:  separator] `)`
[ 439: 440:  separator] `{`
[ 443: 454: identifier] `poppedValue`
[ 455: 456:   operator] `:`
[ 456: 457:   operator] `=`
[ 458: 462: identifier] `test`
[ 462: 463:  separator] `.`
[ 463: 466: identifier] `pop`
[ 466: 467:  separator] `(`
[ 467: 468:  separator] `)`
[ 468: 469:  separator] `;`
[ 472: 474: identifier] `io`
[ 474: 476:   operator] `::`
[ 476: 485: identifier] `printRune`
[ 485: 486:  separator] `(`
[ 486: 497: identifier] `poppedValue`
[ 497: 498:  separator] `.`
[ 498: 504: identifier] `unwrap`
[ 504: 505:  separator] `(`
[ 505: 506:  separator] `)`
[ 506: 507:  separator] `)`
[ 507: 508:  separator] `;`
[ 511: 514: identifier] `idx`
[ 515: 516:   operator] `+`
[ 516: 517:   operator] `=`
[ 518: 519:     number] `1`
[ 519: 520:  separator] `;`
[ 522: 523:  separator] `}`
[ 526: 530: identifier] `test`
[ 530: 531:  separator] `.`
[ 531: 534: identifier] `pop`
[ 534: 535:  separator] `(`
[ 535: 536:  separator] `)`
[ 536: 537:  separator] `;`
[ 548: 552: identifier] `test`
[ 552: 553:  separator] `.`
[ 553: 559: identifier] `append`
[ 559: 560:  separator] `(`
[ 560: 563:       rune] `'京'`
[ 563: 564:  separator] `)`
[ 564: 565:  separator] `;`
[ 567: 572: identifier] `value`
[ 573: 574:   operator] `:`
[ 574: 575:   operator] `=`
[ 576: 580: identifier] `test`
[ 580: 581:  separator] `.`
[ 581: 584: identifier] `pop`
[ 584: 585:  separator] `(`
[ 585: 586:  separator] `)`
[ 586: 587:  separator] `;`
[ 590: 592: identifier] `io`
[ 592: 594:   operator] `::`
[ 594: 603: identifier] `printRune`
[ 603: 604:  separator] `(`
[ 604: 608:       rune] `'\n'`
[ 608: 609:  separator] `)`
[ 609: 610:  separator] `;`
[ 612: 614: identifier] `io`
[ 614: 616:   operator] `::`
[ 616: 625: identifier] `printRune`
[ 625: 626:  separator] `(`
[ 626: 631: identifier] `value`
[ 631: 632:  separator] `.`
[ 632: 638: identifier] `unwrap`
[ 638: 639:  separator] `(`
[ 639: 640:  separator] `)`
[ 640: 641:  separator] `)`
[ 641: 642:  separator] `;`
[ 645: 651: identifier] `return`
[ 652: 653:     number] `0`
[ 653: 654:  separator] `;`
[ 655: 656:  separator] `}`
[01m[32mEnded lexing[00m test-dynamic-string (1.30ms)
[01m[32mStarted parsing[00m test-dynamic-string
[01m[32mEnded parsing[00m test-dynamic-string (0.53ms)
[01m[32mStarted read/lex/parse phase[00m
 [32mStarted lexing[00m file
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  13: identifier] `mem`
[  15:  19: identifier] `type`
[  20:  24: identifier] `FILE`
[  25:  31: identifier] `struct`
[  32:  33:  separator] `{`
[  33:  34:  separator] `}`
[  34:  35:  separator] `;`
[  37:  38:  separator] `[`
[  38:  39: identifier] `c`
[  39:  40:  separator] `]`
[  41:  45: identifier] `func`
[  46:  51: identifier] `fopen`
[  51:  52:  separator] `(`
[  52:  55: identifier] `loc`
[  55:  56:   operator] `:`
[  57:  58:   operator] `^`
[  58:  60: identifier] `u8`
[  60:  61:  separator] `,`
[  62:  66: identifier] `mode`
[  66:  67:   operator] `:`
[  68:  69:   operator] `^`
[  69:  71: identifier] `u8`
[  71:  72:  separator] `)`
[  73:  75:   operator] `->`
[  76:  77:   operator] `^`
[  77:  81: identifier] `FILE`
[  81:  82:  separator] `;`
[  83:  84:  separator] `[`
[  84:  85: identifier] `c`
[  85:  86:  separator] `]`
[  87:  91: identifier] `func`
[  92:  97: identifier] `fseek`
[  97:  98:  separator] `(`
[  98: 104: identifier] `handle`
[ 104: 105:   operator] `:`
[ 106: 107:   operator] `^`
[ 107: 111: identifier] `FILE`
[ 111: 112:  separator] `,`
[ 113: 119: identifier] `offset`
[ 119: 120:   operator] `:`
[ 121: 125: identifier] `uint`
[ 125: 126:  separator] `,`
[ 127: 133: identifier] `whence`
[ 133: 134:   operator] `:`
[ 135: 139: identifier] `uint`
[ 139: 140:  separator] `)`
[ 140: 141:  separator] `;`
[ 142: 143:  separator] `[`
[ 143: 144: identifier] `c`
[ 144: 145:  separator] `]`
[ 146: 150: identifier] `func`
[ 151: 156: identifier] `ftell`
[ 156: 157:  separator] `(`
[ 157: 163: identifier] `handle`
[ 163: 164:   operator] `:`
[ 165: 166:   operator] `^`
[ 166: 170: identifier] `FILE`
[ 170: 171:  separator] `)`
[ 172: 174:   operator] `->`
[ 175: 179: identifier] `uint`
[ 179: 180:  separator] `;`
[ 181: 182:  separator] `[`
[ 182: 183: identifier] `c`
[ 183: 184:  separator] `]`
[ 185: 189: identifier] `func`
[ 190: 196: identifier] `rewind`
[ 196: 197:  separator] `(`
[ 197: 203: identifier] `handle`
[ 203: 204:   operator] `:`
[ 205: 206:   operator] `^`
[ 206: 210: identifier] `FILE`
[ 210: 211:  separator] `)`
[ 211: 212:  separator] `;`
[ 213: 214:  separator] `[`
[ 214: 215: identifier] `c`
[ 215: 216:  separator] `]`
[ 217: 221: identifier] `func`
[ 222: 227: identifier] `fread`
[ 227: 228:  separator] `(`
[ 228: 233: identifier] `where`
[ 233: 234:   operator] `:`
[ 235: 236:   operator] `^`
[ 236: 238: identifier] `u8`
[ 238: 239:  separator] `,`
[ 240: 242: identifier] `sz`
[ 242: 243:   operator] `:`
[ 244: 248: identifier] `uint`
[ 248: 249:  separator] `,`
[ 250: 255: identifier] `dunno`
[ 255: 256:   operator] `:`
[ 257: 261: identifier] `uint`
[ 261: 262:  separator] `,`
[ 263: 269: identifier] `handle`
[ 269: 270:   operator] `:`
[ 271: 272:   operator] `^`
[ 272: 276: identifier] `FILE`
[ 276: 277:  separator] `)`
[ 277: 278:  separator] `;`
[ 279: 280:  separator] `[`
[ 280: 281: identifier] `c`
[ 281: 282:  separator] `]`
[ 283: 287: identifier] `func`
[ 288: 294: identifier] `fclose`
[ 294: 295:  separator] `(`
[ 295: 301: identifier] `handle`
[ 301: 302:   operator] `:`
[ 303: 304:   operator] `^`
[ 304: 308: identifier] `FILE`
[ 308: 309:  separator] `)`
[ 309: 310:  separator] `;`
[ 311: 312:  separator] `[`
[ 312: 313: identifier] `c`
[ 313: 314:  separator] `]`
[ 315: 319: identifier] `func`
[ 320: 326: identifier] `getenv`
[ 326: 327:  separator] `(`
[ 327: 331: identifier] `what`
[ 331: 332:   operator] `:`
[ 333: 334:   operator] `^`
[ 334: 336: identifier] `u8`
[ 336: 337:  separator] `)`
[ 338: 340:   operator] `->`
[ 341: 342:   operator] `^`
[ 342: 344: identifier] `u8`
[ 344: 345:  separator] `;`
[ 347: 350: identifier] `pub`
[ 351: 355: identifier] `type`
[ 356: 364: identifier] `FileMode`
[ 365: 369: identifier] `enum`
[ 370: 371:  separator] `{`
[ 373: 377: identifier] `Read`
[ 377: 378:  separator] `,`
[ 380: 385: identifier] `Write`
[ 385: 386:  separator] `,`
[ 388: 394: identifier] `Append`
[ 394: 395:  separator] `,`
[ 396: 397:  separator] `}`
[ 397: 398:  separator] `;`
[ 446: 449: identifier] `pub`
[ 450: 454: identifier] `func`
[ 455: 456:  separator] `(`
[ 456: 457: identifier] `f`
[ 457: 458:   operator] `:`
[ 459: 467: identifier] `FileMode`
[ 467: 468:  separator] `)`
[ 469: 482: identifier] `getLegacyMode`
[ 482: 483:  separator] `(`
[ 483: 484:  separator] `)`
[ 485: 487:   operator] `->`
[ 488: 494: identifier] `string`
[ 495: 496:  separator] `{`
[ 498: 500: identifier] `if`
[ 501: 502: identifier] `f`
[ 503: 505:   operator] `==`
[ 506: 514: identifier] `FileMode`
[ 514: 516:   operator] `::`
[ 516: 520: identifier] `Read`
[ 521: 522:  separator] `{`
[ 525: 531: identifier] `return`
[ 533: 534:     string] `r`
[ 535: 536:  separator] `;`
[ 538: 539:  separator] `}`
[ 541: 545: identifier] `else`
[ 546: 548: identifier] `if`
[ 549: 550: identifier] `f`
[ 551: 553:   operator] `==`
[ 554: 562: identifier] `FileMode`
[ 562: 564:   operator] `::`
[ 564: 569: identifier] `Write`
[ 570: 571:  separator] `{`
[ 574: 580: identifier] `return`
[ 582: 583:     string] `w`
[ 584: 585:  separator] `;`
[ 587: 588:  separator] `}`
[ 590: 594: identifier] `else`
[ 595: 597: identifier] `if`
[ 598: 599: identifier] `f`
[ 600: 602:   operator] `==`
[ 603: 611: identifier] `FileMode`
[ 611: 613:   operator] `::`
[ 613: 619: identifier] `Append`
[ 620: 621:  separator] `{`
[ 624: 630: identifier] `return`
[ 632: 633:     string] `a`
[ 634: 635:  separator] `;`
[ 637: 638:  separator] `}`
[ 640: 646: identifier] `return`
[ 648: 649:     string] `r`
[ 650: 651:  separator] `;`
[ 668: 669:  separator] `}`
[ 671: 674: identifier] `pub`
[ 675: 679: identifier] `type`
[ 680: 684: identifier] `Path`
[ 685: 691: identifier] `struct`
[ 692: 693:  separator] `{`
[ 695: 703: identifier] `location`
[ 703: 704:   operator] `:`
[ 705: 711: identifier] `string`
[ 711: 712:  separator] `,`
[ 713: 714:  separator] `}`
[ 714: 715:  separator] `;`
[ 717: 720: identifier] `pub`
[ 721: 725: identifier] `func`
[ 726: 727:  separator] `(`
[ 727: 731: identifier] `Path`
[ 731: 732:  separator] `)`
[ 733: 736: identifier] `new`
[ 736: 737:  separator] `(`
[ 737: 745: identifier] `location`
[ 745: 746:   operator] `:`
[ 747: 753: identifier] `string`
[ 753: 754:  separator] `)`
[ 755: 757:   operator] `->`
[ 758: 759:   operator] `^`
[ 759: 762: identifier] `mut`
[ 763: 767: identifier] `Path`
[ 768: 769:  separator] `{`
[ 771: 774: identifier] `mut`
[ 775: 776: identifier] `p`
[ 776: 777:   operator] `:`
[ 778: 779:   operator] `^`
[ 779: 782: identifier] `mut`
[ 783: 787: identifier] `Path`
[ 788: 789:   operator] `=`
[ 790: 793: identifier] `mem`
[ 793: 795:   operator] `::`
[ 795: 800: identifier] `alloc`
[ 800: 801:   operator] `<`
[ 801: 805: identifier] `Path`
[ 805: 806:   operator] `>`
[ 806: 807:  separator] `(`
[ 807: 808:  separator] `)`
[ 808: 809:  separator] `;`
[ 811: 812: identifier] `p`
[ 812: 813:  separator] `.`
[ 813: 821: identifier] `location`
[ 822: 823:   operator] `=`
[ 824: 832: identifier] `location`
[ 832: 833:  separator] `;`
[ 835: 841: identifier] `return`
[ 842: 843: identifier] `p`
[ 843: 844:  separator] `;`
[ 845: 846:  separator] `}`
[ 848: 851: identifier] `pub`
[ 852: 856: identifier] `type`
[ 857: 861: identifier] `File`
[ 862: 868: identifier] `struct`
[ 869: 870:  separator] `{`
[ 872: 876: identifier] `name`
[ 876: 877:   operator] `:`
[ 878: 884: identifier] `string`
[ 884: 885:  separator] `,`
[ 887: 891: identifier] `path`
[ 891: 892:   operator] `:`
[ 893: 894:   operator] `^`
[ 894: 897: identifier] `mut`
[ 898: 902: identifier] `Path`
[ 902: 903:  separator] `,`
[ 905: 911: identifier] `handle`
[ 911: 912:   operator] `:`
[ 913: 914:   operator] `^`
[ 914: 918: identifier] `FILE`
[ 918: 919:  separator] `,`
[ 920: 921:  separator] `}`
[ 921: 922:  separator] `;`
[ 924: 927: identifier] `pub`
[ 928: 932: identifier] `func`
[ 933: 934:  separator] `(`
[ 934: 938: identifier] `File`
[ 938: 939:  separator] `)`
[ 940: 944: identifier] `open`
[ 944: 945:  separator] `(`
[ 945: 949: identifier] `path`
[ 949: 950:   operator] `:`
[ 951: 952:   operator] `^`
[ 952: 955: identifier] `mut`
[ 956: 960: identifier] `Path`
[ 960: 961:  separator] `,`
[ 962: 966: identifier] `mode`
[ 966: 967:   operator] `:`
[ 968: 976: identifier] `FileMode`
[ 976: 977:  separator] `)`
[ 978: 980:   operator] `->`
[ 981: 982:   operator] `^`
[ 982: 985: identifier] `mut`
[ 986: 990: identifier] `File`
[ 991: 992:  separator] `{`
[ 994: 997: identifier] `mut`
[ 998: 999: identifier] `f`
[ 999:1000:   operator] `:`
[1001:1002:   operator] `^`
[1002:1005: identifier] `mut`
[1006:1010: identifier] `File`
[1011:1012:   operator] `=`
[1013:1016: identifier] `mem`
[1016:1018:   operator] `::`
[1018:1023: identifier] `alloc`
[1023:1024:   operator] `<`
[1024:1028: identifier] `File`
[1028:1029:   operator] `>`
[1029:1030:  separator] `(`
[1030:1031:  separator] `)`
[1031:1032:  separator] `;`
[1034:1035: identifier] `f`
[1035:1036:  separator] `.`
[1036:1040: identifier] `path`
[1041:1042:   operator] `=`
[1043:1047: identifier] `path`
[1047:1048:  separator] `;`
[1050:1056: identifier] `return`
[1057:1058: identifier] `f`
[1058:1059:  separator] `;`
[1060:1061:  separator] `}`
[1063:1066: identifier] `pub`
[1067:1071: identifier] `func`
[1072:1073:  separator] `(`
[1073:1074: identifier] `f`
[1074:1075:   operator] `:`
[1076:1077:   operator] `^`
[1077:1080: identifier] `mut`
[1081:1085: identifier] `File`
[1085:1086:  separator] `)`
[1087:1099: identifier] `readToString`
[1099:1100:  separator] `(`
[1100:1101:  separator] `)`
[1102:1104:   operator] `->`
[1105:1111: identifier] `string`
[1112:1113:  separator] `{`
[1115:1121: identifier] `return`
[1122:1123: identifier] `f`
[1123:1124:  separator] `.`
[1124:1128: identifier] `name`
[1128:1129:  separator] `;`
[1130:1131:  separator] `}`
[1133:1136: identifier] `pub`
[1137:1141: identifier] `func`
[1142:1143:  separator] `(`
[1143:1144: identifier] `f`
[1144:1145:   operator] `:`
[1146:1147:   operator] `^`
[1147:1150: identifier] `mut`
[1151:1155: identifier] `File`
[1155:1156:  separator] `)`
[1157:1162: identifier] `close`
[1162:1163:  separator] `(`
[1163:1164:  separator] `)`
[1165:1166:  separator] `{`
[1192:1193:  separator] `}`
 [32mEnded lexing[00m file (2.15ms)
 [32mStarted parsing[00m file
 [32mEnded parsing[00m file (0.64ms)
 [32mStarted lexing[00m println
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  17: identifier] `unicode`
[  17:  19:   operator] `::`
[  19:  23: identifier] `utf8`
[  24:  25:   operator] `#`
[  25:  28: identifier] `use`
[  29:  32: identifier] `std`
[  32:  34:   operator] `::`
[  34:  40: identifier] `string`
[  41:  42:   operator] `#`
[  42:  45: identifier] `use`
[  46:  49: identifier] `std`
[  49:  51:   operator] `::`
[  51:  54: identifier] `mem`
[  56:  57:  separator] `[`
[  57:  58: identifier] `c`
[  58:  59:  separator] `]`
[  60:  64: identifier] `func`
[  65:  71: identifier] `printf`
[  71:  72:  separator] `(`
[  72:  75: identifier] `fmt`
[  75:  76:   operator] `:`
[  77:  78:   operator] `^`
[  78:  80: identifier] `u8`
[  80:  81:  separator] `,`
[  82:  83:  separator] `.`
[  83:  84:  separator] `.`
[  84:  85:  separator] `.`
[  85:  86:  separator] `)`
[  87:  89:   operator] `->`
[  90:  93: identifier] `int`
[  93:  94:  separator] `;`
[ 142: 145: identifier] `pub`
[ 146: 150: identifier] `func`
[ 151: 158: identifier] `println`
[ 158: 159:  separator] `(`
[ 159: 166: identifier] `message`
[ 166: 167:   operator] `:`
[ 168: 174: identifier] `string`
[ 174: 175:  separator] `)`
[ 176: 178:   operator] `->`
[ 179: 182: identifier] `int`
[ 183: 184:  separator] `{`
[ 186: 188: identifier] `if`
[ 189: 192: identifier] `len`
[ 192: 193:  separator] `(`
[ 193: 200: identifier] `message`
[ 200: 201:  separator] `)`
[ 202: 204:   operator] `==`
[ 205: 206:     number] `0`
[ 207: 208:  separator] `{`
[ 211: 217: identifier] `return`
[ 218: 219: identifier] `C`
[ 219: 221:   operator] `::`
[ 221: 227: identifier] `printf`
[ 227: 228:  separator] `(`
[ 228: 229: identifier] `c`
[ 230: 232:     string] `\n`
[ 233: 234:  separator] `)`
[ 234: 235:  separator] `;`
[ 237: 238:  separator] `}`
[ 240: 246: identifier] `return`
[ 247: 248: identifier] `C`
[ 248: 250:   operator] `::`
[ 250: 256: identifier] `printf`
[ 256: 257:  separator] `(`
[ 257: 258: identifier] `c`
[ 259: 265:     string] `%.*s\n`
[ 266: 267:  separator] `,`
[ 268: 271: identifier] `len`
[ 271: 272:  separator] `(`
[ 272: 279: identifier] `message`
[ 279: 280:  separator] `)`
[ 280: 281:  separator] `,`
[ 282: 283:   operator] `&`
[ 283: 290: identifier] `message`
[ 290: 291:  separator] `[`
[ 291: 292:     number] `0`
[ 292: 293:  separator] `]`
[ 293: 294:  separator] `)`
[ 294: 295:  separator] `;`
[ 296: 297:  separator] `}`
[ 299: 302: identifier] `pub`
[ 303: 307: identifier] `func`
[ 308: 313: identifier] `print`
[ 313: 314:  separator] `(`
[ 314: 321: identifier] `message`
[ 321: 322:   operator] `:`
[ 323: 329: identifier] `string`
[ 329: 330:  separator] `)`
[ 331: 333:   operator] `->`
[ 334: 337: identifier] `int`
[ 338: 339:  separator] `{`
[ 341: 343: identifier] `if`
[ 344: 347: identifier] `len`
[ 347: 348:  separator] `(`
[ 348: 355: identifier] `message`
[ 355: 356:  separator] `)`
[ 357: 359:   operator] `==`
[ 360: 361:     number] `0`
[ 362: 363:  separator] `{`
[ 366: 372: identifier] `return`
[ 373: 374:     number] `0`
[ 374: 375:  separator] `;`
[ 377: 378:  separator] `}`
[ 380: 386: identifier] `return`
[ 387: 388: identifier] `C`
[ 388: 390:   operator] `::`
[ 390: 396: identifier] `printf`
[ 396: 397:  separator] `(`
[ 397: 398: identifier] `c`
[ 399: 403:     string] `%.*s`
[ 404: 405:  separator] `,`
[ 406: 409: identifier] `len`
[ 409: 410:  separator] `(`
[ 410: 417: identifier] `message`
[ 417: 418:  separator] `)`
[ 418: 419:  separator] `,`
[ 420: 421:   operator] `&`
[ 421: 428: identifier] `message`
[ 428: 429:  separator] `[`
[ 429: 430:     number] `0`
[ 430: 431:  separator] `]`
[ 431: 432:  separator] `)`
[ 432: 433:  separator] `;`
[ 434: 435:  separator] `}`
[ 437: 440: identifier] `pub`
[ 441: 445: identifier] `func`
[ 446: 464: identifier] `printDynamicString`
[ 464: 465:  separator] `(`
[ 465: 466: identifier] `s`
[ 466: 467:   operator] `:`
[ 468: 469:   operator] `^`
[ 469: 475: identifier] `string`
[ 475: 477:   operator] `::`
[ 477: 483: identifier] `String`
[ 483: 484:  separator] `)`
[ 485: 487:   operator] `->`
[ 488: 491: identifier] `int`
[ 492: 493:  separator] `{`
[ 495: 498: identifier] `mut`
[ 499: 502: identifier] `idx`
[ 503: 504:   operator] `:`
[ 504: 505:   operator] `=`
[ 506: 510: identifier] `uint`
[ 510: 511:  separator] `(`
[ 511: 512:     number] `0`
[ 512: 513:  separator] `)`
[ 513: 514:  separator] `;`
[ 516: 519: identifier] `for`
[ 520: 523: identifier] `idx`
[ 524: 525:   operator] `<`
[ 526: 527: identifier] `s`
[ 527: 528:  separator] `.`
[ 528: 534: identifier] `length`
[ 534: 535:  separator] `(`
[ 535: 536:  separator] `)`
[ 537: 538:  separator] `{`
[ 541: 550: identifier] `printRune`
[ 550: 551:  separator] `(`
[ 551: 552: identifier] `s`
[ 552: 553:  separator] `.`
[ 553: 555: identifier] `at`
[ 555: 556:  separator] `(`
[ 556: 559: identifier] `idx`
[ 559: 560:  separator] `)`
[ 560: 561:  separator] `)`
[ 561: 562:  separator] `;`
[ 565: 568: identifier] `idx`
[ 569: 570:   operator] `+`
[ 570: 571:   operator] `=`
[ 572: 573:     number] `1`
[ 573: 574:  separator] `;`
[ 576: 577:  separator] `}`
[ 579: 588: identifier] `printRune`
[ 588: 589:  separator] `(`
[ 589: 593:       rune] `'\n'`
[ 593: 594:  separator] `)`
[ 594: 595:  separator] `;`
[ 597: 603: identifier] `return`
[ 604: 607: identifier] `int`
[ 607: 608:  separator] `(`
[ 608: 611: identifier] `idx`
[ 611: 612:  separator] `)`
[ 612: 613:  separator] `;`
[ 614: 615:  separator] `}`
[ 617: 620: identifier] `pub`
[ 621: 625: identifier] `func`
[ 626: 635: identifier] `printRune`
[ 635: 636:  separator] `(`
[ 636: 637: identifier] `r`
[ 637: 638:   operator] `:`
[ 639: 643: identifier] `rune`
[ 643: 644:  separator] `)`
[ 645: 647:   operator] `->`
[ 648: 651: identifier] `int`
[ 652: 653:  separator] `{`
[ 655: 658: identifier] `mut`
[ 659: 663: identifier] `rPtr`
[ 664: 665:   operator] `:`
[ 665: 666:   operator] `=`
[ 667: 668:  separator] `(`
[ 668: 669:   operator] `^`
[ 669: 671: identifier] `u8`
[ 671: 672:  separator] `)`
[ 672: 673:  separator] `(`
[ 673: 680: identifier] `uintptr`
[ 680: 681:  separator] `(`
[ 681: 682:   operator] `&`
[ 682: 683: identifier] `r`
[ 683: 684:  separator] `)`
[ 684: 685:  separator] `)`
[ 685: 686:  separator] `;`
[ 688: 693: identifier] `rCast`
[ 694: 695:   operator] `:`
[ 695: 696:   operator] `=`
[ 697: 698:  separator] `[`
[ 698: 699:  separator] `]`
[ 699: 703: identifier] `rune`
[ 703: 704:  separator] `{`
[ 704: 705: identifier] `r`
[ 705: 706:  separator] `}`
[ 706: 707:  separator] `;`
[ 709: 717: identifier] `numBytes`
[ 718: 719:   operator] `:`
[ 719: 720:   operator] `=`
[ 721: 725: identifier] `utf8`
[ 725: 727:   operator] `::`
[ 727: 735: identifier] `numBytes`
[ 735: 736:  separator] `(`
[ 736: 741: identifier] `rCast`
[ 741: 742:  separator] `)`
[ 742: 743:  separator] `;`
[ 748: 749: identifier] `C`
[ 749: 751:   operator] `::`
[ 751: 757: identifier] `printf`
[ 757: 758:  separator] `(`
[ 758: 759: identifier] `c`
[ 760: 764:     string] `%.*s`
[ 765: 766:  separator] `,`
[ 767: 775: identifier] `numBytes`
[ 776: 777:   operator] `+`
[ 778: 779:     number] `1`
[ 779: 780:  separator] `,`
[ 781: 785: identifier] `rPtr`
[ 785: 786:  separator] `)`
[ 786: 787:  separator] `;`
[ 789: 795: identifier] `return`
[ 796: 797:     number] `0`
[ 797: 798:  separator] `;`
[ 799: 800:  separator] `}`
[ 802: 805: identifier] `pub`
[ 806: 810: identifier] `func`
[ 811: 820: identifier] `printByte`
[ 820: 821:  separator] `(`
[ 821: 825: identifier] `byte`
[ 825: 826:   operator] `:`
[ 827: 829: identifier] `u8`
[ 829: 830:  separator] `)`
[ 831: 833:   operator] `->`
[ 834: 837: identifier] `int`
[ 838: 839:  separator] `{`
[ 841: 847: identifier] `return`
[ 848: 849: identifier] `C`
[ 849: 851:   operator] `::`
[ 851: 857: identifier] `printf`
[ 857: 858:  separator] `(`
[ 858: 859: identifier] `c`
[ 860: 862:     string] `%c`
[ 863: 864:  separator] `,`
[ 865: 869: identifier] `byte`
[ 869: 870:  separator] `)`
[ 870: 871:  separator] `;`
[ 872: 873:  separator] `}`
[ 875: 878: identifier] `pub`
[ 879: 883: identifier] `func`
[ 884: 892: identifier] `printInt`
[ 892: 893:  separator] `(`
[ 893: 896: identifier] `num`
[ 896: 897:   operator] `:`
[ 898: 901: identifier] `int`
[ 901: 902:  separator] `)`
[ 903: 905:   operator] `->`
[ 906: 909: identifier] `int`
[ 910: 911:  separator] `{`
[ 950: 956: identifier] `return`
[ 957: 958: identifier] `C`
[ 958: 960:   operator] `::`
[ 960: 966: identifier] `printf`
[ 966: 967:  separator] `(`
[ 967: 968: identifier] `c`
[ 969: 972:     string] `%zd`
[ 973: 974:  separator] `,`
[ 975: 978: identifier] `num`
[ 978: 979:  separator] `)`
[ 979: 980:  separator] `;`
[ 981: 982:  separator] `}`
[ 984: 987: identifier] `pub`
[ 988: 992: identifier] `func`
[ 993:1002: identifier] `printUint`
[1002:1003:  separator] `(`
[1003:1006: identifier] `num`
[1006:1007:   operator] `:`
[1008:1012: identifier] `uint`
[1012:1013:  separator] `)`
[1014:1016:   operator] `->`
[1017:1020: identifier] `int`
[1021:1022:  separator] `{`
[1061:1067: identifier] `return`
[1068:1069: identifier] `C`
[1069:1071:   operator] `::`
[1071:1077: identifier] `printf`
[1077:1078:  separator] `(`
[1078:1079: identifier] `c`
[1080:1083:     string] `%zu`
[1084:1085:  separator] `,`
[1086:1089: identifier] `num`
[1089:1090:  separator] `)`
[1090:1091:  separator] `;`
[1092:1093:  separator] `}`
 [32mEnded lexing[00m println (1.94ms)
 [32mStarted parsing[00m println
 [32mEnded parsing[00m println (0.87ms)
 [32mStarted lexing[00m string
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  13: identifier] `adt`
[  14:  15:   operator] `#`
[  15:  18: identifier] `use`
[  19:  22: identifier] `std`
[  22:  24:   operator] `::`
[  24:  27: identifier] `mem`
[  28:  29:   operator] `#`
[  29:  32: identifier] `use`
[  33:  36: identifier] `std`
[  36:  38:   operator] `::`
[  38:  45: identifier] `unicode`
[  45:  47:   operator] `::`
[  47:  51: identifier] `utf8`
[ 104: 107: identifier] `pub`
[ 108: 112: identifier] `type`
[ 113: 119: identifier] `String`
[ 120: 126: identifier] `struct`
[ 127: 128:  separator] `{`
[ 130: 134: identifier] `data`
[ 134: 135:   operator] `:`
[ 136: 137:   operator] `^`
[ 137: 140: identifier] `mut`
[ 141: 144: identifier] `adt`
[ 144: 146:   operator] `::`
[ 146: 150: identifier] `List`
[ 150: 151:   operator] `<`
[ 151: 155: identifier] `rune`
[ 155: 156:   operator] `>`
[ 156: 157:  separator] `,`
[ 159: 160:  separator] `}`
[ 160: 161:  separator] `;`
[ 222: 225: identifier] `pub`
[ 226: 230: identifier] `func`
[ 231: 232:  separator] `(`
[ 232: 238: identifier] `String`
[ 238: 239:  separator] `)`
[ 240: 244: identifier] `from`
[ 244: 245:  separator] `(`
[ 245: 251: identifier] `source`
[ 251: 252:   operator] `:`
[ 253: 259: identifier] `string`
[ 259: 260:  separator] `)`
[ 261: 263:   operator] `->`
[ 264: 265:   operator] `^`
[ 265: 268: identifier] `mut`
[ 269: 275: identifier] `String`
[ 276: 277:  separator] `{`
[ 279: 282: identifier] `str`
[ 283: 284:   operator] `:`
[ 284: 285:   operator] `=`
[ 286: 292: identifier] `String`
[ 292: 294:   operator] `::`
[ 294: 306: identifier] `withCapacity`
[ 306: 307:  separator] `(`
[ 307: 310: identifier] `len`
[ 310: 311:  separator] `(`
[ 311: 317: identifier] `source`
[ 317: 318:  separator] `)`
[ 318: 319:  separator] `)`
[ 319: 320:  separator] `;`
[ 322: 325: identifier] `mut`
[ 326: 329: identifier] `idx`
[ 330: 331:   operator] `:`
[ 331: 332:   operator] `=`
[ 333: 337: identifier] `uint`
[ 337: 338:  separator] `(`
[ 338: 339:     number] `0`
[ 339: 340:  separator] `)`
[ 340: 341:  separator] `;`
[ 343: 346: identifier] `for`
[ 347: 350: identifier] `idx`
[ 351: 352:   operator] `<`
[ 353: 356: identifier] `len`
[ 356: 357:  separator] `(`
[ 357: 363: identifier] `source`
[ 363: 364:  separator] `)`
[ 365: 366:  separator] `{`
[ 369: 373: identifier] `char`
[ 374: 375:   operator] `:`
[ 375: 376:   operator] `=`
[ 377: 378:  separator] `[`
[ 378: 379:  separator] `]`
[ 379: 381: identifier] `u8`
[ 381: 382:  separator] `{`
[ 382: 388: identifier] `source`
[ 388: 389:  separator] `[`
[ 389: 392: identifier] `idx`
[ 392: 393:  separator] `]`
[ 393: 394:  separator] `}`
[ 394: 395:  separator] `;`
[ 398: 409: identifier] `decodedChar`
[ 410: 411:   operator] `:`
[ 411: 412:   operator] `=`
[ 413: 414:  separator] `[`
[ 414: 415:  separator] `]`
[ 415: 419: identifier] `rune`
[ 419: 420:  separator] `{`
[ 420: 421:     number] `0`
[ 421: 422:  separator] `}`
[ 422: 423:  separator] `;`
[ 426: 436: identifier] `decodeChar`
[ 437: 438:   operator] `:`
[ 438: 439:   operator] `=`
[ 440: 444: identifier] `utf8`
[ 444: 446:   operator] `::`
[ 446: 452: identifier] `decode`
[ 452: 453:  separator] `(`
[ 453: 464: identifier] `decodedChar`
[ 464: 465:  separator] `,`
[ 466: 470: identifier] `char`
[ 470: 471:  separator] `)`
[ 471: 472:  separator] `;`
[ 475: 478: identifier] `str`
[ 478: 479:  separator] `.`
[ 479: 485: identifier] `append`
[ 485: 486:  separator] `(`
[ 486: 497: identifier] `decodedChar`
[ 497: 498:  separator] `[`
[ 498: 499:     number] `0`
[ 499: 500:  separator] `]`
[ 500: 501:  separator] `)`
[ 501: 502:  separator] `;`
[ 505: 508: identifier] `idx`
[ 509: 510:   operator] `+`
[ 510: 511:   operator] `=`
[ 512: 513:     number] `1`
[ 513: 514:  separator] `;`
[ 516: 517:  separator] `}`
[ 519: 525: identifier] `return`
[ 526: 529: identifier] `str`
[ 529: 530:  separator] `;`
[ 531: 532:  separator] `}`
[ 534: 537: identifier] `pub`
[ 538: 542: identifier] `func`
[ 543: 544:  separator] `(`
[ 544: 550: identifier] `String`
[ 550: 551:  separator] `)`
[ 552: 564: identifier] `withCapacity`
[ 564: 565:  separator] `(`
[ 565: 569: identifier] `size`
[ 569: 570:   operator] `:`
[ 571: 575: identifier] `uint`
[ 575: 576:  separator] `)`
[ 577: 579:   operator] `->`
[ 580: 581:   operator] `^`
[ 581: 584: identifier] `mut`
[ 585: 591: identifier] `String`
[ 592: 593:  separator] `{`
[ 595: 598: identifier] `str`
[ 599: 600:   operator] `:`
[ 600: 601:   operator] `=`
[ 602: 605: identifier] `mem`
[ 605: 607:   operator] `::`
[ 607: 612: identifier] `alloc`
[ 612: 613:   operator] `<`
[ 613: 619: identifier] `String`
[ 619: 620:   operator] `>`
[ 620: 621:  separator] `(`
[ 621: 622:  separator] `)`
[ 622: 623:  separator] `;`
[ 625: 626:   operator] `@`
[ 626: 629: identifier] `str`
[ 630: 631:   operator] `=`
[ 632: 638: identifier] `String`
[ 639: 640:  separator] `{`
[ 643: 647: identifier] `data`
[ 647: 648:   operator] `:`
[ 649: 652: identifier] `adt`
[ 652: 654:   operator] `::`
[ 654: 658: identifier] `List`
[ 658: 660:   operator] `::`
[ 660: 675: identifier] `newWithCapacity`
[ 675: 676:   operator] `<`
[ 676: 680: identifier] `rune`
[ 680: 681:   operator] `>`
[ 681: 682:  separator] `(`
[ 682: 686: identifier] `size`
[ 686: 687:  separator] `)`
[ 687: 688:  separator] `,`
[ 690: 691:  separator] `}`
[ 691: 692:  separator] `;`
[ 695: 698: identifier] `mut`
[ 699: 702: identifier] `idx`
[ 703: 704:   operator] `:`
[ 704: 705:   operator] `=`
[ 706: 710: identifier] `uint`
[ 710: 711:  separator] `(`
[ 711: 712:     number] `0`
[ 712: 713:  separator] `)`
[ 713: 714:  separator] `;`
[ 716: 719: identifier] `for`
[ 720: 723: identifier] `idx`
[ 724: 725:   operator] `<`
[ 726: 730: identifier] `size`
[ 731: 732:  separator] `{`
[ 735: 738: identifier] `str`
[ 738: 739:  separator] `.`
[ 739: 745: identifier] `append`
[ 745: 746:  separator] `(`
[ 746: 750:       rune] `'\0'`
[ 750: 751:  separator] `)`
[ 751: 752:  separator] `;`
[ 755: 758: identifier] `idx`
[ 759: 760:   operator] `+`
[ 760: 761:   operator] `=`
[ 762: 763:     number] `1`
[ 763: 764:  separator] `;`
[ 766: 767:  separator] `}`
[ 770: 776: identifier] `return`
[ 777: 780: identifier] `str`
[ 780: 781:  separator] `;`
[ 782: 783:  separator] `}`
[ 785: 812: doccomment] `/// Clear the entire string`
[ 813: 846: doccomment] `/// returning it back to a length`
[ 847: 859: doccomment] `/// of zero.`
[ 860: 863: identifier] `pub`
[ 864: 868: identifier] `func`
[ 869: 870:  separator] `(`
[ 870: 871: identifier] `a`
[ 871: 872:   operator] `:`
[ 873: 874:   operator] `^`
[ 874: 880: identifier] `String`
[ 880: 881:  separator] `)`
[ 882: 887: identifier] `clear`
[ 887: 888:  separator] `(`
[ 888: 889:  separator] `)`
[ 890: 891:  separator] `{`
[ 893: 896: identifier] `mut`
[ 897: 900: identifier] `idx`
[ 901: 902:   operator] `:`
[ 902: 903:   operator] `=`
[ 904: 908: identifier] `uint`
[ 908: 909:  separator] `(`
[ 909: 910:     number] `0`
[ 910: 911:  separator] `)`
[ 911: 912:  separator] `;`
[ 914: 917: identifier] `for`
[ 918: 921: identifier] `idx`
[ 922: 923:   operator] `<`
[ 924: 925: identifier] `a`
[ 925: 926:  separator] `.`
[ 926: 932: identifier] `length`
[ 932: 933:  separator] `(`
[ 933: 934:  separator] `)`
[ 935: 936:  separator] `{`
[ 939: 940: identifier] `a`
[ 940: 941:  separator] `.`
[ 941: 944: identifier] `pop`
[ 944: 945:  separator] `(`
[ 945: 946:  separator] `)`
[ 946: 947:  separator] `;`
[ 950: 953: identifier] `idx`
[ 954: 955:   operator] `+`
[ 955: 956:   operator] `=`
[ 957: 958:     number] `1`
[ 958: 959:  separator] `;`
[ 961: 962:  separator] `}`
[ 963: 964:  separator] `}`
[ 966:1000: doccomment] `/// Pops and returns the last rune`
[1001:1018: doccomment] `/// in the string`
[1019:1022: identifier] `pub`
[1023:1027: identifier] `func`
[1028:1029:  separator] `(`
[1029:1030: identifier] `a`
[1030:1031:   operator] `:`
[1032:1033:   operator] `^`
[1033:1039: identifier] `String`
[1039:1040:  separator] `)`
[1041:1044: identifier] `pop`
[1044:1045:  separator] `(`
[1045:1046:  separator] `)`
[1047:1049:   operator] `->`
[1050:1056: identifier] `Option`
[1056:1057:   operator] `<`
[1057:1061: identifier] `rune`
[1061:1062:   operator] `>`
[1063:1064:  separator] `{`
[1066:1068: identifier] `if`
[1069:1070: identifier] `a`
[1070:1071:  separator] `.`
[1071:1077: identifier] `length`
[1077:1078:  separator] `(`
[1078:1079:  separator] `)`
[1080:1082:   operator] `==`
[1083:1084:     number] `0`
[1085:1086:  separator] `{`
[1089:1095: identifier] `return`
[1096:1102: identifier] `Option`
[1102:1104:   operator] `::`
[1104:1108: identifier] `None`
[1108:1109:  separator] `;`
[1111:1112:  separator] `}`
[1114:1120: identifier] `return`
[1121:1122: identifier] `a`
[1122:1123:  separator] `.`
[1123:1127: identifier] `data`
[1127:1128:  separator] `.`
[1128:1131: identifier] `pop`
[1131:1132:  separator] `(`
[1132:1133:  separator] `)`
[1133:1134:  separator] `;`
[1135:1136:  separator] `}`
[1138:1157: doccomment] `/// Append a string`
[1158:1161: identifier] `pub`
[1162:1166: identifier] `func`
[1167:1168:  separator] `(`
[1168:1169: identifier] `a`
[1169:1170:   operator] `:`
[1171:1172:   operator] `^`
[1172:1178: identifier] `String`
[1178:1179:  separator] `)`
[1180:1186: identifier] `concat`
[1186:1187:  separator] `(`
[1187:1192: identifier] `other`
[1192:1193:   operator] `:`
[1194:1200: identifier] `string`
[1200:1201:  separator] `)`
[1202:1203:  separator] `{`
[1205:1208: identifier] `mut`
[1209:1212: identifier] `idx`
[1213:1214:   operator] `:`
[1214:1215:   operator] `=`
[1216:1220: identifier] `uint`
[1220:1221:  separator] `(`
[1221:1222:     number] `0`
[1222:1223:  separator] `)`
[1223:1224:  separator] `;`
[1226:1229: identifier] `for`
[1230:1233: identifier] `idx`
[1234:1235:   operator] `<`
[1236:1239: identifier] `len`
[1239:1240:  separator] `(`
[1240:1245: identifier] `other`
[1245:1246:  separator] `)`
[1247:1248:  separator] `{`
[1251:1267: identifier] `otherRunePointer`
[1268:1269:   operator] `:`
[1269:1270:   operator] `=`
[1271:1278: identifier] `uintptr`
[1278:1279:  separator] `(`
[1279:1284: identifier] `other`
[1284:1285:  separator] `[`
[1285:1288: identifier] `idx`
[1288:1289:  separator] `]`
[1289:1290:  separator] `)`
[1290:1291:  separator] `;`
[1294:1295: identifier] `a`
[1295:1296:  separator] `.`
[1296:1302: identifier] `append`
[1302:1303:  separator] `(`
[1303:1304:  separator] `(`
[1304:1308: identifier] `rune`
[1308:1309:  separator] `)`
[1309:1310:  separator] `(`
[1310:1326: identifier] `otherRunePointer`
[1326:1327:  separator] `)`
[1327:1328:  separator] `)`
[1328:1329:  separator] `;`
[1332:1335: identifier] `idx`
[1336:1337:   operator] `+`
[1337:1338:   operator] `=`
[1339:1340:     number] `1`
[1340:1341:  separator] `;`
[1343:1344:  separator] `}`
[1345:1346:  separator] `}`
[1348:1372: doccomment] `/// Append a single rune`
[1373:1376: identifier] `pub`
[1377:1381: identifier] `func`
[1382:1383:  separator] `(`
[1383:1384: identifier] `a`
[1384:1385:   operator] `:`
[1386:1387:   operator] `^`
[1387:1393: identifier] `String`
[1393:1394:  separator] `)`
[1395:1401: identifier] `append`
[1401:1402:  separator] `(`
[1402:1406: identifier] `char`
[1406:1407:   operator] `:`
[1408:1412: identifier] `rune`
[1412:1413:  separator] `)`
[1414:1415:  separator] `{`
[1417:1418: identifier] `a`
[1418:1419:  separator] `.`
[1419:1423: identifier] `data`
[1423:1424:  separator] `.`
[1424:1430: identifier] `append`
[1430:1431:  separator] `(`
[1431:1435: identifier] `char`
[1435:1436:  separator] `)`
[1436:1437:  separator] `;`
[1438:1439:  separator] `}`
[1441:1444: identifier] `pub`
[1445:1449: identifier] `func`
[1450:1451:  separator] `(`
[1451:1452: identifier] `a`
[1452:1453:   operator] `:`
[1454:1455:   operator] `^`
[1455:1461: identifier] `String`
[1461:1462:  separator] `)`
[1463:1465: identifier] `at`
[1465:1466:  separator] `(`
[1466:1471: identifier] `index`
[1471:1472:   operator] `:`
[1473:1477: identifier] `uint`
[1477:1478:  separator] `)`
[1479:1481:   operator] `->`
[1482:1486: identifier] `rune`
[1487:1488:  separator] `{`
[1490:1496: identifier] `return`
[1497:1498: identifier] `a`
[1498:1499:  separator] `.`
[1499:1503: identifier] `data`
[1503:1504:  separator] `.`
[1504:1507: identifier] `get`
[1507:1508:  separator] `(`
[1508:1513: identifier] `index`
[1513:1514:  separator] `)`
[1514:1515:  separator] `;`
[1516:1517:  separator] `}`
[1519:1522: identifier] `pub`
[1523:1527: identifier] `func`
[1528:1529:  separator] `(`
[1529:1530: identifier] `a`
[1530:1531:   operator] `:`
[1532:1533:   operator] `^`
[1533:1539: identifier] `String`
[1539:1540:  separator] `)`
[1541:1547: identifier] `length`
[1547:1548:  separator] `(`
[1548:1549:  separator] `)`
[1550:1552:   operator] `->`
[1553:1557: identifier] `uint`
[1558:1559:  separator] `{`
[1561:1567: identifier] `return`
[1568:1569: identifier] `a`
[1569:1570:  separator] `.`
[1570:1574: identifier] `data`
[1574:1575:  separator] `.`
[1575:1584: identifier] `getLength`
[1584:1585:  separator] `(`
[1585:1586:  separator] `)`
[1586:1587:  separator] `;`
[1588:1589:  separator] `}`
[1591:1594: identifier] `pub`
[1595:1599: identifier] `func`
[1600:1601:  separator] `(`
[1601:1602: identifier] `a`
[1602:1603:   operator] `:`
[1604:1605:   operator] `^`
[1605:1611: identifier] `String`
[1611:1612:  separator] `)`
[1613:1620: identifier] `destroy`
[1620:1621:  separator] `(`
[1621:1622:  separator] `)`
[1623:1624:  separator] `{`
[1626:1627: identifier] `a`
[1627:1628:  separator] `.`
[1628:1632: identifier] `data`
[1632:1633:  separator] `.`
[1633:1640: identifier] `destroy`
[1640:1641:  separator] `(`
[1641:1642:  separator] `)`
[1642:1643:  separator] `;`
[1645:1648: identifier] `mem`
[1648:1650:   operator] `::`
[1650:1654: identifier] `free`
[1654:1655:  separator] `(`
[1655:1656: identifier] `a`
[1656:1657:  separator] `)`
[1657:1658:  separator] `;`
[1659:1660:  separator] `}`
 [32mEnded lexing[00m string (2.62ms)
 [32mStarted parsing[00m string
 [32mEnded parsing[00m string (1.27ms)
 [32mStarted lexing[00m util
[   0:   3: identifier] `pub`
[   4:   8: identifier] `func`
[   9:  17: identifier] `contains`
[  17:  18:  separator] `(`
[  18:  26: identifier] `haystack`
[  26:  27:   operator] `:`
[  28:  34: identifier] `string`
[  34:  35:  separator] `,`
[  36:  42: identifier] `needle`
[  42:  43:   operator] `:`
[  44:  50: identifier] `string`
[  50:  51:  separator] `)`
[  52:  54:   operator] `->`
[  55:  59: identifier] `bool`
[  60:  61:  separator] `{`
[  63:  65: identifier] `if`
[  66:  69: identifier] `len`
[  69:  70:  separator] `(`
[  70:  78: identifier] `haystack`
[  78:  79:  separator] `)`
[  80:  81:   operator] `<`
[  82:  85: identifier] `len`
[  85:  86:  separator] `(`
[  86:  92: identifier] `needle`
[  92:  93:  separator] `)`
[  94:  95:  separator] `{`
[  98: 104: identifier] `return`
[ 105: 110: identifier] `false`
[ 110: 111:  separator] `;`
[ 113: 114:  separator] `}`
[ 118: 121: identifier] `mut`
[ 122: 125: identifier] `idx`
[ 126: 127:   operator] `:`
[ 127: 128:   operator] `=`
[ 129: 133: identifier] `uint`
[ 133: 134:  separator] `(`
[ 134: 135:     number] `0`
[ 135: 136:  separator] `)`
[ 136: 137:  separator] `;`
[ 139: 142: identifier] `mut`
[ 143: 148: identifier] `count`
[ 149: 150:   operator] `:`
[ 150: 151:   operator] `=`
[ 152: 156: identifier] `uint`
[ 156: 157:  separator] `(`
[ 157: 158:     number] `0`
[ 158: 159:  separator] `)`
[ 159: 160:  separator] `;`
[ 162: 165: identifier] `for`
[ 166: 169: identifier] `idx`
[ 170: 171:   operator] `<`
[ 172: 175: identifier] `len`
[ 175: 176:  separator] `(`
[ 176: 184: identifier] `haystack`
[ 184: 185:  separator] `)`
[ 186: 187:  separator] `{`
[ 190: 192: identifier] `if`
[ 193: 201: identifier] `haystack`
[ 201: 202:  separator] `[`
[ 202: 205: identifier] `idx`
[ 205: 206:  separator] `]`
[ 207: 209:   operator] `==`
[ 210: 216: identifier] `needle`
[ 216: 217:  separator] `[`
[ 217: 222: identifier] `count`
[ 222: 223:  separator] `]`
[ 224: 225:  separator] `{`
[ 229: 234: identifier] `count`
[ 235: 236:   operator] `+`
[ 236: 237:   operator] `=`
[ 238: 239:     number] `1`
[ 239: 240:  separator] `;`
[ 243: 244:  separator] `}`
[ 245: 249: identifier] `else`
[ 250: 251:  separator] `{`
[ 255: 260: identifier] `count`
[ 261: 262:   operator] `=`
[ 263: 264:     number] `0`
[ 264: 265:  separator] `;`
[ 268: 269:  separator] `}`
[ 273: 275: identifier] `if`
[ 276: 281: identifier] `count`
[ 282: 284:   operator] `==`
[ 285: 288: identifier] `len`
[ 288: 289:  separator] `(`
[ 289: 295: identifier] `needle`
[ 295: 296:  separator] `)`
[ 297: 298:  separator] `{`
[ 302: 308: identifier] `return`
[ 309: 313: identifier] `true`
[ 313: 314:  separator] `;`
[ 317: 318:  separator] `}`
[ 322: 325: identifier] `idx`
[ 326: 327:   operator] `+`
[ 327: 328:   operator] `=`
[ 329: 330:     number] `1`
[ 330: 331:  separator] `;`
[ 333: 334:  separator] `}`
[ 337: 343: identifier] `return`
[ 344: 349: identifier] `false`
[ 349: 350:  separator] `;`
[ 351: 352:  separator] `}`
[ 354: 357: identifier] `pub`
[ 358: 362: identifier] `func`
[ 363: 372: identifier] `hasPrefix`
[ 372: 373:  separator] `(`
[ 373: 379: identifier] `source`
[ 379: 380:   operator] `:`
[ 381: 387: identifier] `string`
[ 387: 388:  separator] `,`
[ 389: 395: identifier] `prefix`
[ 395: 396:   operator] `:`
[ 397: 403: identifier] `string`
[ 403: 404:  separator] `)`
[ 405: 407:   operator] `->`
[ 408: 412: identifier] `bool`
[ 413: 414:  separator] `{`
[ 416: 418: identifier] `if`
[ 419: 422: identifier] `len`
[ 422: 423:  separator] `(`
[ 423: 429: identifier] `prefix`
[ 429: 430:  separator] `)`
[ 431: 432:   operator] `>`
[ 433: 436: identifier] `len`
[ 436: 437:  separator] `(`
[ 437: 443: identifier] `source`
[ 443: 444:  separator] `)`
[ 445: 446:  separator] `{`
[ 449: 455: identifier] `return`
[ 456: 461: identifier] `false`
[ 461: 462:  separator] `;`
[ 464: 465:  separator] `}`
[ 467: 470: identifier] `mut`
[ 471: 474: identifier] `idx`
[ 475: 476:   operator] `:`
[ 476: 477:   operator] `=`
[ 478: 482: identifier] `uint`
[ 482: 483:  separator] `(`
[ 483: 484:     number] `0`
[ 484: 485:  separator] `)`
[ 485: 486:  separator] `;`
[ 488: 491: identifier] `for`
[ 492: 495: identifier] `idx`
[ 496: 497:   operator] `<`
[ 498: 501: identifier] `len`
[ 501: 502:  separator] `(`
[ 502: 508: identifier] `prefix`
[ 508: 509:  separator] `)`
[ 510: 511:  separator] `{`
[ 514: 516: identifier] `if`
[ 517: 523: identifier] `source`
[ 523: 524:  separator] `[`
[ 524: 527: identifier] `idx`
[ 527: 528:  separator] `]`
[ 529: 531:   operator] `!=`
[ 532: 538: identifier] `prefix`
[ 538: 539:  separator] `[`
[ 539: 542: identifier] `idx`
[ 542: 543:  separator] `]`
[ 544: 545:  separator] `{`
[ 549: 555: identifier] `return`
[ 556: 561: identifier] `false`
[ 561: 562:  separator] `;`
[ 565: 566:  separator] `}`
[ 569: 572: identifier] `idx`
[ 573: 574:   operator] `+`
[ 574: 575:   operator] `=`
[ 576: 577:     number] `1`
[ 577: 578:  separator] `;`
[ 580: 581:  separator] `}`
[ 583: 589: identifier] `return`
[ 590: 594: identifier] `true`
[ 594: 595:  separator] `;`
[ 596: 597:  separator] `}`
[ 599: 602: identifier] `pub`
[ 603: 607: identifier] `func`
[ 608: 617: identifier] `hasSuffix`
[ 617: 618:  separator] `(`
[ 618: 624: identifier] `source`
[ 624: 625:   operator] `:`
[ 626: 632: identifier] `string`
[ 632: 633:  separator] `,`
[ 634: 640: identifier] `suffix`
[ 640: 641:   operator] `:`
[ 642: 648: identifier] `string`
[ 648: 649:  separator] `)`
[ 650: 652:   operator] `->`
[ 653: 657: identifier] `bool`
[ 658: 659:  separator] `{`
[ 663: 665: identifier] `if`
[ 666: 669: identifier] `len`
[ 669: 670:  separator] `(`
[ 670: 676: identifier] `suffix`
[ 676: 677:  separator] `)`
[ 678: 679:   operator] `>`
[ 680: 683: identifier] `len`
[ 683: 684:  separator] `(`
[ 684: 690: identifier] `source`
[ 690: 691:  separator] `)`
[ 692: 693:  separator] `{`
[ 696: 702: identifier] `return`
[ 703: 708: identifier] `false`
[ 708: 709:  separator] `;`
[ 711: 712:  separator] `}`
[ 715: 718: identifier] `mut`
[ 719: 722: identifier] `idx`
[ 723: 724:   operator] `:`
[ 724: 725:   operator] `=`
[ 726: 729: identifier] `len`
[ 729: 730:  separator] `(`
[ 730: 736: identifier] `source`
[ 736: 737:  separator] `)`
[ 738: 739:   operator] `-`
[ 740: 743: identifier] `len`
[ 743: 744:  separator] `(`
[ 744: 750: identifier] `suffix`
[ 750: 751:  separator] `)`
[ 751: 752:  separator] `;`
[ 811: 814: identifier] `for`
[ 815: 818: identifier] `idx`
[ 819: 820:   operator] `<`
[ 821: 824: identifier] `len`
[ 824: 825:  separator] `(`
[ 825: 831: identifier] `suffix`
[ 831: 832:  separator] `)`
[ 833: 834:   operator] `-`
[ 835: 838: identifier] `idx`
[ 839: 840:  separator] `{`
[ 843: 845: identifier] `if`
[ 846: 852: identifier] `source`
[ 852: 853:  separator] `[`
[ 853: 856: identifier] `idx`
[ 856: 857:  separator] `]`
[ 858: 860:   operator] `!=`
[ 861: 867: identifier] `suffix`
[ 867: 868:  separator] `[`
[ 868: 871: identifier] `idx`
[ 871: 872:  separator] `]`
[ 873: 874:  separator] `{`
[ 878: 884: identifier] `return`
[ 885: 890: identifier] `false`
[ 890: 891:  separator] `;`
[ 894: 895:  separator] `}`
[ 898: 901: identifier] `idx`
[ 902: 903:   operator] `+`
[ 903: 904:   operator] `=`
[ 905: 906:     number] `1`
[ 906: 907:  separator] `;`
[ 909: 910:  separator] `}`
[ 912: 918: identifier] `return`
[ 919: 923: identifier] `true`
[ 923: 924:  separator] `;`
[ 925: 926:  separator] `}`
[ 928: 931: identifier] `pub`
[ 932: 936: identifier] `func`
[ 937: 944: identifier] `compare`
[ 944: 945:  separator] `(`
[ 945: 946: identifier] `a`
[ 946: 947:   operator] `:`
[ 948: 954: identifier] `string`
[ 954: 955:  separator] `,`
[ 956: 957: identifier] `b`
[ 957: 958:   operator] `:`
[ 959: 965: identifier] `string`
[ 965: 966:  separator] `)`
[ 967: 969:   operator] `->`
[ 970: 974: identifier] `bool`
[ 975: 976:  separator] `{`
[ 978: 980: identifier] `if`
[ 981: 984: identifier] `len`
[ 984: 985:  separator] `(`
[ 985: 986: identifier] `a`
[ 986: 987:  separator] `)`
[ 988: 990:   operator] `!=`
[ 991: 994: identifier] `len`
[ 994: 995:  separator] `(`
[ 995: 996: identifier] `b`
[ 996: 997:  separator] `)`
[ 998: 999:  separator] `{`
[1002:1008: identifier] `return`
[1009:1014: identifier] `false`
[1014:1015:  separator] `;`
[1017:1018:  separator] `}`
[1021:1024: identifier] `mut`
[1025:1026: identifier] `i`
[1027:1028:   operator] `:`
[1028:1029:   operator] `=`
[1030:1034: identifier] `uint`
[1034:1035:  separator] `(`
[1035:1036:     number] `0`
[1036:1037:  separator] `)`
[1037:1038:  separator] `;`
[1040:1043: identifier] `for`
[1044:1045: identifier] `i`
[1046:1047:   operator] `<`
[1048:1051: identifier] `len`
[1051:1052:  separator] `(`
[1052:1053: identifier] `a`
[1053:1054:  separator] `)`
[1055:1056:  separator] `{`
[1059:1061: identifier] `if`
[1062:1063: identifier] `a`
[1063:1064:  separator] `[`
[1064:1065: identifier] `i`
[1065:1066:  separator] `]`
[1067:1069:   operator] `!=`
[1070:1071: identifier] `b`
[1071:1072:  separator] `[`
[1072:1073: identifier] `i`
[1073:1074:  separator] `]`
[1075:1076:  separator] `{`
[1080:1086: identifier] `return`
[1087:1092: identifier] `false`
[1092:1093:  separator] `;`
[1096:1097:  separator] `}`
[1099:1100:  separator] `}`
[1103:1109: identifier] `return`
[1110:1114: identifier] `true`
[1114:1115:  separator] `;`
[1116:1117:  separator] `}`
 [32mEnded lexing[00m util (1.77ms)
 [32mStarted parsing[00m util
 [32mEnded parsing[00m util (1.38ms)
 [32mStarted lexing[00m mem
[  59:  62: identifier] `pub`
[  63:  67: identifier] `func`
[  68:  73: identifier] `alloc`
[  73:  74:   operator] `<`
[  74:  75: identifier] `T`
[  75:  76:   operator] `>`
[  76:  77:  separator] `(`
[  77:  78:  separator] `)`
[  79:  81:   operator] `->`
[  82:  83:   operator] `^`
[  83:  86: identifier] `mut`
[  87:  88: identifier] `T`
[  89:  90:  separator] `{`
[  95: 101: identifier] `return`
[ 102: 103:  separator] `(`
[ 103: 104:   operator] `^`
[ 104: 107: identifier] `mut`
[ 108: 109: identifier] `T`
[ 109: 110:  separator] `)`
[ 110: 111:  separator] `(`
[ 111: 119: identifier] `rawAlloc`
[ 119: 120:  separator] `(`
[ 120: 126: identifier] `sizeof`
[ 126: 127:  separator] `(`
[ 127: 128: identifier] `T`
[ 128: 129:  separator] `)`
[ 129: 130:  separator] `)`
[ 130: 131:  separator] `)`
[ 131: 132:  separator] `;`
[ 133: 134:  separator] `}`
[ 180: 184: identifier] `type`
[ 185: 193: identifier] `RawArray`
[ 194: 200: identifier] `struct`
[ 201: 202:  separator] `{`
[ 207: 211: identifier] `size`
[ 211: 212:   operator] `:`
[ 213: 217: identifier] `uint`
[ 217: 218:  separator] `,`
[ 223: 226: identifier] `ptr`
[ 226: 227:   operator] `:`
[ 228: 229:   operator] `^`
[ 229: 231: identifier] `u8`
[ 231: 232:  separator] `,`
[ 233: 234:  separator] `}`
[ 234: 235:  separator] `;`
[ 237: 240: identifier] `pub`
[ 241: 245: identifier] `func`
[ 246: 256: identifier] `allocArray`
[ 256: 257:   operator] `<`
[ 257: 258: identifier] `T`
[ 258: 259:   operator] `>`
[ 259: 260:  separator] `(`
[ 260: 263: identifier] `num`
[ 263: 264:   operator] `:`
[ 265: 269: identifier] `uint`
[ 269: 270:  separator] `)`
[ 271: 273:   operator] `->`
[ 274: 275:  separator] `[`
[ 275: 276:  separator] `]`
[ 276: 277: identifier] `T`
[ 278: 279:  separator] `{`
[ 284: 290: identifier] `rawPtr`
[ 291: 292:   operator] `:`
[ 292: 293:   operator] `=`
[ 294: 295:  separator] `(`
[ 295: 296:   operator] `^`
[ 296: 298: identifier] `u8`
[ 298: 299:  separator] `)`
[ 299: 300:  separator] `(`
[ 300: 308: identifier] `rawAlloc`
[ 308: 309:  separator] `(`
[ 309: 315: identifier] `sizeof`
[ 315: 316:  separator] `(`
[ 316: 317: identifier] `T`
[ 317: 318:  separator] `)`
[ 319: 320:   operator] `*`
[ 321: 324: identifier] `num`
[ 324: 325:  separator] `)`
[ 325: 326:  separator] `)`
[ 326: 327:  separator] `;`
[ 333: 341: identifier] `rawArray`
[ 342: 343:   operator] `:`
[ 343: 344:   operator] `=`
[ 345: 353: identifier] `RawArray`
[ 353: 354:  separator] `{`
[ 363: 367: identifier] `size`
[ 367: 368:   operator] `:`
[ 369: 372: identifier] `num`
[ 372: 373:  separator] `,`
[ 382: 385: identifier] `ptr`
[ 385: 386:   operator] `:`
[ 387: 393: identifier] `rawPtr`
[ 393: 394:  separator] `,`
[ 399: 400:  separator] `}`
[ 400: 401:  separator] `;`
[ 407: 413: identifier] `arrPtr`
[ 414: 415:   operator] `:`
[ 415: 416:   operator] `=`
[ 417: 418:  separator] `(`
[ 418: 419:   operator] `^`
[ 419: 420:  separator] `[`
[ 420: 421:  separator] `]`
[ 421: 422: identifier] `T`
[ 422: 423:  separator] `)`
[ 423: 424:  separator] `(`
[ 424: 431: identifier] `uintptr`
[ 431: 432:  separator] `(`
[ 432: 433:   operator] `^`
[ 433: 441: identifier] `rawArray`
[ 441: 442:  separator] `)`
[ 442: 443:  separator] `)`
[ 443: 444:  separator] `;`
[ 450: 456: identifier] `return`
[ 457: 458:   operator] `@`
[ 458: 464: identifier] `arrPtr`
[ 464: 465:  separator] `;`
[ 466: 467:  separator] `}`
[ 469: 472: identifier] `pub`
[ 473: 477: identifier] `func`
[ 478: 487: identifier] `copyArray`
[ 487: 488:   operator] `<`
[ 488: 489: identifier] `T`
[ 489: 490:   operator] `>`
[ 490: 491:  separator] `(`
[ 491: 494: identifier] `mut`
[ 495: 499: identifier] `dest`
[ 499: 500:   operator] `:`
[ 501: 502:  separator] `[`
[ 502: 503:  separator] `]`
[ 503: 504: identifier] `T`
[ 504: 505:  separator] `,`
[ 506: 509: identifier] `src`
[ 509: 510:   operator] `:`
[ 511: 512:  separator] `[`
[ 512: 513:  separator] `]`
[ 513: 514: identifier] `T`
[ 514: 515:  separator] `,`
[ 516: 519: identifier] `num`
[ 519: 520:   operator] `:`
[ 521: 525: identifier] `uint`
[ 525: 526:  separator] `)`
[ 527: 528:  separator] `{`
[ 533: 536: identifier] `mut`
[ 537: 540: identifier] `max`
[ 541: 542:   operator] `:`
[ 542: 543:   operator] `=`
[ 544: 547: identifier] `num`
[ 547: 548:  separator] `;`
[ 553: 555: identifier] `if`
[ 556: 559: identifier] `max`
[ 560: 561:   operator] `>`
[ 562: 565: identifier] `len`
[ 565: 566:  separator] `(`
[ 566: 570: identifier] `dest`
[ 570: 571:  separator] `)`
[ 572: 573:  separator] `{`
[ 582: 585: identifier] `max`
[ 586: 587:   operator] `=`
[ 588: 591: identifier] `len`
[ 591: 592:  separator] `(`
[ 592: 596: identifier] `dest`
[ 596: 597:  separator] `)`
[ 597: 598:  separator] `;`
[ 603: 604:  separator] `}`
[ 609: 611: identifier] `if`
[ 612: 615: identifier] `max`
[ 616: 617:   operator] `>`
[ 618: 621: identifier] `len`
[ 621: 622:  separator] `(`
[ 622: 625: identifier] `src`
[ 625: 626:  separator] `)`
[ 627: 628:  separator] `{`
[ 637: 640: identifier] `max`
[ 641: 642:   operator] `=`
[ 643: 646: identifier] `len`
[ 646: 647:  separator] `(`
[ 647: 650: identifier] `src`
[ 650: 651:  separator] `)`
[ 651: 652:  separator] `;`
[ 657: 658:  separator] `}`
[ 664: 667: identifier] `mut`
[ 668: 669: identifier] `i`
[ 669: 670:   operator] `:`
[ 671: 675: identifier] `uint`
[ 676: 677:   operator] `=`
[ 678: 679:     number] `0`
[ 679: 680:  separator] `;`
[ 685: 688: identifier] `for`
[ 689: 690: identifier] `i`
[ 691: 692:   operator] `<`
[ 693: 696: identifier] `max`
[ 697: 698:  separator] `{`
[ 707: 711: identifier] `dest`
[ 711: 712:  separator] `[`
[ 712: 713: identifier] `i`
[ 713: 714:  separator] `]`
[ 715: 716:   operator] `=`
[ 717: 720: identifier] `src`
[ 720: 721:  separator] `[`
[ 721: 722: identifier] `i`
[ 722: 723:  separator] `]`
[ 723: 724:  separator] `;`
[ 733: 734: identifier] `i`
[ 735: 736:   operator] `+`
[ 736: 737:   operator] `=`
[ 738: 739:     number] `1`
[ 739: 740:  separator] `;`
[ 745: 746:  separator] `}`
[ 747: 748:  separator] `}`
[ 750: 753: identifier] `pub`
[ 754: 758: identifier] `func`
[ 759: 763: identifier] `free`
[ 763: 764:   operator] `<`
[ 764: 765: identifier] `T`
[ 765: 766:   operator] `>`
[ 766: 767:  separator] `(`
[ 767: 770: identifier] `ptr`
[ 770: 771:   operator] `:`
[ 772: 773:   operator] `^`
[ 773: 774: identifier] `T`
[ 774: 775:  separator] `)`
[ 776: 777:  separator] `{`
[ 782: 789: identifier] `rawFree`
[ 789: 790:  separator] `(`
[ 790: 797: identifier] `uintptr`
[ 797: 798:  separator] `(`
[ 798: 801: identifier] `ptr`
[ 801: 802:  separator] `)`
[ 802: 803:  separator] `)`
[ 803: 804:  separator] `;`
[ 805: 806:  separator] `}`
[ 808: 811: identifier] `pub`
[ 812: 816: identifier] `func`
[ 817: 826: identifier] `freeArray`
[ 826: 827:   operator] `<`
[ 827: 828: identifier] `T`
[ 828: 829:   operator] `>`
[ 829: 830:  separator] `(`
[ 830: 835: identifier] `array`
[ 835: 836:   operator] `:`
[ 837: 838:  separator] `[`
[ 838: 839:  separator] `]`
[ 839: 840: identifier] `T`
[ 840: 841:  separator] `)`
[ 842: 843:  separator] `{`
[ 848: 851: identifier] `mut`
[ 852: 860: identifier] `rawArray`
[ 861: 862:   operator] `:`
[ 862: 863:   operator] `=`
[ 864: 865:   operator] `@`
[ 865: 866:  separator] `(`
[ 866: 867:  separator] `(`
[ 867: 868:   operator] `^`
[ 868: 876: identifier] `RawArray`
[ 876: 877:  separator] `)`
[ 877: 878:  separator] `(`
[ 878: 885: identifier] `uintptr`
[ 885: 886:  separator] `(`
[ 886: 887:   operator] `&`
[ 887: 892: identifier] `array`
[ 892: 893:  separator] `)`
[ 893: 894:  separator] `)`
[ 894: 895:  separator] `)`
[ 895: 896:  separator] `;`
[ 901: 908: identifier] `rawFree`
[ 908: 909:  separator] `(`
[ 909: 916: identifier] `uintptr`
[ 916: 917:  separator] `(`
[ 917: 925: identifier] `rawArray`
[ 925: 926:  separator] `.`
[ 926: 929: identifier] `ptr`
[ 929: 930:  separator] `)`
[ 930: 931:  separator] `)`
[ 931: 932:  separator] `;`
[ 933: 934:  separator] `}`
 [32mEnded lexing[00m mem (1.54ms)
 [32mStarted parsing[00m mem
 [32mEnded parsing[00m mem (0.81ms)
 [32mStarted lexing[00m raw
[   0:   1:  separator] `[`
[   1:   2: identifier] `c`
[   2:   3:  separator] `]`
[   4:   8: identifier] `func`
[   9:  15: identifier] `malloc`
[  15:  16:  separator] `(`
[  16:  20: identifier] `size`
[  20:  21:   operator] `:`
[  22:  26: identifier] `uint`
[  26:  27:  separator] `)`
[  28:  30:   operator] `->`
[  31:  32:   operator] `^`
[  32:  33: identifier] `C`
[  33:  35:   operator] `::`
[  35:  39: identifier] `void`
[  39:  40:  separator] `;`
[  41:  42:  separator] `[`
[  42:  43: identifier] `c`
[  43:  44:  separator] `]`
[  45:  49: identifier] `func`
[  50:  54: identifier] `free`
[  54:  55:  separator] `(`
[  55:  58: identifier] `ptr`
[  58:  59:   operator] `:`
[  60:  61:   operator] `^`
[  61:  62: identifier] `C`
[  62:  64:   operator] `::`
[  64:  68: identifier] `void`
[  68:  69:  separator] `)`
[  69:  70:  separator] `;`
[  72:  75: identifier] `pub`
[  76:  80: identifier] `func`
[  81:  89: identifier] `rawAlloc`
[  89:  90:  separator] `(`
[  90:  95: identifier] `bytes`
[  95:  96:   operator] `:`
[  97: 101: identifier] `uint`
[ 101: 102:  separator] `)`
[ 103: 105:   operator] `->`
[ 106: 113: identifier] `uintptr`
[ 114: 115:  separator] `{`
[ 120: 126: identifier] `return`
[ 127: 134: identifier] `uintptr`
[ 134: 135:  separator] `(`
[ 135: 136: identifier] `C`
[ 136: 138:   operator] `::`
[ 138: 144: identifier] `malloc`
[ 144: 145:  separator] `(`
[ 145: 150: identifier] `bytes`
[ 150: 151:  separator] `)`
[ 151: 152:  separator] `)`
[ 152: 153:  separator] `;`
[ 154: 155:  separator] `}`
[ 157: 160: identifier] `pub`
[ 161: 165: identifier] `func`
[ 166: 173: identifier] `rawFree`
[ 173: 174:  separator] `(`
[ 174: 177: identifier] `ptr`
[ 177: 178:   operator] `:`
[ 179: 186: identifier] `uintptr`
[ 186: 187:  separator] `)`
[ 188: 189:  separator] `{`
[ 194: 195: identifier] `C`
[ 195: 197:   operator] `::`
[ 197: 201: identifier] `free`
[ 201: 202:  separator] `(`
[ 202: 203:  separator] `(`
[ 203: 204:   operator] `^`
[ 204: 205: identifier] `C`
[ 205: 207:   operator] `::`
[ 207: 211: identifier] `void`
[ 211: 212:  separator] `)`
[ 212: 213:  separator] `(`
[ 213: 216: identifier] `ptr`
[ 216: 217:  separator] `)`
[ 217: 218:  separator] `)`
[ 218: 219:  separator] `;`
[ 220: 221:  separator] `}`
 [32mEnded lexing[00m raw (0.75ms)
 [32mStarted parsing[00m raw
 [32mEnded parsing[00m raw (0.26ms)
 [32mStarted lexing[00m coding
[   0:  14: identifier] `TRAILING_BYTES`
[  15:  16:   operator] `:`
[  16:  17:   operator] `=`
[  18:  19:  separator] `[`
[  19:  20:  separator] `]`
[  20:  22: identifier] `u8`
[  22:  23:  separator] `{`
[  25:  26:     number] `0`
[  26:  27:  separator] `,`
[  27:  28:     number] `0`
[  28:  29:  separator] `,`
[  29:  30:     number] `0`
[  30:  31:  separator] `,`
[  31:  32:     number] `0`
[  32:  33:  separator] `,`
[  33:  34:     number] `0`
[  34:  35:  separator] `,`
[  35:  36:     number] `0`
[  36:  37:  separator] `,`
[  37:  38:     number] `0`
[  38:  39:  separator] `,`
[  39:  40:     number] `0`
[  40:  41:  separator] `,`
[  41:  42:     number] `0`
[  42:  43:  separator] `,`
[  43:  44:     number] `0`
[  44:  45:  separator] `,`
[  45:  46:     number] `0`
[  46:  47:  separator] `,`
[  47:  48:     number] `0`
[  48:  49:  separator] `,`
[  49:  50:     number] `0`
[  50:  51:  separator] `,`
[  51:  52:     number] `0`
[  52:  53:  separator] `,`
[  53:  54:     number] `0`
[  54:  55:  separator] `,`
[  55:  56:     number] `0`
[  56:  57:  separator] `,`
[  58:  59:     number] `0`
[  59:  60:  separator] `,`
[  60:  61:     number] `0`
[  61:  62:  separator] `,`
[  62:  63:     number] `0`
[  63:  64:  separator] `,`
[  64:  65:     number] `0`
[  65:  66:  separator] `,`
[  66:  67:     number] `0`
[  67:  68:  separator] `,`
[  68:  69:     number] `0`
[  69:  70:  separator] `,`
[  70:  71:     number] `0`
[  71:  72:  separator] `,`
[  72:  73:     number] `0`
[  73:  74:  separator] `,`
[  74:  75:     number] `0`
[  75:  76:  separator] `,`
[  76:  77:     number] `0`
[  77:  78:  separator] `,`
[  78:  79:     number] `0`
[  79:  80:  separator] `,`
[  80:  81:     number] `0`
[  81:  82:  separator] `,`
[  82:  83:     number] `0`
[  83:  84:  separator] `,`
[  84:  85:     number] `0`
[  85:  86:  separator] `,`
[  86:  87:     number] `0`
[  87:  88:  separator] `,`
[  88:  89:     number] `0`
[  89:  90:  separator] `,`
[  95:  96:     number] `0`
[  96:  97:  separator] `,`
[  97:  98:     number] `0`
[  98:  99:  separator] `,`
[  99: 100:     number] `0`
[ 100: 101:  separator] `,`
[ 101: 102:     number] `0`
[ 102: 103:  separator] `,`
[ 103: 104:     number] `0`
[ 104: 105:  separator] `,`
[ 105: 106:     number] `0`
[ 106: 107:  separator] `,`
[ 107: 108:     number] `0`
[ 108: 109:  separator] `,`
[ 109: 110:     number] `0`
[ 110: 111:  separator] `,`
[ 111: 112:     number] `0`
[ 112: 113:  separator] `,`
[ 113: 114:     number] `0`
[ 114: 115:  separator] `,`
[ 115: 116:     number] `0`
[ 116: 117:  separator] `,`
[ 117: 118:     number] `0`
[ 118: 119:  separator] `,`
[ 119: 120:     number] `0`
[ 120: 121:  separator] `,`
[ 121: 122:     number] `0`
[ 122: 123:  separator] `,`
[ 123: 124:     number] `0`
[ 124: 125:  separator] `,`
[ 125: 126:     number] `0`
[ 126: 127:  separator] `,`
[ 128: 129:     number] `0`
[ 129: 130:  separator] `,`
[ 130: 131:     number] `0`
[ 131: 132:  separator] `,`
[ 132: 133:     number] `0`
[ 133: 134:  separator] `,`
[ 134: 135:     number] `0`
[ 135: 136:  separator] `,`
[ 136: 137:     number] `0`
[ 137: 138:  separator] `,`
[ 138: 139:     number] `0`
[ 139: 140:  separator] `,`
[ 140: 141:     number] `0`
[ 141: 142:  separator] `,`
[ 142: 143:     number] `0`
[ 143: 144:  separator] `,`
[ 144: 145:     number] `0`
[ 145: 146:  separator] `,`
[ 146: 147:     number] `0`
[ 147: 148:  separator] `,`
[ 148: 149:     number] `0`
[ 149: 150:  separator] `,`
[ 150: 151:     number] `0`
[ 151: 152:  separator] `,`
[ 152: 153:     number] `0`
[ 153: 154:  separator] `,`
[ 154: 155:     number] `0`
[ 155: 156:  separator] `,`
[ 156: 157:     number] `0`
[ 157: 158:  separator] `,`
[ 158: 159:     number] `0`
[ 159: 160:  separator] `,`
[ 165: 166:     number] `0`
[ 166: 167:  separator] `,`
[ 167: 168:     number] `0`
[ 168: 169:  separator] `,`
[ 169: 170:     number] `0`
[ 170: 171:  separator] `,`
[ 171: 172:     number] `0`
[ 172: 173:  separator] `,`
[ 173: 174:     number] `0`
[ 174: 175:  separator] `,`
[ 175: 176:     number] `0`
[ 176: 177:  separator] `,`
[ 177: 178:     number] `0`
[ 178: 179:  separator] `,`
[ 179: 180:     number] `0`
[ 180: 181:  separator] `,`
[ 181: 182:     number] `0`
[ 182: 183:  separator] `,`
[ 183: 184:     number] `0`
[ 184: 185:  separator] `,`
[ 185: 186:     number] `0`
[ 186: 187:  separator] `,`
[ 187: 188:     number] `0`
[ 188: 189:  separator] `,`
[ 189: 190:     number] `0`
[ 190: 191:  separator] `,`
[ 191: 192:     number] `0`
[ 192: 193:  separator] `,`
[ 193: 194:     number] `0`
[ 194: 195:  separator] `,`
[ 195: 196:     number] `0`
[ 196: 197:  separator] `,`
[ 198: 199:     number] `0`
[ 199: 200:  separator] `,`
[ 200: 201:     number] `0`
[ 201: 202:  separator] `,`
[ 202: 203:     number] `0`
[ 203: 204:  separator] `,`
[ 204: 205:     number] `0`
[ 205: 206:  separator] `,`
[ 206: 207:     number] `0`
[ 207: 208:  separator] `,`
[ 208: 209:     number] `0`
[ 209: 210:  separator] `,`
[ 210: 211:     number] `0`
[ 211: 212:  separator] `,`
[ 212: 213:     number] `0`
[ 213: 214:  separator] `,`
[ 214: 215:     number] `0`
[ 215: 216:  separator] `,`
[ 216: 217:     number] `0`
[ 217: 218:  separator] `,`
[ 218: 219:     number] `0`
[ 219: 220:  separator] `,`
[ 220: 221:     number] `0`
[ 221: 222:  separator] `,`
[ 222: 223:     number] `0`
[ 223: 224:  separator] `,`
[ 224: 225:     number] `0`
[ 225: 226:  separator] `,`
[ 226: 227:     number] `0`
[ 227: 228:  separator] `,`
[ 228: 229:     number] `0`
[ 229: 230:  separator] `,`
[ 235: 236:     number] `0`
[ 236: 237:  separator] `,`
[ 237: 238:     number] `0`
[ 238: 239:  separator] `,`
[ 239: 240:     number] `0`
[ 240: 241:  separator] `,`
[ 241: 242:     number] `0`
[ 242: 243:  separator] `,`
[ 243: 244:     number] `0`
[ 244: 245:  separator] `,`
[ 245: 246:     number] `0`
[ 246: 247:  separator] `,`
[ 247: 248:     number] `0`
[ 248: 249:  separator] `,`
[ 249: 250:     number] `0`
[ 250: 251:  separator] `,`
[ 251: 252:     number] `0`
[ 252: 253:  separator] `,`
[ 253: 254:     number] `0`
[ 254: 255:  separator] `,`
[ 255: 256:     number] `0`
[ 256: 257:  separator] `,`
[ 257: 258:     number] `0`
[ 258: 259:  separator] `,`
[ 259: 260:     number] `0`
[ 260: 261:  separator] `,`
[ 261: 262:     number] `0`
[ 262: 263:  separator] `,`
[ 263: 264:     number] `0`
[ 264: 265:  separator] `,`
[ 265: 266:     number] `0`
[ 266: 267:  separator] `,`
[ 268: 269:     number] `0`
[ 269: 270:  separator] `,`
[ 270: 271:     number] `0`
[ 271: 272:  separator] `,`
[ 272: 273:     number] `0`
[ 273: 274:  separator] `,`
[ 274: 275:     number] `0`
[ 275: 276:  separator] `,`
[ 276: 277:     number] `0`
[ 277: 278:  separator] `,`
[ 278: 279:     number] `0`
[ 279: 280:  separator] `,`
[ 280: 281:     number] `0`
[ 281: 282:  separator] `,`
[ 282: 283:     number] `0`
[ 283: 284:  separator] `,`
[ 284: 285:     number] `0`
[ 285: 286:  separator] `,`
[ 286: 287:     number] `0`
[ 287: 288:  separator] `,`
[ 288: 289:     number] `0`
[ 289: 290:  separator] `,`
[ 290: 291:     number] `0`
[ 291: 292:  separator] `,`
[ 292: 293:     number] `0`
[ 293: 294:  separator] `,`
[ 294: 295:     number] `0`
[ 295: 296:  separator] `,`
[ 296: 297:     number] `0`
[ 297: 298:  separator] `,`
[ 298: 299:     number] `0`
[ 299: 300:  separator] `,`
[ 305: 306:     number] `0`
[ 306: 307:  separator] `,`
[ 307: 308:     number] `0`
[ 308: 309:  separator] `,`
[ 309: 310:     number] `0`
[ 310: 311:  separator] `,`
[ 311: 312:     number] `0`
[ 312: 313:  separator] `,`
[ 313: 314:     number] `0`
[ 314: 315:  separator] `,`
[ 315: 316:     number] `0`
[ 316: 317:  separator] `,`
[ 317: 318:     number] `0`
[ 318: 319:  separator] `,`
[ 319: 320:     number] `0`
[ 320: 321:  separator] `,`
[ 321: 322:     number] `0`
[ 322: 323:  separator] `,`
[ 323: 324:     number] `0`
[ 324: 325:  separator] `,`
[ 325: 326:     number] `0`
[ 326: 327:  separator] `,`
[ 327: 328:     number] `0`
[ 328: 329:  separator] `,`
[ 329: 330:     number] `0`
[ 330: 331:  separator] `,`
[ 331: 332:     number] `0`
[ 332: 333:  separator] `,`
[ 333: 334:     number] `0`
[ 334: 335:  separator] `,`
[ 335: 336:     number] `0`
[ 336: 337:  separator] `,`
[ 338: 339:     number] `0`
[ 339: 340:  separator] `,`
[ 340: 341:     number] `0`
[ 341: 342:  separator] `,`
[ 342: 343:     number] `0`
[ 343: 344:  separator] `,`
[ 344: 345:     number] `0`
[ 345: 346:  separator] `,`
[ 346: 347:     number] `0`
[ 347: 348:  separator] `,`
[ 348: 349:     number] `0`
[ 349: 350:  separator] `,`
[ 350: 351:     number] `0`
[ 351: 352:  separator] `,`
[ 352: 353:     number] `0`
[ 353: 354:  separator] `,`
[ 354: 355:     number] `0`
[ 355: 356:  separator] `,`
[ 356: 357:     number] `0`
[ 357: 358:  separator] `,`
[ 358: 359:     number] `0`
[ 359: 360:  separator] `,`
[ 360: 361:     number] `0`
[ 361: 362:  separator] `,`
[ 362: 363:     number] `0`
[ 363: 364:  separator] `,`
[ 364: 365:     number] `0`
[ 365: 366:  separator] `,`
[ 366: 367:     number] `0`
[ 367: 368:  separator] `,`
[ 368: 369:     number] `0`
[ 369: 370:  separator] `,`
[ 375: 376:     number] `0`
[ 376: 377:  separator] `,`
[ 377: 378:     number] `0`
[ 378: 379:  separator] `,`
[ 379: 380:     number] `0`
[ 380: 381:  separator] `,`
[ 381: 382:     number] `0`
[ 382: 383:  separator] `,`
[ 383: 384:     number] `0`
[ 384: 385:  separator] `,`
[ 385: 386:     number] `0`
[ 386: 387:  separator] `,`
[ 387: 388:     number] `0`
[ 388: 389:  separator] `,`
[ 389: 390:     number] `0`
[ 390: 391:  separator] `,`
[ 391: 392:     number] `0`
[ 392: 393:  separator] `,`
[ 393: 394:     number] `0`
[ 394: 395:  separator] `,`
[ 395: 396:     number] `0`
[ 396: 397:  separator] `,`
[ 397: 398:     number] `0`
[ 398: 399:  separator] `,`
[ 399: 400:     number] `0`
[ 400: 401:  separator] `,`
[ 401: 402:     number] `0`
[ 402: 403:  separator] `,`
[ 403: 404:     number] `0`
[ 404: 405:  separator] `,`
[ 405: 406:     number] `0`
[ 406: 407:  separator] `,`
[ 408: 409:     number] `0`
[ 409: 410:  separator] `,`
[ 410: 411:     number] `0`
[ 411: 412:  separator] `,`
[ 412: 413:     number] `0`
[ 413: 414:  separator] `,`
[ 414: 415:     number] `0`
[ 415: 416:  separator] `,`
[ 416: 417:     number] `0`
[ 417: 418:  separator] `,`
[ 418: 419:     number] `0`
[ 419: 420:  separator] `,`
[ 420: 421:     number] `0`
[ 421: 422:  separator] `,`
[ 422: 423:     number] `0`
[ 423: 424:  separator] `,`
[ 424: 425:     number] `0`
[ 425: 426:  separator] `,`
[ 426: 427:     number] `0`
[ 427: 428:  separator] `,`
[ 428: 429:     number] `0`
[ 429: 430:  separator] `,`
[ 430: 431:     number] `0`
[ 431: 432:  separator] `,`
[ 432: 433:     number] `0`
[ 433: 434:  separator] `,`
[ 434: 435:     number] `0`
[ 435: 436:  separator] `,`
[ 436: 437:     number] `0`
[ 437: 438:  separator] `,`
[ 438: 439:     number] `0`
[ 439: 440:  separator] `,`
[ 445: 446:     number] `1`
[ 446: 447:  separator] `,`
[ 447: 448:     number] `1`
[ 448: 449:  separator] `,`
[ 449: 450:     number] `1`
[ 450: 451:  separator] `,`
[ 451: 452:     number] `1`
[ 452: 453:  separator] `,`
[ 453: 454:     number] `1`
[ 454: 455:  separator] `,`
[ 455: 456:     number] `1`
[ 456: 457:  separator] `,`
[ 457: 458:     number] `1`
[ 458: 459:  separator] `,`
[ 459: 460:     number] `1`
[ 460: 461:  separator] `,`
[ 461: 462:     number] `1`
[ 462: 463:  separator] `,`
[ 463: 464:     number] `1`
[ 464: 465:  separator] `,`
[ 465: 466:     number] `1`
[ 466: 467:  separator] `,`
[ 467: 468:     number] `1`
[ 468: 469:  separator] `,`
[ 469: 470:     number] `1`
[ 470: 471:  separator] `,`
[ 471: 472:     number] `1`
[ 472: 473:  separator] `,`
[ 473: 474:     number] `1`
[ 474: 475:  separator] `,`
[ 475: 476:     number] `1`
[ 476: 477:  separator] `,`
[ 478: 479:     number] `1`
[ 479: 480:  separator] `,`
[ 480: 481:     number] `1`
[ 481: 482:  separator] `,`
[ 482: 483:     number] `1`
[ 483: 484:  separator] `,`
[ 484: 485:     number] `1`
[ 485: 486:  separator] `,`
[ 486: 487:     number] `1`
[ 487: 488:  separator] `,`
[ 488: 489:     number] `1`
[ 489: 490:  separator] `,`
[ 490: 491:     number] `1`
[ 491: 492:  separator] `,`
[ 492: 493:     number] `1`
[ 493: 494:  separator] `,`
[ 494: 495:     number] `1`
[ 495: 496:  separator] `,`
[ 496: 497:     number] `1`
[ 497: 498:  separator] `,`
[ 498: 499:     number] `1`
[ 499: 500:  separator] `,`
[ 500: 501:     number] `1`
[ 501: 502:  separator] `,`
[ 502: 503:     number] `1`
[ 503: 504:  separator] `,`
[ 504: 505:     number] `1`
[ 505: 506:  separator] `,`
[ 506: 507:     number] `1`
[ 507: 508:  separator] `,`
[ 508: 509:     number] `1`
[ 509: 510:  separator] `,`
[ 515: 516:     number] `2`
[ 516: 517:  separator] `,`
[ 517: 518:     number] `2`
[ 518: 519:  separator] `,`
[ 519: 520:     number] `2`
[ 520: 521:  separator] `,`
[ 521: 522:     number] `2`
[ 522: 523:  separator] `,`
[ 523: 524:     number] `2`
[ 524: 525:  separator] `,`
[ 525: 526:     number] `2`
[ 526: 527:  separator] `,`
[ 527: 528:     number] `2`
[ 528: 529:  separator] `,`
[ 529: 530:     number] `2`
[ 530: 531:  separator] `,`
[ 531: 532:     number] `2`
[ 532: 533:  separator] `,`
[ 533: 534:     number] `2`
[ 534: 535:  separator] `,`
[ 535: 536:     number] `2`
[ 536: 537:  separator] `,`
[ 537: 538:     number] `2`
[ 538: 539:  separator] `,`
[ 539: 540:     number] `2`
[ 540: 541:  separator] `,`
[ 541: 542:     number] `2`
[ 542: 543:  separator] `,`
[ 543: 544:     number] `2`
[ 544: 545:  separator] `,`
[ 545: 546:     number] `2`
[ 546: 547:  separator] `,`
[ 548: 549:     number] `3`
[ 549: 550:  separator] `,`
[ 550: 551:     number] `3`
[ 551: 552:  separator] `,`
[ 552: 553:     number] `3`
[ 553: 554:  separator] `,`
[ 554: 555:     number] `3`
[ 555: 556:  separator] `,`
[ 556: 557:     number] `3`
[ 557: 558:  separator] `,`
[ 558: 559:     number] `3`
[ 559: 560:  separator] `,`
[ 560: 561:     number] `3`
[ 561: 562:  separator] `,`
[ 562: 563:     number] `3`
[ 563: 564:  separator] `,`
[ 564: 565:     number] `4`
[ 565: 566:  separator] `,`
[ 566: 567:     number] `4`
[ 567: 568:  separator] `,`
[ 568: 569:     number] `4`
[ 569: 570:  separator] `,`
[ 570: 571:     number] `4`
[ 571: 572:  separator] `,`
[ 572: 573:     number] `5`
[ 573: 574:  separator] `,`
[ 574: 575:     number] `5`
[ 575: 576:  separator] `,`
[ 576: 577:     number] `5`
[ 577: 578:  separator] `,`
[ 578: 579:     number] `5`
[ 580: 581:  separator] `}`
[ 581: 582:  separator] `;`
[ 584: 591: identifier] `OFFSETS`
[ 592: 593:   operator] `:`
[ 593: 594:   operator] `=`
[ 595: 596:  separator] `[`
[ 596: 597:  separator] `]`
[ 597: 600: identifier] `u32`
[ 600: 601:  separator] `{`
[ 603: 613:     number] `0x00000000`
[ 613: 614:  separator] `,`
[ 615: 625:     number] `0x00003080`
[ 625: 626:  separator] `,`
[ 627: 637:     number] `0x000E2080`
[ 637: 638:  separator] `,`
[ 643: 653:     number] `0x03C82080`
[ 653: 654:  separator] `,`
[ 655: 665:     number] `0xFA082080`
[ 665: 666:  separator] `,`
[ 667: 677:     number] `0x82082080`
[ 678: 679:  separator] `}`
[ 679: 680:  separator] `;`
[ 682: 685: identifier] `pub`
[ 686: 690: identifier] `func`
[ 691: 699: identifier] `numRunes`
[ 699: 700:  separator] `(`
[ 700: 703: identifier] `src`
[ 703: 704:   operator] `:`
[ 705: 706:  separator] `[`
[ 706: 707:  separator] `]`
[ 707: 709: identifier] `u8`
[ 709: 710:  separator] `)`
[ 711: 713:   operator] `->`
[ 714: 718: identifier] `uint`
[ 719: 720:  separator] `{`
[ 722: 725: identifier] `mut`
[ 726: 727: identifier] `i`
[ 727: 728:   operator] `:`
[ 729: 733: identifier] `uint`
[ 734: 735:   operator] `=`
[ 736: 737:     number] `0`
[ 737: 738:  separator] `;`
[ 740: 743: identifier] `mut`
[ 744: 747: identifier] `num`
[ 747: 748:   operator] `:`
[ 749: 753: identifier] `uint`
[ 754: 755:   operator] `=`
[ 756: 757:     number] `0`
[ 757: 758:  separator] `;`
[ 761: 764: identifier] `for`
[ 765: 766: identifier] `i`
[ 767: 768:   operator] `<`
[ 769: 772: identifier] `len`
[ 772: 773:  separator] `(`
[ 773: 776: identifier] `src`
[ 776: 777:  separator] `)`
[ 778: 779:  separator] `{`
[ 782: 784: identifier] `nb`
[ 785: 786:   operator] `:`
[ 786: 787:   operator] `=`
[ 788: 792: identifier] `uint`
[ 792: 793:  separator] `(`
[ 793: 807: identifier] `TRAILING_BYTES`
[ 807: 808:  separator] `[`
[ 808: 811: identifier] `src`
[ 811: 812:  separator] `[`
[ 812: 813: identifier] `i`
[ 813: 814:  separator] `]`
[ 814: 815:  separator] `]`
[ 815: 816:  separator] `)`
[ 816: 817:  separator] `;`
[ 820: 821: identifier] `i`
[ 822: 823:   operator] `+`
[ 823: 824:   operator] `=`
[ 825: 827: identifier] `nb`
[ 828: 829:   operator] `+`
[ 830: 831:     number] `1`
[ 831: 832:  separator] `;`
[ 835: 838: identifier] `num`
[ 839: 840:   operator] `+`
[ 840: 841:   operator] `=`
[ 842: 843:     number] `1`
[ 843: 844:  separator] `;`
[ 846: 847:  separator] `}`
[ 850: 856: identifier] `return`
[ 857: 860: identifier] `num`
[ 860: 861:  separator] `;`
[ 862: 863:  separator] `}`
[ 865: 868: identifier] `pub`
[ 869: 873: identifier] `func`
[ 874: 882: identifier] `numBytes`
[ 882: 883:  separator] `(`
[ 883: 886: identifier] `src`
[ 886: 887:   operator] `:`
[ 888: 889:  separator] `[`
[ 889: 890:  separator] `]`
[ 890: 894: identifier] `rune`
[ 894: 895:  separator] `)`
[ 896: 898:   operator] `->`
[ 899: 903: identifier] `uint`
[ 904: 905:  separator] `{`
[ 907: 910: identifier] `mut`
[ 911: 912: identifier] `i`
[ 912: 913:   operator] `:`
[ 914: 918: identifier] `uint`
[ 919: 920:   operator] `=`
[ 921: 922:     number] `0`
[ 922: 923:  separator] `;`
[ 925: 928: identifier] `mut`
[ 929: 932: identifier] `num`
[ 932: 933:   operator] `:`
[ 934: 938: identifier] `uint`
[ 939: 940:   operator] `=`
[ 941: 942:     number] `0`
[ 942: 943:  separator] `;`
[ 946: 949: identifier] `for`
[ 950: 951: identifier] `i`
[ 952: 953:   operator] `<`
[ 954: 957: identifier] `len`
[ 957: 958:  separator] `(`
[ 958: 961: identifier] `src`
[ 961: 962:  separator] `)`
[ 963: 964:  separator] `{`
[ 967: 969: identifier] `ch`
[ 970: 971:   operator] `:`
[ 971: 972:   operator] `=`
[ 973: 976: identifier] `src`
[ 976: 977:  separator] `[`
[ 977: 978: identifier] `i`
[ 978: 979:  separator] `]`
[ 979: 980:  separator] `;`
[ 983: 985: identifier] `if`
[ 986: 988: identifier] `ch`
[ 989: 990:   operator] `<`
[ 991: 995:     number] `0x80`
[ 996: 997:  separator] `{`
[1001:1004: identifier] `num`
[1005:1006:   operator] `+`
[1006:1007:   operator] `=`
[1008:1009:     number] `1`
[1009:1010:  separator] `;`
[1013:1014:  separator] `}`
[1015:1019: identifier] `else`
[1020:1022: identifier] `if`
[1023:1025: identifier] `ch`
[1026:1027:   operator] `<`
[1028:1033:     number] `0x800`
[1034:1035:  separator] `{`
[1039:1042: identifier] `num`
[1043:1044:   operator] `+`
[1044:1045:   operator] `=`
[1046:1047:     number] `2`
[1047:1048:  separator] `;`
[1057:1058:  separator] `}`
[1059:1063: identifier] `else`
[1064:1066: identifier] `if`
[1067:1069: identifier] `ch`
[1070:1071:   operator] `<`
[1072:1079:     number] `0x10000`
[1080:1081:  separator] `{`
[1091:1094: identifier] `num`
[1095:1096:   operator] `+`
[1096:1097:   operator] `=`
[1098:1099:     number] `3`
[1099:1100:  separator] `;`
[1109:1110:  separator] `}`
[1111:1115: identifier] `else`
[1116:1118: identifier] `if`
[1119:1121: identifier] `ch`
[1122:1123:   operator] `<`
[1124:1132:     number] `0x110000`
[1133:1134:  separator] `{`
[1144:1147: identifier] `num`
[1148:1149:   operator] `+`
[1149:1150:   operator] `=`
[1151:1152:     number] `4`
[1152:1153:  separator] `;`
[1162:1163:  separator] `}`
[1172:1173: identifier] `i`
[1174:1175:   operator] `+`
[1175:1176:   operator] `=`
[1177:1178:     number] `1`
[1178:1179:  separator] `;`
[1181:1182:  separator] `}`
[1184:1190: identifier] `return`
[1191:1194: identifier] `num`
[1194:1195:  separator] `;`
[1196:1197:  separator] `}`
[1199:1202: identifier] `pub`
[1203:1207: identifier] `func`
[1208:1214: identifier] `decode`
[1214:1215:  separator] `(`
[1215:1218: identifier] `mut`
[1219:1223: identifier] `dest`
[1223:1224:   operator] `:`
[1225:1226:  separator] `[`
[1226:1227:  separator] `]`
[1227:1231: identifier] `rune`
[1231:1232:  separator] `,`
[1233:1236: identifier] `src`
[1236:1237:   operator] `:`
[1238:1239:  separator] `[`
[1239:1240:  separator] `]`
[1240:1242: identifier] `u8`
[1242:1243:  separator] `)`
[1244:1246:   operator] `->`
[1247:1251: identifier] `uint`
[1252:1253:  separator] `{`
[1255:1258: identifier] `mut`
[1259:1267: identifier] `srcIndex`
[1267:1268:   operator] `:`
[1269:1273: identifier] `uint`
[1274:1275:   operator] `=`
[1276:1277:     number] `0`
[1277:1278:  separator] `;`
[1280:1283: identifier] `mut`
[1284:1293: identifier] `destIndex`
[1293:1294:   operator] `:`
[1295:1299: identifier] `uint`
[1300:1301:   operator] `=`
[1302:1303:     number] `0`
[1303:1304:  separator] `;`
[1307:1310: identifier] `for`
[1311:1320: identifier] `destIndex`
[1321:1322:   operator] `<`
[1323:1326: identifier] `len`
[1326:1327:  separator] `(`
[1327:1331: identifier] `dest`
[1331:1332:  separator] `)`
[1333:1334:  separator] `{`
[1337:1339: identifier] `nb`
[1340:1341:   operator] `:`
[1341:1342:   operator] `=`
[1343:1347: identifier] `uint`
[1347:1348:  separator] `(`
[1348:1362: identifier] `TRAILING_BYTES`
[1362:1363:  separator] `[`
[1363:1366: identifier] `src`
[1366:1367:  separator] `[`
[1367:1375: identifier] `srcIndex`
[1375:1376:  separator] `]`
[1376:1377:  separator] `]`
[1377:1378:  separator] `)`
[1378:1379:  separator] `;`
[1382:1384: identifier] `if`
[1385:1393: identifier] `srcIndex`
[1394:1395:   operator] `+`
[1396:1398: identifier] `nb`
[1399:1401:   operator] `>=`
[1402:1405: identifier] `len`
[1405:1406:  separator] `(`
[1406:1409: identifier] `src`
[1409:1410:  separator] `)`
[1411:1412:  separator] `{`
[1458:1464: identifier] `return`
[1465:1474: identifier] `destIndex`
[1474:1475:  separator] `;`
[1478:1479:  separator] `}`
[1483:1486: identifier] `mut`
[1487:1489: identifier] `ch`
[1489:1490:   operator] `:`
[1491:1495: identifier] `rune`
[1496:1497:   operator] `=`
[1498:1499:     number] `0`
[1499:1500:  separator] `;`
[1503:1505: identifier] `if`
[1506:1508: identifier] `nb`
[1509:1511:   operator] `>=`
[1512:1513:     number] `3`
[1514:1515:  separator] `{`
[1519:1521: identifier] `ch`
[1522:1523:   operator] `+`
[1523:1524:   operator] `=`
[1525:1529: identifier] `rune`
[1529:1530:  separator] `(`
[1530:1533: identifier] `src`
[1533:1534:  separator] `[`
[1534:1542: identifier] `srcIndex`
[1542:1543:  separator] `]`
[1543:1544:  separator] `)`
[1544:1545:  separator] `;`
[1546:1548: identifier] `ch`
[1549:1551:   operator] `<<`
[1551:1552:   operator] `=`
[1553:1554:     number] `6`
[1554:1555:  separator] `;`
[1559:1567: identifier] `srcIndex`
[1568:1569:   operator] `+`
[1569:1570:   operator] `=`
[1571:1572:     number] `1`
[1572:1573:  separator] `;`
[1576:1577:  separator] `}`
[1581:1583: identifier] `if`
[1584:1586: identifier] `nb`
[1587:1589:   operator] `>=`
[1590:1591:     number] `2`
[1592:1593:  separator] `{`
[1597:1599: identifier] `ch`
[1600:1601:   operator] `+`
[1601:1602:   operator] `=`
[1603:1607: identifier] `rune`
[1607:1608:  separator] `(`
[1608:1611: identifier] `src`
[1611:1612:  separator] `[`
[1612:1620: identifier] `srcIndex`
[1620:1621:  separator] `]`
[1621:1622:  separator] `)`
[1622:1623:  separator] `;`
[1624:1626: identifier] `ch`
[1627:1629:   operator] `<<`
[1629:1630:   operator] `=`
[1631:1632:     number] `6`
[1632:1633:  separator] `;`
[1637:1645: identifier] `srcIndex`
[1646:1647:   operator] `+`
[1647:1648:   operator] `=`
[1649:1650:     number] `1`
[1650:1651:  separator] `;`
[1654:1655:  separator] `}`
[1659:1661: identifier] `if`
[1662:1664: identifier] `nb`
[1665:1667:   operator] `>=`
[1668:1669:     number] `1`
[1670:1671:  separator] `{`
[1675:1677: identifier] `ch`
[1678:1679:   operator] `+`
[1679:1680:   operator] `=`
[1681:1685: identifier] `rune`
[1685:1686:  separator] `(`
[1686:1689: identifier] `src`
[1689:1690:  separator] `[`
[1690:1698: identifier] `srcIndex`
[1698:1699:  separator] `]`
[1699:1700:  separator] `)`
[1700:1701:  separator] `;`
[1702:1704: identifier] `ch`
[1705:1707:   operator] `<<`
[1707:1708:   operator] `=`
[1709:1710:     number] `6`
[1710:1711:  separator] `;`
[1715:1723: identifier] `srcIndex`
[1724:1725:   operator] `+`
[1725:1726:   operator] `=`
[1727:1728:     number] `1`
[1728:1729:  separator] `;`
[1732:1733:  separator] `}`
[1736:1738: identifier] `ch`
[1739:1740:   operator] `+`
[1740:1741:   operator] `=`
[1742:1746: identifier] `rune`
[1746:1747:  separator] `(`
[1747:1750: identifier] `src`
[1750:1751:  separator] `[`
[1751:1759: identifier] `srcIndex`
[1759:1760:  separator] `]`
[1760:1761:  separator] `)`
[1761:1762:  separator] `;`
[1765:1773: identifier] `srcIndex`
[1774:1775:   operator] `+`
[1775:1776:   operator] `=`
[1777:1778:     number] `1`
[1778:1779:  separator] `;`
[1783:1785: identifier] `ch`
[1786:1787:   operator] `-`
[1787:1788:   operator] `=`
[1789:1793: identifier] `rune`
[1793:1794:  separator] `(`
[1794:1801: identifier] `OFFSETS`
[1801:1802:  separator] `[`
[1802:1804: identifier] `nb`
[1804:1805:  separator] `]`
[1805:1806:  separator] `)`
[1806:1807:  separator] `;`
[1810:1814: identifier] `dest`
[1814:1815:  separator] `[`
[1815:1824: identifier] `destIndex`
[1824:1825:  separator] `]`
[1826:1827:   operator] `=`
[1828:1830: identifier] `ch`
[1830:1831:  separator] `;`
[1834:1843: identifier] `destIndex`
[1844:1845:   operator] `+`
[1845:1846:   operator] `=`
[1847:1848:     number] `1`
[1848:1849:  separator] `;`
[1851:1852:  separator] `}`
[1855:1861: identifier] `return`
[1862:1871: identifier] `destIndex`
[1871:1872:  separator] `;`
[1873:1874:  separator] `}`
[1876:1879: identifier] `pub`
[1880:1884: identifier] `func`
[1885:1891: identifier] `encode`
[1891:1892:  separator] `(`
[1892:1895: identifier] `mut`
[1896:1900: identifier] `dest`
[1900:1901:   operator] `:`
[1902:1903:  separator] `[`
[1903:1904:  separator] `]`
[1904:1906: identifier] `u8`
[1906:1907:  separator] `,`
[1908:1911: identifier] `src`
[1911:1912:   operator] `:`
[1913:1914:  separator] `[`
[1914:1915:  separator] `]`
[1915:1919: identifier] `rune`
[1919:1920:  separator] `)`
[1921:1923:   operator] `->`
[1924:1928: identifier] `uint`
[1929:1930:  separator] `{`
[1932:1935: identifier] `mut`
[1936:1944: identifier] `srcIndex`
[1944:1945:   operator] `:`
[1946:1950: identifier] `uint`
[1951:1952:   operator] `=`
[1953:1954:     number] `0`
[1954:1955:  separator] `;`
[1957:1960: identifier] `mut`
[1961:1970: identifier] `destIndex`
[1970:1971:   operator] `:`
[1972:1976: identifier] `uint`
[1977:1978:   operator] `=`
[1979:1980:     number] `0`
[1980:1981:  separator] `;`
[1983:1986: identifier] `for`
[1987:1995: identifier] `srcIndex`
[1996:1997:   operator] `<`
[1998:2001: identifier] `len`
[2001:2002:  separator] `(`
[2002:2005: identifier] `src`
[2005:2006:  separator] `)`
[2007:2008:  separator] `{`
[2011:2013: identifier] `ch`
[2014:2015:   operator] `:`
[2015:2016:   operator] `=`
[2017:2020: identifier] `src`
[2020:2021:  separator] `[`
[2021:2029: identifier] `srcIndex`
[2029:2030:  separator] `]`
[2030:2031:  separator] `;`
[2034:2036: identifier] `if`
[2037:2039: identifier] `ch`
[2040:2041:   operator] `<`
[2042:2046:     number] `0x80`
[2047:2048:  separator] `{`
[2052:2054: identifier] `if`
[2055:2064: identifier] `destIndex`
[2065:2067:   operator] `>=`
[2068:2071: identifier] `len`
[2071:2072:  separator] `(`
[2072:2076: identifier] `dest`
[2076:2077:  separator] `)`
[2078:2079:  separator] `{`
[2084:2090: identifier] `return`
[2091:2100: identifier] `destIndex`
[2100:2101:  separator] `;`
[2105:2106:  separator] `}`
[2110:2114: identifier] `dest`
[2114:2115:  separator] `[`
[2115:2124: identifier] `destIndex`
[2124:2125:  separator] `]`
[2126:2127:   operator] `=`
[2128:2130: identifier] `u8`
[2130:2131:  separator] `(`
[2131:2133: identifier] `ch`
[2133:2134:  separator] `)`
[2134:2135:  separator] `;`
[2139:2148: identifier] `destIndex`
[2149:2150:   operator] `+`
[2150:2151:   operator] `=`
[2152:2153:     number] `1`
[2153:2154:  separator] `;`
[2157:2158:  separator] `}`
[2161:2165: identifier] `else`
[2166:2168: identifier] `if`
[2169:2171: identifier] `ch`
[2172:2173:   operator] `<`
[2174:2179:     number] `0x800`
[2180:2181:  separator] `{`
[2185:2187: identifier] `if`
[2188:2197: identifier] `destIndex`
[2198:2200:   operator] `>=`
[2201:2204: identifier] `len`
[2204:2205:  separator] `(`
[2205:2209: identifier] `dest`
[2209:2210:  separator] `)`
[2210:2211:   operator] `-`
[2211:2212:     number] `1`
[2213:2214:  separator] `{`
[2219:2225: identifier] `return`
[2226:2235: identifier] `destIndex`
[2235:2236:  separator] `;`
[2240:2241:  separator] `}`
[2245:2249: identifier] `dest`
[2249:2250:  separator] `[`
[2250:2259: identifier] `destIndex`
[2260:2261:   operator] `+`
[2262:2263:     number] `0`
[2263:2264:  separator] `]`
[2265:2266:   operator] `=`
[2267:2269: identifier] `u8`
[2269:2270:  separator] `(`
[2270:2271:  separator] `(`
[2271:2273: identifier] `ch`
[2273:2274:   operator] `>`
[2274:2275:   operator] `>`
[2275:2276:     number] `6`
[2276:2277:  separator] `)`
[2278:2279:   operator] `|`
[2280:2284:     number] `0xC0`
[2284:2285:  separator] `)`
[2285:2286:  separator] `;`
[2299:2303: identifier] `dest`
[2303:2304:  separator] `[`
[2304:2313: identifier] `destIndex`
[2314:2315:   operator] `+`
[2316:2317:     number] `1`
[2317:2318:  separator] `]`
[2319:2320:   operator] `=`
[2321:2323: identifier] `u8`
[2323:2324:  separator] `(`
[2324:2325:  separator] `(`
[2325:2327: identifier] `ch`
[2328:2329:   operator] `&`
[2330:2334:     number] `0x3F`
[2334:2335:  separator] `)`
[2336:2337:   operator] `|`
[2338:2342:     number] `0x80`
[2342:2343:  separator] `)`
[2343:2344:  separator] `;`
[2357:2366: identifier] `destIndex`
[2367:2368:   operator] `+`
[2368:2369:   operator] `=`
[2370:2371:     number] `2`
[2371:2372:  separator] `;`
[2381:2382:  separator] `}`
[2391:2395: identifier] `else`
[2396:2398: identifier] `if`
[2399:2401: identifier] `ch`
[2402:2403:   operator] `<`
[2404:2411:     number] `0x10000`
[2412:2413:  separator] `{`
[2417:2419: identifier] `if`
[2420:2429: identifier] `destIndex`
[2430:2432:   operator] `>=`
[2433:2436: identifier] `len`
[2436:2437:  separator] `(`
[2437:2441: identifier] `dest`
[2441:2442:  separator] `)`
[2442:2443:   operator] `-`
[2443:2444:     number] `2`
[2445:2446:  separator] `{`
[2451:2457: identifier] `return`
[2458:2467: identifier] `destIndex`
[2467:2468:  separator] `;`
[2472:2473:  separator] `}`
[2486:2490: identifier] `dest`
[2490:2491:  separator] `[`
[2491:2500: identifier] `destIndex`
[2501:2502:   operator] `+`
[2503:2504:     number] `0`
[2504:2505:  separator] `]`
[2506:2507:   operator] `=`
[2508:2510: identifier] `u8`
[2510:2511:  separator] `(`
[2511:2512:  separator] `(`
[2512:2514: identifier] `ch`
[2514:2515:   operator] `>`
[2515:2516:   operator] `>`
[2516:2518:     number] `12`
[2518:2519:  separator] `)`
[2520:2521:   operator] `|`
[2522:2526:     number] `0xE0`
[2526:2527:  separator] `)`
[2527:2528:  separator] `;`
[2541:2545: identifier] `dest`
[2545:2546:  separator] `[`
[2546:2555: identifier] `destIndex`
[2556:2557:   operator] `+`
[2558:2559:     number] `1`
[2559:2560:  separator] `]`
[2561:2562:   operator] `=`
[2563:2565: identifier] `u8`
[2565:2566:  separator] `(`
[2566:2567:  separator] `(`
[2567:2568:  separator] `(`
[2568:2570: identifier] `ch`
[2570:2571:   operator] `>`
[2571:2572:   operator] `>`
[2572:2573:     number] `6`
[2573:2574:  separator] `)`
[2575:2576:   operator] `&`
[2577:2581:     number] `0x3F`
[2581:2582:  separator] `)`
[2583:2584:   operator] `|`
[2585:2589:     number] `0x80`
[2589:2590:  separator] `)`
[2590:2591:  separator] `;`
[2604:2608: identifier] `dest`
[2608:2609:  separator] `[`
[2609:2618: identifier] `destIndex`
[2619:2620:   operator] `+`
[2621:2622:     number] `2`
[2622:2623:  separator] `]`
[2624:2625:   operator] `=`
[2626:2628: identifier] `u8`
[2628:2629:  separator] `(`
[2629:2630:  separator] `(`
[2630:2632: identifier] `ch`
[2633:2634:   operator] `&`
[2635:2639:     number] `0x3F`
[2639:2640:  separator] `)`
[2641:2642:   operator] `|`
[2643:2647:     number] `0x80`
[2647:2648:  separator] `)`
[2648:2649:  separator] `;`
[2662:2671: identifier] `destIndex`
[2672:2673:   operator] `+`
[2673:2674:   operator] `=`
[2675:2676:     number] `3`
[2676:2677:  separator] `;`
[2686:2687:  separator] `}`
[2696:2700: identifier] `else`
[2701:2703: identifier] `if`
[2704:2706: identifier] `ch`
[2707:2708:   operator] `<`
[2709:2717:     number] `0x110000`
[2718:2719:  separator] `{`
[2723:2725: identifier] `if`
[2726:2735: identifier] `destIndex`
[2736:2738:   operator] `>=`
[2739:2742: identifier] `len`
[2742:2743:  separator] `(`
[2743:2747: identifier] `dest`
[2747:2748:  separator] `)`
[2748:2749:   operator] `-`
[2749:2750:     number] `3`
[2751:2752:  separator] `{`
[2757:2763: identifier] `return`
[2764:2773: identifier] `destIndex`
[2773:2774:  separator] `;`
[2778:2779:  separator] `}`
[2792:2796: identifier] `dest`
[2796:2797:  separator] `[`
[2797:2806: identifier] `destIndex`
[2807:2808:   operator] `+`
[2809:2810:     number] `0`
[2810:2811:  separator] `]`
[2812:2813:   operator] `=`
[2814:2816: identifier] `u8`
[2816:2817:  separator] `(`
[2817:2818:  separator] `(`
[2818:2820: identifier] `ch`
[2820:2821:   operator] `>`
[2821:2822:   operator] `>`
[2822:2824:     number] `18`
[2824:2825:  separator] `)`
[2826:2827:   operator] `|`
[2828:2832:     number] `0xF0`
[2832:2833:  separator] `)`
[2833:2834:  separator] `;`
[2847:2851: identifier] `dest`
[2851:2852:  separator] `[`
[2852:2861: identifier] `destIndex`
[2862:2863:   operator] `+`
[2864:2865:     number] `1`
[2865:2866:  separator] `]`
[2867:2868:   operator] `=`
[2869:2871: identifier] `u8`
[2871:2872:  separator] `(`
[2872:2873:  separator] `(`
[2873:2874:  separator] `(`
[2874:2876: identifier] `ch`
[2876:2877:   operator] `>`
[2877:2878:   operator] `>`
[2878:2880:     number] `12`
[2880:2881:  separator] `)`
[2882:2883:   operator] `&`
[2884:2888:     number] `0x3F`
[2888:2889:  separator] `)`
[2890:2891:   operator] `|`
[2892:2896:     number] `0x80`
[2896:2897:  separator] `)`
[2897:2898:  separator] `;`
[2911:2915: identifier] `dest`
[2915:2916:  separator] `[`
[2916:2925: identifier] `destIndex`
[2926:2927:   operator] `+`
[2928:2929:     number] `2`
[2929:2930:  separator] `]`
[2931:2932:   operator] `=`
[2933:2935: identifier] `u8`
[2935:2936:  separator] `(`
[2936:2937:  separator] `(`
[2937:2938:  separator] `(`
[2938:2940: identifier] `ch`
[2940:2941:   operator] `>`
[2941:2942:   operator] `>`
[2942:2943:     number] `6`
[2943:2944:  separator] `)`
[2945:2946:   operator] `&`
[2947:2951:     number] `0x3F`
[2951:2952:  separator] `)`
[2953:2954:   operator] `|`
[2955:2959:     number] `0x80`
[2959:2960:  separator] `)`
[2960:2961:  separator] `;`
[2974:2978: identifier] `dest`
[2978:2979:  separator] `[`
[2979:2988: identifier] `destIndex`
[2989:2990:   operator] `+`
[2991:2992:     number] `3`
[2992:2993:  separator] `]`
[2994:2995:   operator] `=`
[2996:2998: identifier] `u8`
[2998:2999:  separator] `(`
[2999:3000:  separator] `(`
[3000:3002: identifier] `ch`
[3003:3004:   operator] `&`
[3005:3009:     number] `0x3F`
[3009:3010:  separator] `)`
[3011:3012:   operator] `|`
[3013:3017:     number] `0x80`
[3017:3018:  separator] `)`
[3018:3019:  separator] `;`
[3032:3041: identifier] `destIndex`
[3042:3043:   operator] `+`
[3043:3044:   operator] `=`
[3045:3046:     number] `4`
[3046:3047:  separator] `;`
[3056:3057:  separator] `}`
[3066:3074: identifier] `srcIndex`
[3075:3076:   operator] `+`
[3076:3077:   operator] `=`
[3078:3079:     number] `1`
[3079:3080:  separator] `;`
[3082:3083:  separator] `}`
[3086:3092: identifier] `return`
[3093:3102: identifier] `destIndex`
[3102:3103:  separator] `;`
[3104:3105:  separator] `}`
 [32mEnded lexing[00m coding (6.97ms)
 [32mStarted parsing[00m coding
 [32mEnded parsing[00m coding (4.58ms)
 [32mStarted lexing[00m list
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  13: identifier] `mem`
[  15:  18: identifier] `pub`
[  19:  23: identifier] `type`
[  24:  28: identifier] `List`
[  29:  35: identifier] `struct`
[  35:  36:   operator] `<`
[  36:  37: identifier] `T`
[  37:  38:   operator] `>`
[  39:  40:  separator] `{`
[  45:  49: identifier] `data`
[  49:  50:   operator] `:`
[  51:  52:   operator] `^`
[  52:  55: identifier] `mut`
[  56:  57: identifier] `T`
[  57:  58:  separator] `,`
[  63:  69: identifier] `length`
[  69:  70:   operator] `:`
[  71:  75: identifier] `uint`
[  75:  76:  separator] `,`
[  81:  89: identifier] `capacity`
[  89:  90:   operator] `:`
[  91:  95: identifier] `uint`
[  95:  96:  separator] `,`
[  97:  98:  separator] `}`
[  98:  99:  separator] `;`
[ 101: 114: identifier] `BASE_CAPACITY`
[ 114: 115:   operator] `:`
[ 116: 120: identifier] `uint`
[ 121: 122:   operator] `=`
[ 123: 124:     number] `4`
[ 124: 125:  separator] `;`
[ 127: 130: identifier] `pub`
[ 131: 135: identifier] `func`
[ 136: 137:  separator] `(`
[ 137: 141: identifier] `List`
[ 141: 142:  separator] `)`
[ 143: 146: identifier] `new`
[ 146: 147:   operator] `<`
[ 147: 148: identifier] `T`
[ 148: 149:   operator] `>`
[ 149: 150:  separator] `(`
[ 150: 151:  separator] `)`
[ 152: 154:   operator] `->`
[ 155: 156:   operator] `^`
[ 156: 159: identifier] `mut`
[ 160: 164: identifier] `List`
[ 164: 165:   operator] `<`
[ 165: 166: identifier] `T`
[ 166: 167:   operator] `>`
[ 168: 169:  separator] `{`
[ 174: 180: identifier] `return`
[ 181: 185: identifier] `List`
[ 185: 187:   operator] `::`
[ 187: 202: identifier] `newWithCapacity`
[ 202: 203:   operator] `<`
[ 203: 204: identifier] `T`
[ 204: 205:   operator] `>`
[ 205: 206:  separator] `(`
[ 206: 207:     number] `0`
[ 207: 208:  separator] `)`
[ 208: 209:  separator] `;`
[ 210: 211:  separator] `}`
[ 213: 216: identifier] `pub`
[ 217: 221: identifier] `func`
[ 222: 223:  separator] `(`
[ 223: 227: identifier] `List`
[ 227: 228:  separator] `)`
[ 229: 244: identifier] `newWithCapacity`
[ 244: 245:   operator] `<`
[ 245: 246: identifier] `T`
[ 246: 247:   operator] `>`
[ 247: 248:  separator] `(`
[ 248: 251: identifier] `mut`
[ 252: 255: identifier] `cap`
[ 255: 256:   operator] `:`
[ 257: 261: identifier] `uint`
[ 261: 262:  separator] `)`
[ 263: 265:   operator] `->`
[ 266: 267:   operator] `^`
[ 267: 270: identifier] `mut`
[ 271: 275: identifier] `List`
[ 275: 276:   operator] `<`
[ 276: 277: identifier] `T`
[ 277: 278:   operator] `>`
[ 279: 280:  separator] `{`
[ 285: 287: identifier] `if`
[ 288: 291: identifier] `cap`
[ 292: 294:   operator] `<=`
[ 295: 296:     number] `0`
[ 297: 298:  separator] `{`
[ 307: 310: identifier] `cap`
[ 311: 312:   operator] `=`
[ 313: 326: identifier] `BASE_CAPACITY`
[ 326: 327:  separator] `;`
[ 332: 333:  separator] `}`
[ 339: 343: identifier] `size`
[ 344: 345:   operator] `:`
[ 345: 346:   operator] `=`
[ 347: 353: identifier] `sizeof`
[ 353: 354:  separator] `(`
[ 354: 355: identifier] `T`
[ 355: 356:  separator] `)`
[ 357: 358:   operator] `*`
[ 359: 362: identifier] `cap`
[ 362: 363:  separator] `;`
[ 369: 372: identifier] `res`
[ 373: 374:   operator] `:`
[ 374: 375:   operator] `=`
[ 376: 379: identifier] `mem`
[ 379: 381:   operator] `::`
[ 381: 386: identifier] `alloc`
[ 386: 387:   operator] `<`
[ 387: 391: identifier] `List`
[ 391: 392:   operator] `<`
[ 392: 393: identifier] `T`
[ 393: 394:   operator] `>`
[ 394: 395:   operator] `>`
[ 395: 396:  separator] `(`
[ 396: 397:  separator] `)`
[ 397: 398:  separator] `;`
[ 403: 404:   operator] `@`
[ 404: 407: identifier] `res`
[ 408: 409:   operator] `=`
[ 410: 414: identifier] `List`
[ 414: 415:   operator] `<`
[ 415: 416: identifier] `T`
[ 416: 417:   operator] `>`
[ 417: 418:  separator] `{`
[ 427: 431: identifier] `data`
[ 431: 432:   operator] `:`
[ 433: 434:  separator] `(`
[ 434: 435:   operator] `^`
[ 435: 438: identifier] `mut`
[ 439: 440: identifier] `T`
[ 440: 441:  separator] `)`
[ 441: 442:  separator] `(`
[ 442: 445: identifier] `mem`
[ 445: 447:   operator] `::`
[ 447: 455: identifier] `rawAlloc`
[ 455: 456:  separator] `(`
[ 456: 460: identifier] `size`
[ 460: 461:  separator] `)`
[ 461: 462:  separator] `)`
[ 462: 463:  separator] `,`
[ 472: 478: identifier] `length`
[ 478: 479:   operator] `:`
[ 480: 481:     number] `0`
[ 481: 482:  separator] `,`
[ 491: 499: identifier] `capacity`
[ 499: 500:   operator] `:`
[ 501: 504: identifier] `cap`
[ 504: 505:  separator] `,`
[ 510: 511:  separator] `}`
[ 511: 512:  separator] `;`
[ 518: 524: identifier] `return`
[ 525: 528: identifier] `res`
[ 528: 529:  separator] `;`
[ 530: 531:  separator] `}`
[ 533: 536: identifier] `pub`
[ 537: 541: identifier] `func`
[ 542: 543:  separator] `(`
[ 543: 545: identifier] `it`
[ 545: 546:   operator] `:`
[ 547: 548:   operator] `^`
[ 548: 552: identifier] `List`
[ 552: 553:   operator] `<`
[ 553: 554: identifier] `T`
[ 554: 555:   operator] `>`
[ 555: 556:  separator] `)`
[ 557: 564: identifier] `destroy`
[ 564: 565:  separator] `(`
[ 565: 566:  separator] `)`
[ 567: 568:  separator] `{`
[ 573: 576: identifier] `mem`
[ 576: 578:   operator] `::`
[ 578: 585: identifier] `rawFree`
[ 585: 586:  separator] `(`
[ 586: 593: identifier] `uintptr`
[ 593: 594:  separator] `(`
[ 594: 596: identifier] `it`
[ 596: 597:  separator] `.`
[ 597: 601: identifier] `data`
[ 601: 602:  separator] `)`
[ 602: 603:  separator] `)`
[ 603: 604:  separator] `;`
[ 609: 612: identifier] `mem`
[ 612: 614:   operator] `::`
[ 614: 618: identifier] `free`
[ 618: 619:  separator] `(`
[ 619: 621: identifier] `it`
[ 621: 622:  separator] `)`
[ 622: 623:  separator] `;`
[ 624: 625:  separator] `}`
[ 627: 630: identifier] `pub`
[ 631: 635: identifier] `func`
[ 636: 637:  separator] `(`
[ 637: 639: identifier] `it`
[ 639: 640:   operator] `:`
[ 641: 642:   operator] `^`
[ 642: 646: identifier] `List`
[ 646: 647:   operator] `<`
[ 647: 648: identifier] `T`
[ 648: 649:   operator] `>`
[ 649: 650:  separator] `)`
[ 651: 663: identifier] `toRawPointer`
[ 663: 664:  separator] `(`
[ 664: 665:  separator] `)`
[ 666: 668:   operator] `->`
[ 669: 670:   operator] `^`
[ 670: 671: identifier] `T`
[ 672: 673:  separator] `{`
[ 678: 684: identifier] `return`
[ 685: 687: identifier] `it`
[ 687: 688:  separator] `.`
[ 688: 692: identifier] `data`
[ 692: 693:  separator] `;`
[ 694: 695:  separator] `}`
[ 697: 700: identifier] `pub`
[ 701: 705: identifier] `func`
[ 706: 707:  separator] `(`
[ 707: 709: identifier] `it`
[ 709: 710:   operator] `:`
[ 711: 715: identifier] `List`
[ 715: 716:   operator] `<`
[ 716: 717: identifier] `T`
[ 717: 718:   operator] `>`
[ 718: 719:  separator] `)`
[ 720: 723: identifier] `get`
[ 723: 724:  separator] `(`
[ 724: 729: identifier] `index`
[ 729: 730:   operator] `:`
[ 731: 735: identifier] `uint`
[ 735: 736:  separator] `)`
[ 737: 739:   operator] `->`
[ 740: 741: identifier] `T`
[ 742: 743:  separator] `{`
[ 748: 750: identifier] `if`
[ 751: 756: identifier] `index`
[ 757: 759:   operator] `>=`
[ 760: 762: identifier] `it`
[ 762: 763:  separator] `.`
[ 763: 769: identifier] `length`
[ 770: 771:  separator] `{`
[ 780: 785: identifier] `panic`
[ 785: 786:  separator] `(`
[ 787: 812:     string] `List.get: index >= length`
[ 813: 814:  separator] `)`
[ 814: 815:  separator] `;`
[ 820: 821:  separator] `}`
[ 827: 833: identifier] `return`
[ 834: 836: identifier] `it`
[ 836: 837:  separator] `.`
[ 837: 841: identifier] `data`
[ 841: 842:  separator] `[`
[ 842: 847: identifier] `index`
[ 847: 848:  separator] `]`
[ 848: 849:  separator] `;`
[ 850: 851:  separator] `}`
[ 853: 856: identifier] `pub`
[ 857: 861: identifier] `func`
[ 862: 863:  separator] `(`
[ 863: 865: identifier] `it`
[ 865: 866:   operator] `:`
[ 867: 871: identifier] `List`
[ 871: 872:   operator] `<`
[ 872: 873: identifier] `T`
[ 873: 874:   operator] `>`
[ 874: 875:  separator] `)`
[ 876: 885: identifier] `getLength`
[ 885: 886:  separator] `(`
[ 886: 887:  separator] `)`
[ 888: 890:   operator] `->`
[ 891: 895: identifier] `uint`
[ 896: 897:  separator] `{`
[ 902: 908: identifier] `return`
[ 909: 911: identifier] `it`
[ 911: 912:  separator] `.`
[ 912: 918: identifier] `length`
[ 918: 919:  separator] `;`
[ 920: 921:  separator] `}`
[ 923: 926: identifier] `pub`
[ 927: 931: identifier] `func`
[ 932: 933:  separator] `(`
[ 933: 935: identifier] `it`
[ 935: 936:   operator] `:`
[ 937: 941: identifier] `List`
[ 941: 942:   operator] `<`
[ 942: 943: identifier] `T`
[ 943: 944:   operator] `>`
[ 944: 945:  separator] `)`
[ 946: 957: identifier] `getCapacity`
[ 957: 958:  separator] `(`
[ 958: 959:  separator] `)`
[ 960: 962:   operator] `->`
[ 963: 967: identifier] `uint`
[ 968: 969:  separator] `{`
[ 974: 980: identifier] `return`
[ 981: 983: identifier] `it`
[ 983: 984:  separator] `.`
[ 984: 992: identifier] `capacity`
[ 992: 993:  separator] `;`
[ 994: 995:  separator] `}`
[ 997:1029: doccomment] `/// This will double the size of`
[1030:1048: doccomment] `/// the lists data`
[1049:1087: doccomment] `/// Note that for now the memcpy seems`
[1088:1129: doccomment] `/// to be having some issues, so I'm just`
[1130:1169: doccomment] `/// manually swapping the data for now.`
[1170:1174: identifier] `func`
[1175:1176:  separator] `(`
[1176:1178: identifier] `it`
[1178:1179:   operator] `:`
[1180:1181:   operator] `^`
[1181:1184: identifier] `mut`
[1185:1189: identifier] `List`
[1189:1190:   operator] `<`
[1190:1191: identifier] `T`
[1191:1192:   operator] `>`
[1192:1193:  separator] `)`
[1194:1198: identifier] `grow`
[1198:1199:  separator] `(`
[1199:1200:  separator] `)`
[1201:1202:  separator] `{`
[1207:1214: identifier] `oldData`
[1215:1216:   operator] `:`
[1216:1217:   operator] `=`
[1218:1220: identifier] `it`
[1220:1221:  separator] `.`
[1221:1225: identifier] `data`
[1225:1226:  separator] `;`
[1231:1233: identifier] `it`
[1233:1234:  separator] `.`
[1234:1242: identifier] `capacity`
[1243:1244:   operator] `*`
[1244:1245:   operator] `=`
[1246:1247:     number] `2`
[1247:1248:  separator] `;`
[1253:1260: identifier] `newData`
[1261:1262:   operator] `:`
[1262:1263:   operator] `=`
[1264:1265:  separator] `(`
[1265:1266:   operator] `^`
[1266:1269: identifier] `mut`
[1270:1271: identifier] `T`
[1271:1272:  separator] `)`
[1272:1273:  separator] `(`
[1273:1276: identifier] `mem`
[1276:1278:   operator] `::`
[1278:1286: identifier] `rawAlloc`
[1286:1287:  separator] `(`
[1287:1293: identifier] `sizeof`
[1293:1294:  separator] `(`
[1294:1295: identifier] `T`
[1295:1296:  separator] `)`
[1297:1298:   operator] `*`
[1299:1301: identifier] `it`
[1301:1302:  separator] `.`
[1302:1310: identifier] `capacity`
[1310:1311:  separator] `)`
[1311:1312:  separator] `)`
[1312:1313:  separator] `;`
[1319:1322: identifier] `mut`
[1323:1324: identifier] `i`
[1325:1326:   operator] `:`
[1326:1327:   operator] `=`
[1328:1332: identifier] `uint`
[1332:1333:  separator] `(`
[1333:1334:     number] `0`
[1334:1335:  separator] `)`
[1335:1336:  separator] `;`
[1341:1344: identifier] `for`
[1345:1346: identifier] `i`
[1347:1348:   operator] `<`
[1349:1351: identifier] `it`
[1351:1352:  separator] `.`
[1352:1358: identifier] `length`
[1359:1360:  separator] `{`
[1369:1376: identifier] `newData`
[1376:1377:  separator] `[`
[1377:1378: identifier] `i`
[1378:1379:  separator] `]`
[1380:1381:   operator] `=`
[1382:1389: identifier] `oldData`
[1389:1390:  separator] `[`
[1390:1391: identifier] `i`
[1391:1392:  separator] `]`
[1392:1393:  separator] `;`
[1402:1403: identifier] `i`
[1404:1405:   operator] `+`
[1405:1406:   operator] `=`
[1407:1408:     number] `1`
[1408:1409:  separator] `;`
[1414:1415:  separator] `}`
[1421:1424: identifier] `mem`
[1424:1426:   operator] `::`
[1426:1433: identifier] `rawFree`
[1433:1434:  separator] `(`
[1434:1441: identifier] `uintptr`
[1441:1442:  separator] `(`
[1442:1449: identifier] `oldData`
[1449:1450:  separator] `)`
[1450:1451:  separator] `)`
[1451:1452:  separator] `;`
[1457:1459: identifier] `it`
[1459:1460:  separator] `.`
[1460:1464: identifier] `data`
[1465:1466:   operator] `=`
[1467:1474: identifier] `newData`
[1474:1475:  separator] `;`
[1476:1477:  separator] `}`
[1479:1520: doccomment] `/// This will peek at the top of the List`
[1521:1566: doccomment] `/// it will _not_ pop the value off the list.`
[1567:1605: doccomment] `/// Returns None if the list is empty.`
[1606:1609: identifier] `pub`
[1610:1614: identifier] `func`
[1615:1616:  separator] `(`
[1616:1618: identifier] `it`
[1618:1619:   operator] `:`
[1620:1621:   operator] `^`
[1621:1624: identifier] `mut`
[1625:1629: identifier] `List`
[1629:1630:   operator] `<`
[1630:1631: identifier] `T`
[1631:1632:   operator] `>`
[1632:1633:  separator] `)`
[1634:1637: identifier] `top`
[1637:1638:  separator] `(`
[1638:1639:  separator] `)`
[1640:1642:   operator] `->`
[1643:1649: identifier] `Option`
[1649:1650:   operator] `<`
[1650:1651: identifier] `T`
[1651:1652:   operator] `>`
[1653:1654:  separator] `{`
[1659:1661: identifier] `if`
[1662:1664: identifier] `it`
[1664:1665:  separator] `.`
[1665:1671: identifier] `length`
[1672:1674:   operator] `==`
[1675:1676:     number] `0`
[1677:1678:  separator] `{`
[1687:1693: identifier] `return`
[1694:1700: identifier] `Option`
[1700:1702:   operator] `::`
[1702:1706: identifier] `None`
[1706:1707:  separator] `;`
[1712:1713:  separator] `}`
[1718:1724: identifier] `return`
[1725:1731: identifier] `Option`
[1731:1733:   operator] `::`
[1733:1737: identifier] `Some`
[1737:1738:  separator] `(`
[1738:1740: identifier] `it`
[1740:1741:  separator] `.`
[1741:1744: identifier] `get`
[1744:1745:  separator] `(`
[1745:1747: identifier] `it`
[1747:1748:  separator] `.`
[1748:1754: identifier] `length`
[1755:1756:   operator] `-`
[1757:1758:     number] `1`
[1758:1759:  separator] `)`
[1759:1760:  separator] `)`
[1760:1761:  separator] `;`
[1762:1763:  separator] `}`
[1765:1814: doccomment] `/// Pop the last value T from the list. Note that`
[1815:1857: doccomment] `/// it does not clear out the popped item.`
[1858:1896: doccomment] `/// Returns None if the list is empty.`
[1897:1900: identifier] `pub`
[1901:1905: identifier] `func`
[1906:1907:  separator] `(`
[1907:1909: identifier] `it`
[1909:1910:   operator] `:`
[1911:1912:   operator] `^`
[1912:1915: identifier] `mut`
[1916:1920: identifier] `List`
[1920:1921:   operator] `<`
[1921:1922: identifier] `T`
[1922:1923:   operator] `>`
[1923:1924:  separator] `)`
[1925:1928: identifier] `pop`
[1928:1929:  separator] `(`
[1929:1930:  separator] `)`
[1931:1933:   operator] `->`
[1934:1940: identifier] `Option`
[1940:1941:   operator] `<`
[1941:1942: identifier] `T`
[1942:1943:   operator] `>`
[1944:1945:  separator] `{`
[1950:1952: identifier] `if`
[1953:1955: identifier] `it`
[1955:1956:  separator] `.`
[1956:1962: identifier] `length`
[1963:1965:   operator] `==`
[1966:1967:     number] `0`
[1968:1969:  separator] `{`
[1978:1984: identifier] `return`
[1985:1991: identifier] `Option`
[1991:1993:   operator] `::`
[1993:1997: identifier] `None`
[1997:1998:  separator] `;`
[2003:2004:  separator] `}`
[2009:2020: identifier] `poppedValue`
[2021:2022:   operator] `:`
[2022:2023:   operator] `=`
[2024:2026: identifier] `it`
[2026:2027:  separator] `.`
[2027:2030: identifier] `top`
[2030:2031:  separator] `(`
[2031:2032:  separator] `)`
[2032:2033:  separator] `;`
[2062:2064: identifier] `it`
[2064:2065:  separator] `.`
[2065:2071: identifier] `length`
[2072:2073:   operator] `-`
[2073:2074:   operator] `=`
[2075:2076:     number] `1`
[2076:2077:  separator] `;`
[2082:2088: identifier] `return`
[2089:2100: identifier] `poppedValue`
[2100:2101:  separator] `;`
[2102:2103:  separator] `}`
[2105:2149: doccomment] `/// Append a value of type T to the List. If`
[2150:2198: doccomment] `/// the length is at its capacity it will double`
[2199:2215: doccomment] `/// in capacity.`
[2216:2219: identifier] `pub`
[2220:2224: identifier] `func`
[2225:2226:  separator] `(`
[2226:2228: identifier] `it`
[2228:2229:   operator] `:`
[2230:2231:   operator] `^`
[2231:2234: identifier] `mut`
[2235:2239: identifier] `List`
[2239:2240:   operator] `<`
[2240:2241: identifier] `T`
[2241:2242:   operator] `>`
[2242:2243:  separator] `)`
[2244:2250: identifier] `append`
[2250:2251:  separator] `(`
[2251:2256: identifier] `value`
[2256:2257:   operator] `:`
[2258:2259: identifier] `T`
[2259:2260:  separator] `)`
[2261:2262:  separator] `{`
[2267:2269: identifier] `if`
[2270:2272: identifier] `it`
[2272:2273:  separator] `.`
[2273:2279: identifier] `length`
[2280:2282:   operator] `==`
[2283:2285: identifier] `it`
[2285:2286:  separator] `.`
[2286:2294: identifier] `capacity`
[2295:2296:  separator] `{`
[2305:2307: identifier] `it`
[2307:2308:  separator] `.`
[2308:2312: identifier] `grow`
[2312:2313:  separator] `(`
[2313:2314:  separator] `)`
[2314:2315:  separator] `;`
[2320:2321:  separator] `}`
[2327:2329: identifier] `it`
[2329:2330:  separator] `.`
[2330:2334: identifier] `data`
[2334:2335:  separator] `[`
[2335:2337: identifier] `it`
[2337:2338:  separator] `.`
[2338:2344: identifier] `length`
[2344:2345:  separator] `]`
[2346:2347:   operator] `=`
[2348:2353: identifier] `value`
[2353:2354:  separator] `;`
[2359:2361: identifier] `it`
[2361:2362:  separator] `.`
[2362:2368: identifier] `length`
[2369:2370:   operator] `+`
[2370:2371:   operator] `=`
[2372:2373:     number] `1`
[2373:2374:  separator] `;`
[2375:2376:  separator] `}`
 [32mEnded lexing[00m list (3.62ms)
 [32mStarted parsing[00m list
 [32mEnded parsing[00m list (1.52ms)
[01m[32mEnded read/lex/parse phase[00m (33.95ms)
[01m[32mStarted cyclic dependency check[00m
[01m[32mEnded cyclic dependency check[00m (0.01ms)
[01m[32mStarted construction phase[00m
 [32mStarted constructing module[00m __main
  [32mStarted constructing submodule[00m test-dynamic-string
  [32mEnded constructing submodule[00m test-dynamic-string (0.09ms)
 [32mEnded constructing module[00m __main (0.11ms)
 [32mStarted constructing module[00m std::io
  [32mStarted constructing submodule[00m file
  [32mEnded constructing submodule[00m file (0.10ms)
  [32mStarted constructing submodule[00m println
  [32mEnded constructing submodule[00m println (0.13ms)
 [32mEnded constructing module[00m std::io (0.27ms)
 [32mStarted constructing module[00m std::string
  [32mStarted constructing submodule[00m string
  [32mEnded constructing submodule[00m string (0.14ms)
  [32mStarted constructing submodule[00m util
  [32mEnded constructing submodule[00m util (0.10ms)
 [32mEnded constructing module[00m std::string (0.27ms)
 [32mStarted constructing module[00m std::mem
  [32mStarted constructing submodule[00m mem
  [32mEnded constructing submodule[00m mem (0.08ms)
  [32mStarted constructing submodule[00m raw
  [32mEnded constructing submodule[00m raw (0.02ms)
 [32mEnded constructing module[00m std::mem (0.13ms)
 [32mStarted constructing module[00m std::unicode::utf8
  [32mStarted constructing submodule[00m coding
  [32mEnded constructing submodule[00m coding (0.29ms)
 [32mEnded constructing module[00m std::unicode::utf8 (0.31ms)
 [32mStarted constructing module[00m std::adt
  [32mStarted constructing submodule[00m list
  [32mEnded constructing submodule[00m list (0.14ms)
 [32mEnded constructing module[00m std::adt (0.16ms)
[01m[32mEnded construction phase[00m (1.34ms)
[01m[32mStarted resolve phase[00m
 [32mStarted resolving module[00m std::mem
 [32mEnded resolving module[00m std::mem (0.26ms)
This scope:
 RawArray (type)
 allocArray (function)
 copyArray (function)
 free (function)
 freeArray (function)
 rawAlloc (function)
 rawFree (function)
 alloc (function)
Parent scope:
  s32 (type)
  s128 (type)
  u32 (type)
  bool (type)
  void (type)
  ype(18) (type)
  u8 (type)
  f64 (type)
  uintptr (type)
  rune (type)
  int (type)
  uint (type)
  s64 (type)
  u16 (type)
  u64 (type)
  u128 (type)
  f32 (type)
  f128 (type)
  s8 (type)
  s16 (type)
  string (type)
  panic (function)
  Option (type)
 [32mStarted resolving module[00m std::unicode::utf8
 [32mEnded resolving module[00m std::unicode::utf8 (0.56ms)
This scope:
 numBytes (function)
 decode (function)
 encode (function)
 TRAILING_BYTES (variable)
 OFFSETS (variable)
 numRunes (function)
Parent scope:
  f64 (type)
  uintptr (type)
  rune (type)
  u8 (type)
  u16 (type)
  u64 (type)
  u128 (type)
  f32 (type)
  f128 (type)
  int (type)
  uint (type)
  s64 (type)
  s16 (type)
  string (type)
  panic (function)
  Option (type)
  s8 (type)
  s128 (type)
  u32 (type)
  bool (type)
  void (type)
  ype(18) (type)
  s32 (type)
 [32mStarted resolving module[00m std::adt
 [32mEnded resolving module[00m std::adt (0.34ms)
This scope:
 List (type)
 BASE_CAPACITY (variable)
Parent scope:
  s64 (type)
  u16 (type)
  u64 (type)
  u128 (type)
  f32 (type)
  f128 (type)
  int (type)
  uint (type)
  s8 (type)
  s16 (type)
  string (type)
  panic (function)
  Option (type)
  s32 (type)
  s128 (type)
  u32 (type)
  bool (type)
  void (type)
  ype(18) (type)
  u8 (type)
  f64 (type)
  uintptr (type)
  rune (type)
 [32mStarted resolving module[00m std::string
 [32mEnded resolving module[00m std::string (0.45ms)
This scope:
 compare (function)
 String (type)
 contains (function)
 hasPrefix (function)
 hasSuffix (function)
Parent scope:
  f64 (type)
  uintptr (type)
  rune (type)
  u8 (type)
  u16 (type)
  u64 (type)
  u128 (type)
  f32 (type)
  f128 (type)
  int (type)
  uint (type)
  s64 (type)
  s16 (type)
  string (type)
  panic (function)
  Option (type)
  s8 (type)
  s128 (type)
  u32 (type)
  bool (type)
  void (type)
  ype(18) (type)
  s32 (type)
 [32mStarted resolving module[00m std::io
 [32mEnded resolving module[00m std::io (0.38ms)
This scope:
 FILE (type)
 FileMode (type)
 Path (type)
 println (function)
 print (function)
 printDynamicString (function)
 printRune (function)
 printInt (function)
 printUint (function)
 File (type)
 printByte (function)
Parent scope:
  s8 (type)
  s16 (type)
  string (type)
  panic (function)
  Option (type)
  s32 (type)
  s128 (type)
  u32 (type)
  bool (type)
  void (type)
  ype(18) (type)
  u8 (type)
  f64 (type)
  uintptr (type)
  rune (type)
  s64 (type)
  u16 (type)
  u64 (type)
  u128 (type)
  f32 (type)
  f128 (type)
  int (type)
  uint (type)
 [32mStarted resolving module[00m __main
 [32mEnded resolving module[00m __main (0.13ms)
This scope:
 main (function)
Parent scope:
  u128 (type)
  f32 (type)
  f128 (type)
  int (type)
  uint (type)
  s64 (type)
  u16 (type)
  u64 (type)
  panic (function)
  Option (type)
  s8 (type)
  s16 (type)
  string (type)
  bool (type)
  void (type)
  ype(18) (type)
  s32 (type)
  s128 (type)
  u32 (type)
  rune (type)
  u8 (type)
  f64 (type)
  uintptr (type)
[01m[32mEnded resolve phase[00m (3.35ms)
[01m[32mStarted inference phase[00m
 [32mStarted inferring submodule[00m mem
 [32mEnded inferring submodule[00m mem (0.91ms)
 [32mStarted inferring submodule[00m raw
 [32mEnded inferring submodule[00m raw (0.10ms)
 [32mStarted inferring submodule[00m file
 [32mEnded inferring submodule[00m file (0.56ms)
 [32mStarted inferring submodule[00m coding
 [32mEnded inferring submodule[00m coding (9.69ms)
 [32mStarted inferring submodule[00m list
 [32mEnded inferring submodule[00m list (5.75ms)
 [32mStarted inferring submodule[00m string
 [32mEnded inferring submodule[00m string (8.52ms)
 [32mStarted inferring submodule[00m util
 [32mEnded inferring submodule[00m util (0.95ms)
 [32mStarted inferring submodule[00m println
 [32mEnded inferring submodule[00m println (1.04ms)
 [32mStarted inferring submodule[00m test-dynamic-string
 [32mEnded inferring submodule[00m test-dynamic-string (1.78ms)
AST of submodule `__main/test-dynamic-string`:
([34mUseDirective[00m: std::io[00m)
([34mUseDirective[00m: std::string[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m main[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: test[00m [34m^mut String[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: from[00m)[00m ([34mStringLiteral[00m:       [33mhello [00m[00m [34mstring[00m)[00m [34m^mut String[00m)[00m)[00m 
	[00m ([34mDeferStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: destroy[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printDynamicString[00m)[00m ([34mVariableAccessExpr[00m: test[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mRuneLiteral[00m:  [33mw[00m[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mRuneLiteral[00m:  [33mo[00m[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: concat[00m)[00m ([34mStringLiteral[00m:    [33mrld[00m[00m [34mstring[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printDynamicString[00m)[00m ([34mVariableAccessExpr[00m: test[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: poppedValue[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: println[00m)[00m ([34mStringLiteral[00m:              [33mjust popped: [00m[00m [34mstring[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m unwrap[00m)[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: println[00m)[00m ([34mStringLiteral[00m: [33m[00m[00m [34mstring[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printDynamicString[00m)[00m ([34mVariableAccessExpr[00m: test[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: length[00m)[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: poppedValue[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m unwrap[00m)[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mRuneLiteral[00m:  [33m京[00m[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: value[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mRuneLiteral[00m:   [33m[00m[36m\n[33m[00m[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m unwrap[00m)[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::io/file`:
([34mUseDirective[00m: std::mem[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: FILE = struct {})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m fopen[00m ([34mVariableDecl[00m: ([34mVariable[00m: loc[00m [34m^u8[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: mode[00m [34m^u8[00m)[00m)[00m :[00m [34m^FILE[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m fseek[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: offset[00m [34muint[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: whence[00m [34muint[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m ftell[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m :[00m [34muint[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m rewind[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m fread[00m ([34mVariableDecl[00m: ([34mVariable[00m: where[00m [34m^u8[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: sz[00m [34muint[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: dunno[00m [34muint[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m fclose[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m getenv[00m ([34mVariableDecl[00m: ([34mVariable[00m: what[00m [34m^u8[00m)[00m)[00m :[00m [34m^u8[00m nil[00m)[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: FileMode = enum {Read: (), Write: (), Append: ()})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m getLegacyMode[00m :[00m [34mstring[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mVariableAccessExpr[00m: f[00m)[00m ([34mEnumLiteral[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStringLiteral[00m:  [33mr[00m[00m [34mstring[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mVariableAccessExpr[00m: f[00m)[00m ([34mEnumLiteral[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStringLiteral[00m:  [33mw[00m[00m [34mstring[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mVariableAccessExpr[00m: f[00m)[00m ([34mEnumLiteral[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStringLiteral[00m:  [33ma[00m[00m [34mstring[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mStringLiteral[00m:  [33mr[00m[00m [34mstring[00m)[00m)[00m)[00m)[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: Path = struct {location: string})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m new[00m ([34mVariableDecl[00m: ([34mVariable[00m: location[00m [34mstring[00m)[00m)[00m :[00m [34m^mut Path[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m p[00m [34m^mut Path[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<Path>[00m alloc[00m)[00m [34m^mut Path[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: p[00m)[00m)[00m member[00m location[00m)[00m  =[00m ([34mVariableAccessExpr[00m: location[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: p[00m)[00m)[00m)[00m)[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: File = struct {name: string, path: ^mut Path, handle: ^FILE})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m open[00m ([34mVariableDecl[00m: ([34mVariable[00m: path[00m [34m^mut Path[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: mode[00m [34mFileMode[00m)[00m)[00m :[00m [34m^mut File[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m f[00m [34m^mut File[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<File>[00m alloc[00m)[00m [34m^mut File[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: f[00m)[00m)[00m member[00m path[00m)[00m  =[00m ([34mVariableAccessExpr[00m: path[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: f[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m readToString[00m :[00m [34mstring[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: f[00m)[00m)[00m member[00m name[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m close[00m :[00m [34mvoid[00m ([34mBlock[00m)[00m)[00m)

AST of submodule `std::io/println`:
([34mUseDirective[00m: std::unicode::utf8[00m)
([34mUseDirective[00m: std::string[00m)
([34mUseDirective[00m: std::mem[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m printf[00m ([34mVariableDecl[00m: ([34mVariable[00m: fmt[00m [34m^u8[00m)[00m)[00m :[00m [34mint[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m println[00m ([34mVariableDecl[00m: ([34mVariable[00m: message[00m [34mstring[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: message[00m)[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:   [33m[00m[36m\n[33m[00m[00m [34m^u8[00m)[00m [34mint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:       [33m%.*s[00m[36m\n[33m[00m[00m [34m^u8[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: message[00m)[00m)[00m ([34mReferenceToExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: message[00m)[00m index[00m ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m [34m&u8[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m print[00m ([34mVariableDecl[00m: ([34mVariable[00m: message[00m [34mstring[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: message[00m)[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:     [33m%.*s[00m[00m [34m^u8[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: message[00m)[00m)[00m ([34mReferenceToExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: message[00m)[00m index[00m ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m [34m&u8[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printDynamicString[00m ([34mVariableDecl[00m: ([34mVariable[00m: s[00m [34m^String[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: length[00m)[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: at[00m)[00m ([34mVariableAccessExpr[00m: idx[00m)[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mRuneLiteral[00m:   [33m[00m[36m\n[33m[00m[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printRune[00m ([34mVariableDecl[00m: ([34mVariable[00m: r[00m [34mrune[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m rPtr[00m [34m^u8[00m)[00m  =[00m ([34mCastExpr[00m: ([34mCastExpr[00m: ([34mReferenceToExpr[00m: ([34mVariableAccessExpr[00m: r[00m)[00m [34m&rune[00m)[00m [34muintptr[00m)[00m [34m^u8[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: rCast[00m [34m[]rune[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mVariableAccessExpr[00m: r[00m)[00m ,[00m [34m[]rune[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: numBytes[00m [34muint[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: numBytes[00m)[00m ([34mVariableAccessExpr[00m: rCast[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:     [33m%.*s[00m[00m [34m^u8[00m)[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: numBytes[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m ([34mVariableAccessExpr[00m: rPtr[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printByte[00m ([34mVariableDecl[00m: ([34mVariable[00m: byte[00m [34mu8[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:   [33m%c[00m[00m [34m^u8[00m)[00m ([34mVariableAccessExpr[00m: byte[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printInt[00m ([34mVariableDecl[00m: ([34mVariable[00m: num[00m [34mint[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:    [33m%zd[00m[00m [34m^u8[00m)[00m ([34mVariableAccessExpr[00m: num[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printUint[00m ([34mVariableDecl[00m: ([34mVariable[00m: num[00m [34muint[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:    [33m%zu[00m[00m [34m^u8[00m)[00m ([34mVariableAccessExpr[00m: num[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::string/string`:
([34mUseDirective[00m: std::adt[00m)
([34mUseDirective[00m: std::mem[00m)
([34mUseDirective[00m: std::unicode::utf8[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: String = struct {data: ^mut List<rune>})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m from[00m ([34mVariableDecl[00m: ([34mVariable[00m: source[00m [34mstring[00m)[00m)[00m :[00m [34m^mut String[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: str[00m [34m^mut String[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: withCapacity[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m [34m^mut String[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: char[00m [34m[]u8[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: source[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m ,[00m [34m[]u8[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: decodedChar[00m [34m[]rune[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mrune[00m)[00m ,[00m [34m[]rune[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: decodeChar[00m [34muint[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: decode[00m)[00m ([34mVariableAccessExpr[00m: decodedChar[00m)[00m ([34mVariableAccessExpr[00m: char[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: decodedChar[00m)[00m index[00m ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: str[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m withCapacity[00m ([34mVariableDecl[00m: ([34mVariable[00m: size[00m [34muint[00m)[00m)[00m :[00m [34m^mut String[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: str[00m [34m^mut String[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<String>[00m alloc[00m)[00m [34m^mut String[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: str[00m)[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m data[00m :[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m newWithCapacity[00m)[00m ([34mVariableAccessExpr[00m: size[00m)[00m [34m^mut List<rune>[00m)[00m ,[00m [34mString[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mVariableAccessExpr[00m: size[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mRuneLiteral[00m:   [33m[00m[36m\0[33m[00m[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: str[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m clear[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: length[00m)[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m pop[00m :[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: length[00m)[00m [34muint[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mEnumLiteral[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m concat[00m ([34mVariableDecl[00m: ([34mVariable[00m: other[00m [34mstring[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: other[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: otherRunePointer[00m [34muintptr[00m)[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: other[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m [34muintptr[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: otherRunePointer[00m)[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m append[00m ([34mVariableDecl[00m: ([34mVariable[00m: char[00m [34mrune[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m append[00m)[00m ([34mVariableAccessExpr[00m: char[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m at[00m ([34mVariableDecl[00m: ([34mVariable[00m: index[00m [34muint[00m)[00m)[00m :[00m [34mrune[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m get[00m)[00m ([34mVariableAccessExpr[00m: index[00m)[00m [34mrune[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m length[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m getLength[00m)[00m [34muint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m destroy[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m destroy[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<String>[00m free[00m)[00m ([34mVariableAccessExpr[00m: a[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::string/util`:
([34mFunctionDecl[00m: ([34mFunction[00m: [00m contains[00m ([34mVariableDecl[00m: ([34mVariable[00m: haystack[00m [34mstring[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: needle[00m [34mstring[00m)[00m)[00m :[00m [34mbool[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: haystack[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: needle[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m count[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: haystack[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: haystack[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: needle[00m)[00m index[00m ([34mVariableAccessExpr[00m: count[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: count[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mVariableAccessExpr[00m: count[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mVariableAccessExpr[00m: count[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: needle[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mtrue[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m hasPrefix[00m ([34mVariableDecl[00m: ([34mVariable[00m: source[00m [34mstring[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: prefix[00m [34mstring[00m)[00m)[00m :[00m [34mbool[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: prefix[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: prefix[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_NOT_EQ[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: source[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: prefix[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mtrue[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m hasSuffix[00m ([34mVariableDecl[00m: ([34mVariable[00m: source[00m [34mstring[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: suffix[00m [34mstring[00m)[00m)[00m :[00m [34mbool[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: suffix[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: suffix[00m)[00m)[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: suffix[00m)[00m)[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_NOT_EQ[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: source[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: suffix[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mtrue[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m compare[00m ([34mVariableDecl[00m: ([34mVariable[00m: a[00m [34mstring[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: b[00m [34mstring[00m)[00m)[00m :[00m [34mbool[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_NOT_EQ[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: a[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: b[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: a[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_NOT_EQ[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: a[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: b[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mtrue[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::mem/raw`:
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m malloc[00m ([34mVariableDecl[00m: ([34mVariable[00m: size[00m [34muint[00m)[00m)[00m :[00m [34m^void[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m free[00m ([34mVariableDecl[00m: ([34mVariable[00m: ptr[00m [34m^void[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m rawAlloc[00m ([34mVariableDecl[00m: ([34mVariable[00m: bytes[00m [34muint[00m)[00m)[00m :[00m [34muintptr[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: malloc[00m)[00m ([34mVariableAccessExpr[00m: bytes[00m)[00m [34m^void[00m)[00m [34muintptr[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m rawFree[00m ([34mVariableDecl[00m: ([34mVariable[00m: ptr[00m [34muintptr[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: free[00m)[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: ptr[00m)[00m [34m^void[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::mem/mem`:
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m alloc[00m :[00m [34m^mut T[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawAlloc[00m)[00m ([34mSizeofExpr[00m: [34mT[00m)[00m [34muintptr[00m)[00m [34m^mut T[00m)[00m)[00m)[00m)[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: RawArray = struct {size: uint, ptr: ^u8})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m allocArray[00m ([34mVariableDecl[00m: ([34mVariable[00m: num[00m [34muint[00m)[00m)[00m :[00m [34m[]T[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: rawPtr[00m [34m^u8[00m)[00m  =[00m ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawAlloc[00m)[00m ([34mBinaryExpr[00m: BINOP_MUL[00m ([34mSizeofExpr[00m: [34mT[00m)[00m ([34mVariableAccessExpr[00m: num[00m)[00m)[00m [34muintptr[00m)[00m [34m^u8[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: rawArray[00m [34mRawArray[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m size[00m :[00m ([34mVariableAccessExpr[00m: num[00m)[00m ,[00m 
	[00m ptr[00m :[00m ([34mVariableAccessExpr[00m: rawPtr[00m)[00m ,[00m [34mRawArray[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: arrPtr[00m [34m^[]T[00m)[00m  =[00m ([34mCastExpr[00m: ([34mCastExpr[00m: ([34mPointerToExpr[00m: ([34mVariableAccessExpr[00m: rawArray[00m)[00m [34m^RawArray[00m)[00m [34muintptr[00m)[00m [34m^[]T[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: arrPtr[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m copyArray[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m dest[00m [34m[]T[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]T[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: num[00m [34muint[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m max[00m [34muint[00m)[00m  =[00m ([34mVariableAccessExpr[00m: num[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER[00m ([34mVariableAccessExpr[00m: max[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mVariableAccessExpr[00m: max[00m)[00m  =[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER[00m ([34mVariableAccessExpr[00m: max[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mVariableAccessExpr[00m: max[00m)[00m  =[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mVariableAccessExpr[00m: max[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m  =[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: i[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m free[00m ([34mVariableDecl[00m: ([34mVariable[00m: ptr[00m [34m^T[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawFree[00m)[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: ptr[00m)[00m [34muintptr[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m freeArray[00m ([34mVariableDecl[00m: ([34mVariable[00m: array[00m [34m[]T[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m rawArray[00m [34mRawArray[00m)[00m  =[00m ([34mDerefAccessExpr[00m: ([34mCastExpr[00m: ([34mCastExpr[00m: ([34mReferenceToExpr[00m: ([34mVariableAccessExpr[00m: array[00m)[00m [34m&[]T[00m)[00m [34muintptr[00m)[00m [34m^RawArray[00m)[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawFree[00m)[00m ([34mCastExpr[00m: ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: rawArray[00m)[00m member[00m ptr[00m)[00m [34muintptr[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::unicode::utf8/coding`:
([34mVariableDecl[00m: ([34mVariable[00m: TRAILING_BYTES[00m [34m[]u8[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m5[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m5[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m5[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m5[00m [34mu8[00m)[00m ,[00m [34m[]u8[00m)[00m)
([34mVariableDecl[00m: ([34mVariable[00m: OFFSETS[00m [34m[]u32[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m12416[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m925824[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m63447168[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4194836608[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2181570688[00m [34mu32[00m)[00m ,[00m [34m[]u32[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m numRunes[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]u8[00m)[00m)[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m num[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: nb[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: TRAILING_BYTES[00m)[00m index[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: i[00m)[00m BINOP_ADD[00m  =[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: nb[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m numBytes[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]rune[00m)[00m)[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m num[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: ch[00m [34mrune[00m)[00m  =[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m2048[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m65536[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m1114112[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m4[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: i[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m decode[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m dest[00m [34m[]rune[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]u8[00m)[00m)[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m srcIndex[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m destIndex[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: nb[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: TRAILING_BYTES[00m)[00m index[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m ([34mVariableAccessExpr[00m: nb[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m ch[00m [34mrune[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34mrune[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: nb[00m)[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_ADD[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_BIT_LEFT[00m  =[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: nb[00m)[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_ADD[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_BIT_LEFT[00m  =[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: nb[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_ADD[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_BIT_LEFT[00m  =[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_ADD[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_SUB[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: OFFSETS[00m)[00m index[00m ([34mVariableAccessExpr[00m: nb[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m  =[00m ([34mVariableAccessExpr[00m: ch[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m encode[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m dest[00m [34m[]u8[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]rune[00m)[00m)[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m srcIndex[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m destIndex[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: ch[00m [34mrune[00m)[00m  =[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m2048[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m192[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m65536[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m12[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m224[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m1114112[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m18[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m240[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m12[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m4[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::adt/list`:
([34mUseDirective[00m: std::mem[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: List = struct<T> {data: ^mut T, length: uint, capacity: uint})[00m)
([34mVariableDecl[00m: ([34mVariable[00m: BASE_CAPACITY[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m4[00m [34muint[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m new[00m :[00m [34m^mut List<T>[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<T>[00m newWithCapacity[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m [34m^mut List<T>[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m newWithCapacity[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m cap[00m [34muint[00m)[00m)[00m :[00m [34m^mut List<T>[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_LESS_EQ[00m ([34mVariableAccessExpr[00m: cap[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mVariableAccessExpr[00m: cap[00m)[00m  =[00m ([34mVariableAccessExpr[00m: BASE_CAPACITY[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: size[00m [34muint[00m)[00m  =[00m ([34mBinaryExpr[00m: BINOP_MUL[00m ([34mSizeofExpr[00m: [34mT[00m)[00m ([34mVariableAccessExpr[00m: cap[00m)[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: res[00m [34m^mut List<T>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<List<T>>[00m alloc[00m)[00m [34m^mut List<T>[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: res[00m)[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m data[00m :[00m ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawAlloc[00m)[00m ([34mVariableAccessExpr[00m: size[00m)[00m [34muintptr[00m)[00m [34m^mut T[00m)[00m ,[00m 
	[00m length[00m :[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m ,[00m 
	[00m capacity[00m :[00m ([34mVariableAccessExpr[00m: cap[00m)[00m ,[00m [34mList[00m [34m<[00m [34mT[00m [34m>[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: res[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m destroy[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawFree[00m)[00m ([34mCastExpr[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m [34muintptr[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<List<T>>[00m free[00m)[00m ([34mVariableAccessExpr[00m: it[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m toRawPointer[00m :[00m [34m^T[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m get[00m ([34mVariableDecl[00m: ([34mVariable[00m: index[00m [34muint[00m)[00m)[00m :[00m [34mT[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: index[00m)[00m ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: it[00m)[00m member[00m length[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: panic[00m)[00m ([34mStringLiteral[00m:                          [33mList.get: index >= length[00m[00m [34mstring[00m)[00m [34mvoid[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: it[00m)[00m member[00m data[00m)[00m index[00m ([34mVariableAccessExpr[00m: index[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m getLength[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: it[00m)[00m member[00m length[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m getCapacity[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: it[00m)[00m member[00m capacity[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m grow[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: oldData[00m [34m^mut T[00m)[00m  =[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m capacity[00m)[00m BINOP_MUL[00m  =[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: newData[00m [34m^mut T[00m)[00m  =[00m ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawAlloc[00m)[00m ([34mBinaryExpr[00m: BINOP_MUL[00m ([34mSizeofExpr[00m: [34mT[00m)[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m capacity[00m)[00m)[00m [34muintptr[00m)[00m [34m^mut T[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: newData[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m  =[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: oldData[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: i[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawFree[00m)[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: oldData[00m)[00m [34muintptr[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m  =[00m ([34mVariableAccessExpr[00m: newData[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m top[00m :[00m [34mOption[00m [34m<[00m [34mT[00m [34m>[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mEnumLiteral[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mEnumLiteral[00m: ([34mTupleLiteral[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<T>[00m get[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m [34mT[00m)[00m ,[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m pop[00m :[00m [34mOption[00m [34m<[00m [34mT[00m [34m>[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mEnumLiteral[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: poppedValue[00m [34mOption[00m [34m<[00m [34mT[00m [34m>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<T>[00m top[00m)[00m [34mOption[00m [34m<[00m [34mT[00m [34m>[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m BINOP_SUB[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: poppedValue[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m append[00m ([34mVariableDecl[00m: ([34mVariable[00m: value[00m [34mT[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m capacity[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<T>[00m grow[00m)[00m [34mvoid[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m index[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m)[00m  =[00m ([34mVariableAccessExpr[00m: value[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m)

[01m[32mEnded inference phase[00m (37.67ms)
[01m[32mStarted semantic analysis phase[00m
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.08ms)
 [32mEnded analysis pass[00m attribute (0.10ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.07ms)
 [32mEnded analysis pass[00m unreachable (0.08ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.08ms)
 [32mEnded analysis pass[00m break and next (0.09ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.07ms)
 [32mEnded analysis pass[00m deprecated (0.09ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.06ms)
 [32mEnded analysis pass[00m recusrive definition (0.08ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.18ms)
 [32mEnded analysis pass[00m type (0.20ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.07ms)
 [32mEnded analysis pass[00m immutable assign (0.08ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.08ms)
 [32mEnded analysis pass[00m use before declare (0.09ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.07ms)
 [32mEnded analysis pass[00m misc (0.08ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.07ms)
 [32mEnded analysis pass[00m reference (0.08ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.09ms)
 [32mEnded analysis pass[00m unused (0.11ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.07ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.09ms)
 [32mEnded analysis pass[00m attribute (0.19ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.06ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.08ms)
 [32mEnded analysis pass[00m unreachable (0.16ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.08ms)
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.05ms)
 [32mEnded analysis pass[00m break and next (0.17ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.06ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.08ms)
 [32mEnded analysis pass[00m deprecated (0.17ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.06ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.08ms)
 [32mEnded analysis pass[00m recusrive definition (0.17ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.15ms)
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.13ms)
 [32mEnded analysis pass[00m type (0.31ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.06ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.08ms)
 [32mEnded analysis pass[00m immutable assign (0.17ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.08ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.10ms)
 [32mEnded analysis pass[00m use before declare (0.20ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.05ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.08ms)
 [32mEnded analysis pass[00m misc (0.16ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.07ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.08ms)
 [32mEnded analysis pass[00m reference (0.18ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.07ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.10ms)
 [32mEnded analysis pass[00m unused (0.19ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.14ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.12ms)
 [32mEnded analysis pass[00m attribute (0.29ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.14ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.10ms)
 [32mEnded analysis pass[00m unreachable (0.28ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.15ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.11ms)
 [32mEnded analysis pass[00m break and next (0.29ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.19ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.12ms)
 [32mEnded analysis pass[00m deprecated (0.36ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.12ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.09ms)
 [32mEnded analysis pass[00m recusrive definition (0.24ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.33ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.15ms)
 [32mEnded analysis pass[00m type (0.52ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.11ms)
 [32mEnded analysis pass[00m immutable assign (0.27ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.15ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.13ms)
 [32mEnded analysis pass[00m use before declare (0.31ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.12ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.10ms)
 [32mEnded analysis pass[00m misc (0.25ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.14ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.10ms)
 [32mEnded analysis pass[00m reference (0.27ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::string/string
[33m[01mwarning:[00m [string:22:3] Unused variable `decodeChar`
        decodeChar := utf8::decode(decodedChar, char);
        [32m[01m^[00m

  [32mEnded checking submodule[00m std::string/string (0.18ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.11ms)
 [32mEnded analysis pass[00m unused (0.32ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.06ms)
 [32mEnded analysis pass[00m attribute (0.12ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.06ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.01ms)
 [32mEnded analysis pass[00m unreachable (0.11ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.06ms)
 [32mEnded analysis pass[00m break and next (0.11ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.06ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m deprecated (0.11ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.06ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.01ms)
 [32mEnded analysis pass[00m recusrive definition (0.10ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.11ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m type (0.17ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.08ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m immutable assign (0.14ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.09ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m use before declare (0.15ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.06ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.01ms)
 [32mEnded analysis pass[00m misc (0.11ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.06ms)
 [32mEnded analysis pass[00m reference (0.11ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.08ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m unused (0.13ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.33ms)
 [32mEnded analysis pass[00m attribute (0.35ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.34ms)
 [32mEnded analysis pass[00m unreachable (0.36ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.33ms)
 [32mEnded analysis pass[00m break and next (0.35ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.33ms)
 [32mEnded analysis pass[00m deprecated (0.34ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.31ms)
 [32mEnded analysis pass[00m recusrive definition (0.32ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.60ms)
 [32mEnded analysis pass[00m type (0.61ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.32ms)
 [32mEnded analysis pass[00m immutable assign (0.34ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.38ms)
 [32mEnded analysis pass[00m use before declare (0.39ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.33ms)
 [32mEnded analysis pass[00m misc (0.34ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.33ms)
 [32mEnded analysis pass[00m reference (0.35ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.37ms)
 [32mEnded analysis pass[00m unused (0.38ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.15ms)
 [32mEnded analysis pass[00m attribute (0.16ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.13ms)
 [32mEnded analysis pass[00m unreachable (0.15ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.14ms)
 [32mEnded analysis pass[00m break and next (0.15ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.14ms)
 [32mEnded analysis pass[00m deprecated (0.15ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.13ms)
 [32mEnded analysis pass[00m recusrive definition (0.15ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.37ms)
 [32mEnded analysis pass[00m type (0.39ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.14ms)
 [32mEnded analysis pass[00m immutable assign (0.15ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.17ms)
 [32mEnded analysis pass[00m use before declare (0.19ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.13ms)
 [32mEnded analysis pass[00m misc (0.15ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.15ms)
 [32mEnded analysis pass[00m reference (0.17ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.17ms)
 [32mEnded analysis pass[00m unused (0.18ms)
[01m[32mEnded semantic analysis phase[00m (14.92ms)
[01m[32mStarted codegen phase[00m
 [32mStarted codegenning[00m __main
 [32mEnded codegenning[00m __main (5.03ms)
 [32mStarted codegenning[00m std::io
 [32mEnded codegenning[00m std::io (12.53ms)
 [32mStarted codegenning[00m std::string
 [32mEnded codegenning[00m std::string (23.01ms)
 [32mStarted codegenning[00m std::mem
 [32mEnded codegenning[00m std::mem (2.49ms)
 [32mStarted codegenning[00m std::unicode::utf8
 [32mEnded codegenning[00m std::unicode::utf8 (21.74ms)
 [32mStarted codegenning[00m std::adt
 [32mEnded codegenning[00m std::adt (9.61ms)
 [32mStarted codegenning[00m __runtime
 [32mEnded codegenning[00m __runtime (4.57ms)
 [32mStarted creating binary[00m
  [32mStarted creating object[00m __main
  [32mEnded creating object[00m __main (4.80ms)
  [32mStarted creating object[00m std::io
  [32mEnded creating object[00m std::io (5.74ms)
  [32mStarted creating object[00m std::string
  [32mEnded creating object[00m std::string (8.00ms)
  [32mStarted creating object[00m std::mem
  [32mEnded creating object[00m std::mem (1.22ms)
  [32mStarted creating object[00m std::unicode::utf8
  [32mEnded creating object[00m std::unicode::utf8 (4.14ms)
  [32mStarted creating object[00m std::adt
  [32mEnded creating object[00m std::adt (4.69ms)
  [32mStarted creating object[00m __runtime
  [32mEnded creating object[00m __runtime (3.39ms)
  [32mStarted linking[00m
cc [-fno-PIE -nodefaultlibs -lc -lm main-_M6__main.o main-_M3std_M2io.o main-_M3std_M6string.o main-_M3std_M3mem.o main-_M3std_M7unicode_M4utf8.o main-_M3std_M3adt.o main-_M9__runtime.o -o main]
  [32mEnded linking[00m (30.16ms)
 [32mEnded creating binary[00m (62.67ms)
[01m[32mEnded codegen phase[00m (142.85ms)
[32m[01mFinished build[00m (1 file(s), 242.19ms)
[01m[32mStarted lexing[00m runtime
[   1:   2:  separator] `[`
[   2:   3: identifier] `c`
[   3:   4:  separator] `]`
[   5:   9: identifier] `func`
[  10:  16: identifier] `printf`
[  16:  17:  separator] `(`
[  17:  20: identifier] `fmt`
[  20:  21:   operator] `:`
[  22:  23:   operator] `^`
[  23:  25: identifier] `u8`
[  25:  26:  separator] `,`
[  27:  28:  separator] `.`
[  28:  29:  separator] `.`
[  29:  30:  separator] `.`
[  30:  31:  separator] `)`
[  32:  34:   operator] `->`
[  35:  38: identifier] `int`
[  38:  39:  separator] `;`
[  40:  41:  separator] `[`
[  41:  42: identifier] `c`
[  42:  43:  separator] `]`
[  44:  48: identifier] `func`
[  49:  53: identifier] `exit`
[  53:  54:  separator] `(`
[  54:  58: identifier] `code`
[  58:  59:   operator] `:`
[  60:  61: identifier] `C`
[  61:  63:   operator] `::`
[  63:  66: identifier] `int`
[  66:  67:  separator] `)`
[  67:  68:  separator] `;`
[  70:  73: identifier] `pub`
[  74:  78: identifier] `func`
[  79:  84: identifier] `panic`
[  84:  85:  separator] `(`
[  85:  92: identifier] `message`
[  92:  93:   operator] `:`
[  94: 100: identifier] `string`
[ 100: 101:  separator] `)`
[ 102: 103:  separator] `{`
[ 105: 107: identifier] `if`
[ 108: 111: identifier] `len`
[ 111: 112:  separator] `(`
[ 112: 119: identifier] `message`
[ 119: 120:  separator] `)`
[ 121: 123:   operator] `==`
[ 124: 125:     number] `0`
[ 126: 127:  separator] `{`
[ 130: 131: identifier] `C`
[ 131: 133:   operator] `::`
[ 133: 139: identifier] `printf`
[ 139: 140:  separator] `(`
[ 140: 141: identifier] `c`
[ 142: 144:     string] `\n`
[ 145: 146:  separator] `)`
[ 146: 147:  separator] `;`
[ 149: 150:  separator] `}`
[ 151: 155: identifier] `else`
[ 156: 157:  separator] `{`
[ 160: 161: identifier] `C`
[ 161: 163:   operator] `::`
[ 163: 169: identifier] `printf`
[ 169: 170:  separator] `(`
[ 170: 171: identifier] `c`
[ 172: 185:     string] `panic: %.*s\n`
[ 186: 187:  separator] `,`
[ 188: 191: identifier] `len`
[ 191: 192:  separator] `(`
[ 192: 199: identifier] `message`
[ 199: 200:  separator] `)`
[ 200: 201:  separator] `,`
[ 202: 203:   operator] `&`
[ 203: 210: identifier] `message`
[ 210: 211:  separator] `[`
[ 211: 212:     number] `0`
[ 212: 213:  separator] `]`
[ 213: 214:  separator] `)`
[ 214: 215:  separator] `;`
[ 217: 218:  separator] `}`
[ 223: 224: identifier] `C`
[ 224: 226:   operator] `::`
[ 226: 230: identifier] `exit`
[ 230: 231:  separator] `(`
[ 231: 232:   operator] `-`
[ 232: 233:     number] `1`
[ 233: 234:  separator] `)`
[ 234: 235:  separator] `;`
[ 236: 237:  separator] `}`
[ 239: 242: identifier] `pub`
[ 243: 247: identifier] `type`
[ 248: 254: identifier] `Option`
[ 255: 259: identifier] `enum`
[ 259: 260:   operator] `<`
[ 260: 261: identifier] `T`
[ 261: 262:   operator] `>`
[ 263: 264:  separator] `{`
[ 269: 273: identifier] `Some`
[ 273: 274:  separator] `(`
[ 274: 275: identifier] `T`
[ 275: 276:  separator] `)`
[ 276: 277:  separator] `,`
[ 282: 286: identifier] `None`
[ 286: 287:  separator] `,`
[ 288: 289:  separator] `}`
[ 289: 290:  separator] `;`
[ 292: 295: identifier] `pub`
[ 296: 300: identifier] `func`
[ 301: 302:  separator] `(`
[ 302: 303: identifier] `o`
[ 303: 304:   operator] `:`
[ 305: 311: identifier] `Option`
[ 311: 312:   operator] `<`
[ 312: 313: identifier] `T`
[ 313: 314:   operator] `>`
[ 314: 315:  separator] `)`
[ 316: 322: identifier] `unwrap`
[ 322: 323:  separator] `(`
[ 323: 324:  separator] `)`
[ 325: 327:   operator] `->`
[ 328: 329: identifier] `T`
[ 330: 331:  separator] `{`
[ 336: 341: identifier] `match`
[ 342: 343: identifier] `o`
[ 344: 345:  separator] `{`
[ 354: 358: identifier] `Some`
[ 358: 359:  separator] `(`
[ 359: 360: identifier] `t`
[ 360: 361:  separator] `)`
[ 362: 364:   operator] `=>`
[ 365: 371: identifier] `return`
[ 372: 373: identifier] `t`
[ 373: 374:  separator] `,`
[ 383: 387: identifier] `None`
[ 388: 390:   operator] `=>`
[ 391: 396: identifier] `panic`
[ 396: 397:  separator] `(`
[ 398: 437:     string] `Option.unwrap: expected Some, have None`
[ 438: 439:  separator] `)`
[ 439: 440:  separator] `,`
[ 445: 446:  separator] `}`
[ 452: 455: identifier] `mut`
[ 456: 457: identifier] `a`
[ 457: 458:   operator] `:`
[ 459: 460: identifier] `T`
[ 460: 461:  separator] `;`
[ 466: 472: identifier] `return`
[ 473: 474: identifier] `a`
[ 474: 475:  separator] `;`
[ 476: 477:  separator] `}`
[01m[32mEnded lexing[00m runtime (1.47ms)
[01m[32mStarted parsing[00m runtime
[01m[32mEnded parsing[00m runtime (0.54ms)
[01m[32mStarted constructing module[00m __runtime
 [32mStarted constructing submodule[00m runtime
 [32mEnded constructing submodule[00m runtime (0.07ms)
[01m[32mEnded constructing module[00m __runtime (0.09ms)
[01m[32mStarted resolving module[00m __runtime
[01m[32mEnded resolving module[00m __runtime (0.21ms)
This scope:
 panic (function)
 Option (type)
Parent scope:
  s8 (type)
  s128 (type)
  u64 (type)
  uint (type)
  rune (type)
  int (type)
  uintptr (type)
  ype(18) (type)
  s16 (type)
  u8 (type)
  u128 (type)
  f32 (type)
  f64 (type)
  string (type)
  s32 (type)
  s64 (type)
  f128 (type)
  u16 (type)
  u32 (type)
  bool (type)
  void (type)
[01m[32mStarted inferring submodule[00m runtime
[01m[32mEnded inferring submodule[00m runtime (0.45ms)
[01m[32mStarted analysis pass[00m attribute
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.04ms)
[01m[32mEnded analysis pass[00m attribute (0.06ms)
[01m[32mStarted analysis pass[00m unreachable
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.04ms)
[01m[32mEnded analysis pass[00m unreachable (0.05ms)
[01m[32mStarted analysis pass[00m break and next
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.04ms)
[01m[32mEnded analysis pass[00m break and next (0.06ms)
[01m[32mStarted analysis pass[00m deprecated
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.04ms)
[01m[32mEnded analysis pass[00m deprecated (0.05ms)
[01m[32mStarted analysis pass[00m recusrive definition
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.03ms)
[01m[32mEnded analysis pass[00m recusrive definition (0.05ms)
[01m[32mStarted analysis pass[00m type
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.07ms)
[01m[32mEnded analysis pass[00m type (0.08ms)
[01m[32mStarted analysis pass[00m immutable assign
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.03ms)
[01m[32mEnded analysis pass[00m immutable assign (0.05ms)
[01m[32mStarted analysis pass[00m use before declare
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.05ms)
[01m[32mEnded analysis pass[00m use before declare (0.06ms)
[01m[32mStarted analysis pass[00m misc
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.03ms)
[01m[32mEnded analysis pass[00m misc (0.05ms)
[01m[32mStarted analysis pass[00m reference
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.04ms)
[01m[32mEnded analysis pass[00m reference (0.05ms)
[01m[32mStarted analysis pass[00m unused
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.04ms)
[01m[32mEnded analysis pass[00m unused (0.06ms)
[01m[32mStarted lexing[00m test-dynamic-string
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  12: identifier] `io`
[  13:  14:   operator] `#`
[  14:  17: identifier] `use`
[  18:  21: identifier] `std`
[  21:  23:   operator] `::`
[  23:  29: identifier] `string`
[  31:  34: identifier] `pub`
[  35:  39: identifier] `func`
[  40:  44: identifier] `main`
[  44:  45:  separator] `(`
[  45:  46:  separator] `)`
[  47:  49:   operator] `->`
[  50:  53: identifier] `int`
[  54:  55:  separator] `{`
[  57:  61: identifier] `test`
[  62:  63:   operator] `:`
[  63:  64:   operator] `=`
[  65:  71: identifier] `string`
[  71:  73:   operator] `::`
[  73:  79: identifier] `String`
[  79:  81:   operator] `::`
[  81:  85: identifier] `from`
[  85:  86:  separator] `(`
[  87:  93:     string] `hello `
[  94:  95:  separator] `)`
[  95:  96:  separator] `;`
[  98: 103: identifier] `defer`
[ 104: 108: identifier] `test`
[ 108: 109:  separator] `.`
[ 109: 116: identifier] `destroy`
[ 116: 117:  separator] `(`
[ 117: 118:  separator] `)`
[ 118: 119:  separator] `;`
[ 122: 124: identifier] `io`
[ 124: 126:   operator] `::`
[ 126: 144: identifier] `printDynamicString`
[ 144: 145:  separator] `(`
[ 145: 149: identifier] `test`
[ 149: 150:  separator] `)`
[ 150: 151:  separator] `;`
[ 154: 158: identifier] `test`
[ 158: 159:  separator] `.`
[ 159: 165: identifier] `append`
[ 165: 166:  separator] `(`
[ 166: 169:       rune] `'w'`
[ 169: 170:  separator] `)`
[ 170: 171:  separator] `;`
[ 173: 177: identifier] `test`
[ 177: 178:  separator] `.`
[ 178: 184: identifier] `append`
[ 184: 185:  separator] `(`
[ 185: 188:       rune] `'o'`
[ 188: 189:  separator] `)`
[ 189: 190:  separator] `;`
[ 192: 196: identifier] `test`
[ 196: 197:  separator] `.`
[ 197: 203: identifier] `concat`
[ 203: 204:  separator] `(`
[ 205: 208:     string] `rld`
[ 209: 210:  separator] `)`
[ 210: 211:  separator] `;`
[ 213: 215: identifier] `io`
[ 215: 217:   operator] `::`
[ 217: 235: identifier] `printDynamicString`
[ 235: 236:  separator] `(`
[ 236: 240: identifier] `test`
[ 240: 241:  separator] `)`
[ 241: 242:  separator] `;`
[ 245: 256: identifier] `poppedValue`
[ 257: 258:   operator] `:`
[ 258: 259:   operator] `=`
[ 260: 264: identifier] `test`
[ 264: 265:  separator] `.`
[ 265: 268: identifier] `pop`
[ 268: 269:  separator] `(`
[ 269: 270:  separator] `)`
[ 270: 271:  separator] `;`
[ 274: 276: identifier] `io`
[ 276: 278:   operator] `::`
[ 278: 285: identifier] `println`
[ 285: 286:  separator] `(`
[ 287: 300:     string] `just popped: `
[ 301: 302:  separator] `)`
[ 302: 303:  separator] `;`
[ 305: 307: identifier] `io`
[ 307: 309:   operator] `::`
[ 309: 318: identifier] `printRune`
[ 318: 319:  separator] `(`
[ 319: 330: identifier] `poppedValue`
[ 330: 331:  separator] `.`
[ 331: 337: identifier] `unwrap`
[ 337: 338:  separator] `(`
[ 338: 339:  separator] `)`
[ 339: 340:  separator] `)`
[ 340: 341:  separator] `;`
[ 343: 345: identifier] `io`
[ 345: 347:   operator] `::`
[ 347: 354: identifier] `println`
[ 354: 355:  separator] `(`
[ 356: 356:     string] ``
[ 357: 358:  separator] `)`
[ 358: 359:  separator] `;`
[ 362: 364: identifier] `io`
[ 364: 366:   operator] `::`
[ 366: 384: identifier] `printDynamicString`
[ 384: 385:  separator] `(`
[ 385: 389: identifier] `test`
[ 389: 390:  separator] `)`
[ 390: 391:  separator] `;`
[ 394: 397: identifier] `mut`
[ 398: 401: identifier] `idx`
[ 402: 403:   operator] `:`
[ 403: 404:   operator] `=`
[ 405: 409: identifier] `uint`
[ 409: 410:  separator] `(`
[ 410: 411:     number] `0`
[ 411: 412:  separator] `)`
[ 412: 413:  separator] `;`
[ 415: 418: identifier] `for`
[ 419: 422: identifier] `idx`
[ 423: 424:   operator] `<`
[ 425: 429: identifier] `test`
[ 429: 430:  separator] `.`
[ 430: 436: identifier] `length`
[ 436: 437:  separator] `(`
[ 437: 438:  separator] `)`
[ 439: 440:  separator] `{`
[ 443: 454: identifier] `poppedValue`
[ 455: 456:   operator] `:`
[ 456: 457:   operator] `=`
[ 458: 462: identifier] `test`
[ 462: 463:  separator] `.`
[ 463: 466: identifier] `pop`
[ 466: 467:  separator] `(`
[ 467: 468:  separator] `)`
[ 468: 469:  separator] `;`
[ 472: 474: identifier] `io`
[ 474: 476:   operator] `::`
[ 476: 485: identifier] `printRune`
[ 485: 486:  separator] `(`
[ 486: 497: identifier] `poppedValue`
[ 497: 498:  separator] `.`
[ 498: 504: identifier] `unwrap`
[ 504: 505:  separator] `(`
[ 505: 506:  separator] `)`
[ 506: 507:  separator] `)`
[ 507: 508:  separator] `;`
[ 511: 514: identifier] `idx`
[ 515: 516:   operator] `+`
[ 516: 517:   operator] `=`
[ 518: 519:     number] `1`
[ 519: 520:  separator] `;`
[ 522: 523:  separator] `}`
[ 526: 530: identifier] `test`
[ 530: 531:  separator] `.`
[ 531: 534: identifier] `pop`
[ 534: 535:  separator] `(`
[ 535: 536:  separator] `)`
[ 536: 537:  separator] `;`
[ 548: 552: identifier] `test`
[ 552: 553:  separator] `.`
[ 553: 559: identifier] `append`
[ 559: 560:  separator] `(`
[ 560: 563:       rune] `'京'`
[ 563: 564:  separator] `)`
[ 564: 565:  separator] `;`
[ 567: 572: identifier] `value`
[ 573: 574:   operator] `:`
[ 574: 575:   operator] `=`
[ 576: 580: identifier] `test`
[ 580: 581:  separator] `.`
[ 581: 584: identifier] `pop`
[ 584: 585:  separator] `(`
[ 585: 586:  separator] `)`
[ 586: 587:  separator] `;`
[ 590: 592: identifier] `io`
[ 592: 594:   operator] `::`
[ 594: 603: identifier] `printRune`
[ 603: 604:  separator] `(`
[ 604: 608:       rune] `'\n'`
[ 608: 609:  separator] `)`
[ 609: 610:  separator] `;`
[ 612: 614: identifier] `io`
[ 614: 616:   operator] `::`
[ 616: 625: identifier] `printRune`
[ 625: 626:  separator] `(`
[ 626: 631: identifier] `value`
[ 631: 632:  separator] `.`
[ 632: 638: identifier] `unwrap`
[ 638: 639:  separator] `(`
[ 639: 640:  separator] `)`
[ 640: 641:  separator] `)`
[ 641: 642:  separator] `;`
[ 645: 651: identifier] `return`
[ 652: 653:     number] `0`
[ 653: 654:  separator] `;`
[ 655: 656:  separator] `}`
[01m[32mEnded lexing[00m test-dynamic-string (1.52ms)
[01m[32mStarted parsing[00m test-dynamic-string
[01m[32mEnded parsing[00m test-dynamic-string (1.21ms)
[01m[32mStarted read/lex/parse phase[00m
 [32mStarted lexing[00m file
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  13: identifier] `mem`
[  15:  19: identifier] `type`
[  20:  24: identifier] `FILE`
[  25:  31: identifier] `struct`
[  32:  33:  separator] `{`
[  33:  34:  separator] `}`
[  34:  35:  separator] `;`
[  37:  38:  separator] `[`
[  38:  39: identifier] `c`
[  39:  40:  separator] `]`
[  41:  45: identifier] `func`
[  46:  51: identifier] `fopen`
[  51:  52:  separator] `(`
[  52:  55: identifier] `loc`
[  55:  56:   operator] `:`
[  57:  58:   operator] `^`
[  58:  60: identifier] `u8`
[  60:  61:  separator] `,`
[  62:  66: identifier] `mode`
[  66:  67:   operator] `:`
[  68:  69:   operator] `^`
[  69:  71: identifier] `u8`
[  71:  72:  separator] `)`
[  73:  75:   operator] `->`
[  76:  77:   operator] `^`
[  77:  81: identifier] `FILE`
[  81:  82:  separator] `;`
[  83:  84:  separator] `[`
[  84:  85: identifier] `c`
[  85:  86:  separator] `]`
[  87:  91: identifier] `func`
[  92:  97: identifier] `fseek`
[  97:  98:  separator] `(`
[  98: 104: identifier] `handle`
[ 104: 105:   operator] `:`
[ 106: 107:   operator] `^`
[ 107: 111: identifier] `FILE`
[ 111: 112:  separator] `,`
[ 113: 119: identifier] `offset`
[ 119: 120:   operator] `:`
[ 121: 125: identifier] `uint`
[ 125: 126:  separator] `,`
[ 127: 133: identifier] `whence`
[ 133: 134:   operator] `:`
[ 135: 139: identifier] `uint`
[ 139: 140:  separator] `)`
[ 140: 141:  separator] `;`
[ 142: 143:  separator] `[`
[ 143: 144: identifier] `c`
[ 144: 145:  separator] `]`
[ 146: 150: identifier] `func`
[ 151: 156: identifier] `ftell`
[ 156: 157:  separator] `(`
[ 157: 163: identifier] `handle`
[ 163: 164:   operator] `:`
[ 165: 166:   operator] `^`
[ 166: 170: identifier] `FILE`
[ 170: 171:  separator] `)`
[ 172: 174:   operator] `->`
[ 175: 179: identifier] `uint`
[ 179: 180:  separator] `;`
[ 181: 182:  separator] `[`
[ 182: 183: identifier] `c`
[ 183: 184:  separator] `]`
[ 185: 189: identifier] `func`
[ 190: 196: identifier] `rewind`
[ 196: 197:  separator] `(`
[ 197: 203: identifier] `handle`
[ 203: 204:   operator] `:`
[ 205: 206:   operator] `^`
[ 206: 210: identifier] `FILE`
[ 210: 211:  separator] `)`
[ 211: 212:  separator] `;`
[ 213: 214:  separator] `[`
[ 214: 215: identifier] `c`
[ 215: 216:  separator] `]`
[ 217: 221: identifier] `func`
[ 222: 227: identifier] `fread`
[ 227: 228:  separator] `(`
[ 228: 233: identifier] `where`
[ 233: 234:   operator] `:`
[ 235: 236:   operator] `^`
[ 236: 238: identifier] `u8`
[ 238: 239:  separator] `,`
[ 240: 242: identifier] `sz`
[ 242: 243:   operator] `:`
[ 244: 248: identifier] `uint`
[ 248: 249:  separator] `,`
[ 250: 255: identifier] `dunno`
[ 255: 256:   operator] `:`
[ 257: 261: identifier] `uint`
[ 261: 262:  separator] `,`
[ 263: 269: identifier] `handle`
[ 269: 270:   operator] `:`
[ 271: 272:   operator] `^`
[ 272: 276: identifier] `FILE`
[ 276: 277:  separator] `)`
[ 277: 278:  separator] `;`
[ 279: 280:  separator] `[`
[ 280: 281: identifier] `c`
[ 281: 282:  separator] `]`
[ 283: 287: identifier] `func`
[ 288: 294: identifier] `fclose`
[ 294: 295:  separator] `(`
[ 295: 301: identifier] `handle`
[ 301: 302:   operator] `:`
[ 303: 304:   operator] `^`
[ 304: 308: identifier] `FILE`
[ 308: 309:  separator] `)`
[ 309: 310:  separator] `;`
[ 311: 312:  separator] `[`
[ 312: 313: identifier] `c`
[ 313: 314:  separator] `]`
[ 315: 319: identifier] `func`
[ 320: 326: identifier] `getenv`
[ 326: 327:  separator] `(`
[ 327: 331: identifier] `what`
[ 331: 332:   operator] `:`
[ 333: 334:   operator] `^`
[ 334: 336: identifier] `u8`
[ 336: 337:  separator] `)`
[ 338: 340:   operator] `->`
[ 341: 342:   operator] `^`
[ 342: 344: identifier] `u8`
[ 344: 345:  separator] `;`
[ 347: 350: identifier] `pub`
[ 351: 355: identifier] `type`
[ 356: 364: identifier] `FileMode`
[ 365: 369: identifier] `enum`
[ 370: 371:  separator] `{`
[ 373: 377: identifier] `Read`
[ 377: 378:  separator] `,`
[ 380: 385: identifier] `Write`
[ 385: 386:  separator] `,`
[ 388: 394: identifier] `Append`
[ 394: 395:  separator] `,`
[ 396: 397:  separator] `}`
[ 397: 398:  separator] `;`
[ 446: 449: identifier] `pub`
[ 450: 454: identifier] `func`
[ 455: 456:  separator] `(`
[ 456: 457: identifier] `f`
[ 457: 458:   operator] `:`
[ 459: 467: identifier] `FileMode`
[ 467: 468:  separator] `)`
[ 469: 482: identifier] `getLegacyMode`
[ 482: 483:  separator] `(`
[ 483: 484:  separator] `)`
[ 485: 487:   operator] `->`
[ 488: 494: identifier] `string`
[ 495: 496:  separator] `{`
[ 498: 500: identifier] `if`
[ 501: 502: identifier] `f`
[ 503: 505:   operator] `==`
[ 506: 514: identifier] `FileMode`
[ 514: 516:   operator] `::`
[ 516: 520: identifier] `Read`
[ 521: 522:  separator] `{`
[ 525: 531: identifier] `return`
[ 533: 534:     string] `r`
[ 535: 536:  separator] `;`
[ 538: 539:  separator] `}`
[ 541: 545: identifier] `else`
[ 546: 548: identifier] `if`
[ 549: 550: identifier] `f`
[ 551: 553:   operator] `==`
[ 554: 562: identifier] `FileMode`
[ 562: 564:   operator] `::`
[ 564: 569: identifier] `Write`
[ 570: 571:  separator] `{`
[ 574: 580: identifier] `return`
[ 582: 583:     string] `w`
[ 584: 585:  separator] `;`
[ 587: 588:  separator] `}`
[ 590: 594: identifier] `else`
[ 595: 597: identifier] `if`
[ 598: 599: identifier] `f`
[ 600: 602:   operator] `==`
[ 603: 611: identifier] `FileMode`
[ 611: 613:   operator] `::`
[ 613: 619: identifier] `Append`
[ 620: 621:  separator] `{`
[ 624: 630: identifier] `return`
[ 632: 633:     string] `a`
[ 634: 635:  separator] `;`
[ 637: 638:  separator] `}`
[ 640: 646: identifier] `return`
[ 648: 649:     string] `r`
[ 650: 651:  separator] `;`
[ 668: 669:  separator] `}`
[ 671: 674: identifier] `pub`
[ 675: 679: identifier] `type`
[ 680: 684: identifier] `Path`
[ 685: 691: identifier] `struct`
[ 692: 693:  separator] `{`
[ 695: 703: identifier] `location`
[ 703: 704:   operator] `:`
[ 705: 711: identifier] `string`
[ 711: 712:  separator] `,`
[ 713: 714:  separator] `}`
[ 714: 715:  separator] `;`
[ 717: 720: identifier] `pub`
[ 721: 725: identifier] `func`
[ 726: 727:  separator] `(`
[ 727: 731: identifier] `Path`
[ 731: 732:  separator] `)`
[ 733: 736: identifier] `new`
[ 736: 737:  separator] `(`
[ 737: 745: identifier] `location`
[ 745: 746:   operator] `:`
[ 747: 753: identifier] `string`
[ 753: 754:  separator] `)`
[ 755: 757:   operator] `->`
[ 758: 759:   operator] `^`
[ 759: 762: identifier] `mut`
[ 763: 767: identifier] `Path`
[ 768: 769:  separator] `{`
[ 771: 774: identifier] `mut`
[ 775: 776: identifier] `p`
[ 776: 777:   operator] `:`
[ 778: 779:   operator] `^`
[ 779: 782: identifier] `mut`
[ 783: 787: identifier] `Path`
[ 788: 789:   operator] `=`
[ 790: 793: identifier] `mem`
[ 793: 795:   operator] `::`
[ 795: 800: identifier] `alloc`
[ 800: 801:   operator] `<`
[ 801: 805: identifier] `Path`
[ 805: 806:   operator] `>`
[ 806: 807:  separator] `(`
[ 807: 808:  separator] `)`
[ 808: 809:  separator] `;`
[ 811: 812: identifier] `p`
[ 812: 813:  separator] `.`
[ 813: 821: identifier] `location`
[ 822: 823:   operator] `=`
[ 824: 832: identifier] `location`
[ 832: 833:  separator] `;`
[ 835: 841: identifier] `return`
[ 842: 843: identifier] `p`
[ 843: 844:  separator] `;`
[ 845: 846:  separator] `}`
[ 848: 851: identifier] `pub`
[ 852: 856: identifier] `type`
[ 857: 861: identifier] `File`
[ 862: 868: identifier] `struct`
[ 869: 870:  separator] `{`
[ 872: 876: identifier] `name`
[ 876: 877:   operator] `:`
[ 878: 884: identifier] `string`
[ 884: 885:  separator] `,`
[ 887: 891: identifier] `path`
[ 891: 892:   operator] `:`
[ 893: 894:   operator] `^`
[ 894: 897: identifier] `mut`
[ 898: 902: identifier] `Path`
[ 902: 903:  separator] `,`
[ 905: 911: identifier] `handle`
[ 911: 912:   operator] `:`
[ 913: 914:   operator] `^`
[ 914: 918: identifier] `FILE`
[ 918: 919:  separator] `,`
[ 920: 921:  separator] `}`
[ 921: 922:  separator] `;`
[ 924: 927: identifier] `pub`
[ 928: 932: identifier] `func`
[ 933: 934:  separator] `(`
[ 934: 938: identifier] `File`
[ 938: 939:  separator] `)`
[ 940: 944: identifier] `open`
[ 944: 945:  separator] `(`
[ 945: 949: identifier] `path`
[ 949: 950:   operator] `:`
[ 951: 952:   operator] `^`
[ 952: 955: identifier] `mut`
[ 956: 960: identifier] `Path`
[ 960: 961:  separator] `,`
[ 962: 966: identifier] `mode`
[ 966: 967:   operator] `:`
[ 968: 976: identifier] `FileMode`
[ 976: 977:  separator] `)`
[ 978: 980:   operator] `->`
[ 981: 982:   operator] `^`
[ 982: 985: identifier] `mut`
[ 986: 990: identifier] `File`
[ 991: 992:  separator] `{`
[ 994: 997: identifier] `mut`
[ 998: 999: identifier] `f`
[ 999:1000:   operator] `:`
[1001:1002:   operator] `^`
[1002:1005: identifier] `mut`
[1006:1010: identifier] `File`
[1011:1012:   operator] `=`
[1013:1016: identifier] `mem`
[1016:1018:   operator] `::`
[1018:1023: identifier] `alloc`
[1023:1024:   operator] `<`
[1024:1028: identifier] `File`
[1028:1029:   operator] `>`
[1029:1030:  separator] `(`
[1030:1031:  separator] `)`
[1031:1032:  separator] `;`
[1034:1035: identifier] `f`
[1035:1036:  separator] `.`
[1036:1040: identifier] `path`
[1041:1042:   operator] `=`
[1043:1047: identifier] `path`
[1047:1048:  separator] `;`
[1050:1056: identifier] `return`
[1057:1058: identifier] `f`
[1058:1059:  separator] `;`
[1060:1061:  separator] `}`
[1063:1066: identifier] `pub`
[1067:1071: identifier] `func`
[1072:1073:  separator] `(`
[1073:1074: identifier] `f`
[1074:1075:   operator] `:`
[1076:1077:   operator] `^`
[1077:1080: identifier] `mut`
[1081:1085: identifier] `File`
[1085:1086:  separator] `)`
[1087:1099: identifier] `readToString`
[1099:1100:  separator] `(`
[1100:1101:  separator] `)`
[1102:1104:   operator] `->`
[1105:1111: identifier] `string`
[1112:1113:  separator] `{`
[1115:1121: identifier] `return`
[1122:1123: identifier] `f`
[1123:1124:  separator] `.`
[1124:1128: identifier] `name`
[1128:1129:  separator] `;`
[1130:1131:  separator] `}`
[1133:1136: identifier] `pub`
[1137:1141: identifier] `func`
[1142:1143:  separator] `(`
[1143:1144: identifier] `f`
[1144:1145:   operator] `:`
[1146:1147:   operator] `^`
[1147:1150: identifier] `mut`
[1151:1155: identifier] `File`
[1155:1156:  separator] `)`
[1157:1162: identifier] `close`
[1162:1163:  separator] `(`
[1163:1164:  separator] `)`
[1165:1166:  separator] `{`
[1192:1193:  separator] `}`
 [32mEnded lexing[00m file (2.11ms)
 [32mStarted parsing[00m file
 [32mEnded parsing[00m file (0.65ms)
 [32mStarted lexing[00m println
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  17: identifier] `unicode`
[  17:  19:   operator] `::`
[  19:  23: identifier] `utf8`
[  24:  25:   operator] `#`
[  25:  28: identifier] `use`
[  29:  32: identifier] `std`
[  32:  34:   operator] `::`
[  34:  40: identifier] `string`
[  41:  42:   operator] `#`
[  42:  45: identifier] `use`
[  46:  49: identifier] `std`
[  49:  51:   operator] `::`
[  51:  54: identifier] `mem`
[  56:  57:  separator] `[`
[  57:  58: identifier] `c`
[  58:  59:  separator] `]`
[  60:  64: identifier] `func`
[  65:  71: identifier] `printf`
[  71:  72:  separator] `(`
[  72:  75: identifier] `fmt`
[  75:  76:   operator] `:`
[  77:  78:   operator] `^`
[  78:  80: identifier] `u8`
[  80:  81:  separator] `,`
[  82:  83:  separator] `.`
[  83:  84:  separator] `.`
[  84:  85:  separator] `.`
[  85:  86:  separator] `)`
[  87:  89:   operator] `->`
[  90:  93: identifier] `int`
[  93:  94:  separator] `;`
[ 142: 145: identifier] `pub`
[ 146: 150: identifier] `func`
[ 151: 158: identifier] `println`
[ 158: 159:  separator] `(`
[ 159: 166: identifier] `message`
[ 166: 167:   operator] `:`
[ 168: 174: identifier] `string`
[ 174: 175:  separator] `)`
[ 176: 178:   operator] `->`
[ 179: 182: identifier] `int`
[ 183: 184:  separator] `{`
[ 186: 188: identifier] `if`
[ 189: 192: identifier] `len`
[ 192: 193:  separator] `(`
[ 193: 200: identifier] `message`
[ 200: 201:  separator] `)`
[ 202: 204:   operator] `==`
[ 205: 206:     number] `0`
[ 207: 208:  separator] `{`
[ 211: 217: identifier] `return`
[ 218: 219: identifier] `C`
[ 219: 221:   operator] `::`
[ 221: 227: identifier] `printf`
[ 227: 228:  separator] `(`
[ 228: 229: identifier] `c`
[ 230: 232:     string] `\n`
[ 233: 234:  separator] `)`
[ 234: 235:  separator] `;`
[ 237: 238:  separator] `}`
[ 240: 246: identifier] `return`
[ 247: 248: identifier] `C`
[ 248: 250:   operator] `::`
[ 250: 256: identifier] `printf`
[ 256: 257:  separator] `(`
[ 257: 258: identifier] `c`
[ 259: 265:     string] `%.*s\n`
[ 266: 267:  separator] `,`
[ 268: 271: identifier] `len`
[ 271: 272:  separator] `(`
[ 272: 279: identifier] `message`
[ 279: 280:  separator] `)`
[ 280: 281:  separator] `,`
[ 282: 283:   operator] `&`
[ 283: 290: identifier] `message`
[ 290: 291:  separator] `[`
[ 291: 292:     number] `0`
[ 292: 293:  separator] `]`
[ 293: 294:  separator] `)`
[ 294: 295:  separator] `;`
[ 296: 297:  separator] `}`
[ 299: 302: identifier] `pub`
[ 303: 307: identifier] `func`
[ 308: 313: identifier] `print`
[ 313: 314:  separator] `(`
[ 314: 321: identifier] `message`
[ 321: 322:   operator] `:`
[ 323: 329: identifier] `string`
[ 329: 330:  separator] `)`
[ 331: 333:   operator] `->`
[ 334: 337: identifier] `int`
[ 338: 339:  separator] `{`
[ 341: 343: identifier] `if`
[ 344: 347: identifier] `len`
[ 347: 348:  separator] `(`
[ 348: 355: identifier] `message`
[ 355: 356:  separator] `)`
[ 357: 359:   operator] `==`
[ 360: 361:     number] `0`
[ 362: 363:  separator] `{`
[ 366: 372: identifier] `return`
[ 373: 374:     number] `0`
[ 374: 375:  separator] `;`
[ 377: 378:  separator] `}`
[ 380: 386: identifier] `return`
[ 387: 388: identifier] `C`
[ 388: 390:   operator] `::`
[ 390: 396: identifier] `printf`
[ 396: 397:  separator] `(`
[ 397: 398: identifier] `c`
[ 399: 403:     string] `%.*s`
[ 404: 405:  separator] `,`
[ 406: 409: identifier] `len`
[ 409: 410:  separator] `(`
[ 410: 417: identifier] `message`
[ 417: 418:  separator] `)`
[ 418: 419:  separator] `,`
[ 420: 421:   operator] `&`
[ 421: 428: identifier] `message`
[ 428: 429:  separator] `[`
[ 429: 430:     number] `0`
[ 430: 431:  separator] `]`
[ 431: 432:  separator] `)`
[ 432: 433:  separator] `;`
[ 434: 435:  separator] `}`
[ 437: 440: identifier] `pub`
[ 441: 445: identifier] `func`
[ 446: 464: identifier] `printDynamicString`
[ 464: 465:  separator] `(`
[ 465: 466: identifier] `s`
[ 466: 467:   operator] `:`
[ 468: 469:   operator] `^`
[ 469: 475: identifier] `string`
[ 475: 477:   operator] `::`
[ 477: 483: identifier] `String`
[ 483: 484:  separator] `)`
[ 485: 487:   operator] `->`
[ 488: 491: identifier] `int`
[ 492: 493:  separator] `{`
[ 495: 498: identifier] `mut`
[ 499: 502: identifier] `idx`
[ 503: 504:   operator] `:`
[ 504: 505:   operator] `=`
[ 506: 510: identifier] `uint`
[ 510: 511:  separator] `(`
[ 511: 512:     number] `0`
[ 512: 513:  separator] `)`
[ 513: 514:  separator] `;`
[ 516: 519: identifier] `for`
[ 520: 523: identifier] `idx`
[ 524: 525:   operator] `<`
[ 526: 527: identifier] `s`
[ 527: 528:  separator] `.`
[ 528: 534: identifier] `length`
[ 534: 535:  separator] `(`
[ 535: 536:  separator] `)`
[ 537: 538:  separator] `{`
[ 541: 550: identifier] `printRune`
[ 550: 551:  separator] `(`
[ 551: 552: identifier] `s`
[ 552: 553:  separator] `.`
[ 553: 555: identifier] `at`
[ 555: 556:  separator] `(`
[ 556: 559: identifier] `idx`
[ 559: 560:  separator] `)`
[ 560: 561:  separator] `)`
[ 561: 562:  separator] `;`
[ 565: 568: identifier] `idx`
[ 569: 570:   operator] `+`
[ 570: 571:   operator] `=`
[ 572: 573:     number] `1`
[ 573: 574:  separator] `;`
[ 576: 577:  separator] `}`
[ 579: 588: identifier] `printRune`
[ 588: 589:  separator] `(`
[ 589: 593:       rune] `'\n'`
[ 593: 594:  separator] `)`
[ 594: 595:  separator] `;`
[ 597: 603: identifier] `return`
[ 604: 607: identifier] `int`
[ 607: 608:  separator] `(`
[ 608: 611: identifier] `idx`
[ 611: 612:  separator] `)`
[ 612: 613:  separator] `;`
[ 614: 615:  separator] `}`
[ 617: 620: identifier] `pub`
[ 621: 625: identifier] `func`
[ 626: 635: identifier] `printRune`
[ 635: 636:  separator] `(`
[ 636: 637: identifier] `r`
[ 637: 638:   operator] `:`
[ 639: 643: identifier] `rune`
[ 643: 644:  separator] `)`
[ 645: 647:   operator] `->`
[ 648: 651: identifier] `int`
[ 652: 653:  separator] `{`
[ 655: 658: identifier] `mut`
[ 659: 663: identifier] `rPtr`
[ 664: 665:   operator] `:`
[ 665: 666:   operator] `=`
[ 667: 668:  separator] `(`
[ 668: 669:   operator] `^`
[ 669: 671: identifier] `u8`
[ 671: 672:  separator] `)`
[ 672: 673:  separator] `(`
[ 673: 680: identifier] `uintptr`
[ 680: 681:  separator] `(`
[ 681: 682:   operator] `&`
[ 682: 683: identifier] `r`
[ 683: 684:  separator] `)`
[ 684: 685:  separator] `)`
[ 685: 686:  separator] `;`
[ 688: 693: identifier] `rCast`
[ 694: 695:   operator] `:`
[ 695: 696:   operator] `=`
[ 697: 698:  separator] `[`
[ 698: 699:  separator] `]`
[ 699: 703: identifier] `rune`
[ 703: 704:  separator] `{`
[ 704: 705: identifier] `r`
[ 705: 706:  separator] `}`
[ 706: 707:  separator] `;`
[ 709: 717: identifier] `numBytes`
[ 718: 719:   operator] `:`
[ 719: 720:   operator] `=`
[ 721: 725: identifier] `utf8`
[ 725: 727:   operator] `::`
[ 727: 735: identifier] `numBytes`
[ 735: 736:  separator] `(`
[ 736: 741: identifier] `rCast`
[ 741: 742:  separator] `)`
[ 742: 743:  separator] `;`
[ 748: 749: identifier] `C`
[ 749: 751:   operator] `::`
[ 751: 757: identifier] `printf`
[ 757: 758:  separator] `(`
[ 758: 759: identifier] `c`
[ 760: 764:     string] `%.*s`
[ 765: 766:  separator] `,`
[ 767: 775: identifier] `numBytes`
[ 776: 777:   operator] `+`
[ 778: 779:     number] `1`
[ 779: 780:  separator] `,`
[ 781: 785: identifier] `rPtr`
[ 785: 786:  separator] `)`
[ 786: 787:  separator] `;`
[ 789: 795: identifier] `return`
[ 796: 797:     number] `0`
[ 797: 798:  separator] `;`
[ 799: 800:  separator] `}`
[ 802: 805: identifier] `pub`
[ 806: 810: identifier] `func`
[ 811: 820: identifier] `printByte`
[ 820: 821:  separator] `(`
[ 821: 825: identifier] `byte`
[ 825: 826:   operator] `:`
[ 827: 829: identifier] `u8`
[ 829: 830:  separator] `)`
[ 831: 833:   operator] `->`
[ 834: 837: identifier] `int`
[ 838: 839:  separator] `{`
[ 841: 847: identifier] `return`
[ 848: 849: identifier] `C`
[ 849: 851:   operator] `::`
[ 851: 857: identifier] `printf`
[ 857: 858:  separator] `(`
[ 858: 859: identifier] `c`
[ 860: 862:     string] `%c`
[ 863: 864:  separator] `,`
[ 865: 869: identifier] `byte`
[ 869: 870:  separator] `)`
[ 870: 871:  separator] `;`
[ 872: 873:  separator] `}`
[ 875: 878: identifier] `pub`
[ 879: 883: identifier] `func`
[ 884: 892: identifier] `printInt`
[ 892: 893:  separator] `(`
[ 893: 896: identifier] `num`
[ 896: 897:   operator] `:`
[ 898: 901: identifier] `int`
[ 901: 902:  separator] `)`
[ 903: 905:   operator] `->`
[ 906: 909: identifier] `int`
[ 910: 911:  separator] `{`
[ 950: 956: identifier] `return`
[ 957: 958: identifier] `C`
[ 958: 960:   operator] `::`
[ 960: 966: identifier] `printf`
[ 966: 967:  separator] `(`
[ 967: 968: identifier] `c`
[ 969: 972:     string] `%zd`
[ 973: 974:  separator] `,`
[ 975: 978: identifier] `num`
[ 978: 979:  separator] `)`
[ 979: 980:  separator] `;`
[ 981: 982:  separator] `}`
[ 984: 987: identifier] `pub`
[ 988: 992: identifier] `func`
[ 993:1002: identifier] `printUint`
[1002:1003:  separator] `(`
[1003:1006: identifier] `num`
[1006:1007:   operator] `:`
[1008:1012: identifier] `uint`
[1012:1013:  separator] `)`
[1014:1016:   operator] `->`
[1017:1020: identifier] `int`
[1021:1022:  separator] `{`
[1061:1067: identifier] `return`
[1068:1069: identifier] `C`
[1069:1071:   operator] `::`
[1071:1077: identifier] `printf`
[1077:1078:  separator] `(`
[1078:1079: identifier] `c`
[1080:1083:     string] `%zu`
[1084:1085:  separator] `,`
[1086:1089: identifier] `num`
[1089:1090:  separator] `)`
[1090:1091:  separator] `;`
[1092:1093:  separator] `}`
 [32mEnded lexing[00m println (1.92ms)
 [32mStarted parsing[00m println
 [32mEnded parsing[00m println (0.84ms)
 [32mStarted lexing[00m string
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  13: identifier] `adt`
[  14:  15:   operator] `#`
[  15:  18: identifier] `use`
[  19:  22: identifier] `std`
[  22:  24:   operator] `::`
[  24:  27: identifier] `mem`
[  28:  29:   operator] `#`
[  29:  32: identifier] `use`
[  33:  36: identifier] `std`
[  36:  38:   operator] `::`
[  38:  45: identifier] `unicode`
[  45:  47:   operator] `::`
[  47:  51: identifier] `utf8`
[ 104: 107: identifier] `pub`
[ 108: 112: identifier] `type`
[ 113: 119: identifier] `String`
[ 120: 126: identifier] `struct`
[ 127: 128:  separator] `{`
[ 130: 134: identifier] `data`
[ 134: 135:   operator] `:`
[ 136: 137:   operator] `^`
[ 137: 140: identifier] `mut`
[ 141: 144: identifier] `adt`
[ 144: 146:   operator] `::`
[ 146: 150: identifier] `List`
[ 150: 151:   operator] `<`
[ 151: 155: identifier] `rune`
[ 155: 156:   operator] `>`
[ 156: 157:  separator] `,`
[ 159: 160:  separator] `}`
[ 160: 161:  separator] `;`
[ 222: 225: identifier] `pub`
[ 226: 230: identifier] `func`
[ 231: 232:  separator] `(`
[ 232: 238: identifier] `String`
[ 238: 239:  separator] `)`
[ 240: 244: identifier] `from`
[ 244: 245:  separator] `(`
[ 245: 251: identifier] `source`
[ 251: 252:   operator] `:`
[ 253: 259: identifier] `string`
[ 259: 260:  separator] `)`
[ 261: 263:   operator] `->`
[ 264: 265:   operator] `^`
[ 265: 268: identifier] `mut`
[ 269: 275: identifier] `String`
[ 276: 277:  separator] `{`
[ 279: 282: identifier] `str`
[ 283: 284:   operator] `:`
[ 284: 285:   operator] `=`
[ 286: 292: identifier] `String`
[ 292: 294:   operator] `::`
[ 294: 306: identifier] `withCapacity`
[ 306: 307:  separator] `(`
[ 307: 310: identifier] `len`
[ 310: 311:  separator] `(`
[ 311: 317: identifier] `source`
[ 317: 318:  separator] `)`
[ 318: 319:  separator] `)`
[ 319: 320:  separator] `;`
[ 322: 325: identifier] `mut`
[ 326: 329: identifier] `idx`
[ 330: 331:   operator] `:`
[ 331: 332:   operator] `=`
[ 333: 337: identifier] `uint`
[ 337: 338:  separator] `(`
[ 338: 339:     number] `0`
[ 339: 340:  separator] `)`
[ 340: 341:  separator] `;`
[ 343: 346: identifier] `for`
[ 347: 350: identifier] `idx`
[ 351: 352:   operator] `<`
[ 353: 356: identifier] `len`
[ 356: 357:  separator] `(`
[ 357: 363: identifier] `source`
[ 363: 364:  separator] `)`
[ 365: 366:  separator] `{`
[ 369: 373: identifier] `char`
[ 374: 375:   operator] `:`
[ 375: 376:   operator] `=`
[ 377: 378:  separator] `[`
[ 378: 379:  separator] `]`
[ 379: 381: identifier] `u8`
[ 381: 382:  separator] `{`
[ 382: 388: identifier] `source`
[ 388: 389:  separator] `[`
[ 389: 392: identifier] `idx`
[ 392: 393:  separator] `]`
[ 393: 394:  separator] `}`
[ 394: 395:  separator] `;`
[ 398: 409: identifier] `decodedChar`
[ 410: 411:   operator] `:`
[ 411: 412:   operator] `=`
[ 413: 414:  separator] `[`
[ 414: 415:  separator] `]`
[ 415: 419: identifier] `rune`
[ 419: 420:  separator] `{`
[ 420: 421:     number] `0`
[ 421: 422:  separator] `}`
[ 422: 423:  separator] `;`
[ 426: 436: identifier] `decodeChar`
[ 437: 438:   operator] `:`
[ 438: 439:   operator] `=`
[ 440: 444: identifier] `utf8`
[ 444: 446:   operator] `::`
[ 446: 452: identifier] `decode`
[ 452: 453:  separator] `(`
[ 453: 464: identifier] `decodedChar`
[ 464: 465:  separator] `,`
[ 466: 470: identifier] `char`
[ 470: 471:  separator] `)`
[ 471: 472:  separator] `;`
[ 475: 478: identifier] `str`
[ 478: 479:  separator] `.`
[ 479: 485: identifier] `append`
[ 485: 486:  separator] `(`
[ 486: 497: identifier] `decodedChar`
[ 497: 498:  separator] `[`
[ 498: 499:     number] `0`
[ 499: 500:  separator] `]`
[ 500: 501:  separator] `)`
[ 501: 502:  separator] `;`
[ 505: 508: identifier] `idx`
[ 509: 510:   operator] `+`
[ 510: 511:   operator] `=`
[ 512: 513:     number] `1`
[ 513: 514:  separator] `;`
[ 516: 517:  separator] `}`
[ 519: 525: identifier] `return`
[ 526: 529: identifier] `str`
[ 529: 530:  separator] `;`
[ 531: 532:  separator] `}`
[ 534: 537: identifier] `pub`
[ 538: 542: identifier] `func`
[ 543: 544:  separator] `(`
[ 544: 550: identifier] `String`
[ 550: 551:  separator] `)`
[ 552: 564: identifier] `withCapacity`
[ 564: 565:  separator] `(`
[ 565: 569: identifier] `size`
[ 569: 570:   operator] `:`
[ 571: 575: identifier] `uint`
[ 575: 576:  separator] `)`
[ 577: 579:   operator] `->`
[ 580: 581:   operator] `^`
[ 581: 584: identifier] `mut`
[ 585: 591: identifier] `String`
[ 592: 593:  separator] `{`
[ 595: 598: identifier] `str`
[ 599: 600:   operator] `:`
[ 600: 601:   operator] `=`
[ 602: 605: identifier] `mem`
[ 605: 607:   operator] `::`
[ 607: 612: identifier] `alloc`
[ 612: 613:   operator] `<`
[ 613: 619: identifier] `String`
[ 619: 620:   operator] `>`
[ 620: 621:  separator] `(`
[ 621: 622:  separator] `)`
[ 622: 623:  separator] `;`
[ 625: 626:   operator] `@`
[ 626: 629: identifier] `str`
[ 630: 631:   operator] `=`
[ 632: 638: identifier] `String`
[ 639: 640:  separator] `{`
[ 643: 647: identifier] `data`
[ 647: 648:   operator] `:`
[ 649: 652: identifier] `adt`
[ 652: 654:   operator] `::`
[ 654: 658: identifier] `List`
[ 658: 660:   operator] `::`
[ 660: 675: identifier] `newWithCapacity`
[ 675: 676:   operator] `<`
[ 676: 680: identifier] `rune`
[ 680: 681:   operator] `>`
[ 681: 682:  separator] `(`
[ 682: 686: identifier] `size`
[ 686: 687:  separator] `)`
[ 687: 688:  separator] `,`
[ 690: 691:  separator] `}`
[ 691: 692:  separator] `;`
[ 695: 698: identifier] `mut`
[ 699: 702: identifier] `idx`
[ 703: 704:   operator] `:`
[ 704: 705:   operator] `=`
[ 706: 710: identifier] `uint`
[ 710: 711:  separator] `(`
[ 711: 712:     number] `0`
[ 712: 713:  separator] `)`
[ 713: 714:  separator] `;`
[ 716: 719: identifier] `for`
[ 720: 723: identifier] `idx`
[ 724: 725:   operator] `<`
[ 726: 730: identifier] `size`
[ 731: 732:  separator] `{`
[ 735: 738: identifier] `str`
[ 738: 739:  separator] `.`
[ 739: 745: identifier] `append`
[ 745: 746:  separator] `(`
[ 746: 750:       rune] `'\0'`
[ 750: 751:  separator] `)`
[ 751: 752:  separator] `;`
[ 755: 758: identifier] `idx`
[ 759: 760:   operator] `+`
[ 760: 761:   operator] `=`
[ 762: 763:     number] `1`
[ 763: 764:  separator] `;`
[ 766: 767:  separator] `}`
[ 770: 776: identifier] `return`
[ 777: 780: identifier] `str`
[ 780: 781:  separator] `;`
[ 782: 783:  separator] `}`
[ 785: 812: doccomment] `/// Clear the entire string`
[ 813: 846: doccomment] `/// returning it back to a length`
[ 847: 859: doccomment] `/// of zero.`
[ 860: 863: identifier] `pub`
[ 864: 868: identifier] `func`
[ 869: 870:  separator] `(`
[ 870: 871: identifier] `a`
[ 871: 872:   operator] `:`
[ 873: 874:   operator] `^`
[ 874: 880: identifier] `String`
[ 880: 881:  separator] `)`
[ 882: 887: identifier] `clear`
[ 887: 888:  separator] `(`
[ 888: 889:  separator] `)`
[ 890: 891:  separator] `{`
[ 893: 896: identifier] `mut`
[ 897: 900: identifier] `idx`
[ 901: 902:   operator] `:`
[ 902: 903:   operator] `=`
[ 904: 908: identifier] `uint`
[ 908: 909:  separator] `(`
[ 909: 910:     number] `0`
[ 910: 911:  separator] `)`
[ 911: 912:  separator] `;`
[ 914: 917: identifier] `for`
[ 918: 921: identifier] `idx`
[ 922: 923:   operator] `<`
[ 924: 925: identifier] `a`
[ 925: 926:  separator] `.`
[ 926: 932: identifier] `length`
[ 932: 933:  separator] `(`
[ 933: 934:  separator] `)`
[ 935: 936:  separator] `{`
[ 939: 940: identifier] `a`
[ 940: 941:  separator] `.`
[ 941: 944: identifier] `pop`
[ 944: 945:  separator] `(`
[ 945: 946:  separator] `)`
[ 946: 947:  separator] `;`
[ 950: 953: identifier] `idx`
[ 954: 955:   operator] `+`
[ 955: 956:   operator] `=`
[ 957: 958:     number] `1`
[ 958: 959:  separator] `;`
[ 961: 962:  separator] `}`
[ 963: 964:  separator] `}`
[ 966:1000: doccomment] `/// Pops and returns the last rune`
[1001:1018: doccomment] `/// in the string`
[1019:1022: identifier] `pub`
[1023:1027: identifier] `func`
[1028:1029:  separator] `(`
[1029:1030: identifier] `a`
[1030:1031:   operator] `:`
[1032:1033:   operator] `^`
[1033:1039: identifier] `String`
[1039:1040:  separator] `)`
[1041:1044: identifier] `pop`
[1044:1045:  separator] `(`
[1045:1046:  separator] `)`
[1047:1049:   operator] `->`
[1050:1056: identifier] `Option`
[1056:1057:   operator] `<`
[1057:1061: identifier] `rune`
[1061:1062:   operator] `>`
[1063:1064:  separator] `{`
[1066:1068: identifier] `if`
[1069:1070: identifier] `a`
[1070:1071:  separator] `.`
[1071:1077: identifier] `length`
[1077:1078:  separator] `(`
[1078:1079:  separator] `)`
[1080:1082:   operator] `==`
[1083:1084:     number] `0`
[1085:1086:  separator] `{`
[1089:1095: identifier] `return`
[1096:1102: identifier] `Option`
[1102:1104:   operator] `::`
[1104:1108: identifier] `None`
[1108:1109:  separator] `;`
[1111:1112:  separator] `}`
[1114:1120: identifier] `return`
[1121:1122: identifier] `a`
[1122:1123:  separator] `.`
[1123:1127: identifier] `data`
[1127:1128:  separator] `.`
[1128:1131: identifier] `pop`
[1131:1132:  separator] `(`
[1132:1133:  separator] `)`
[1133:1134:  separator] `;`
[1135:1136:  separator] `}`
[1138:1157: doccomment] `/// Append a string`
[1158:1161: identifier] `pub`
[1162:1166: identifier] `func`
[1167:1168:  separator] `(`
[1168:1169: identifier] `a`
[1169:1170:   operator] `:`
[1171:1172:   operator] `^`
[1172:1178: identifier] `String`
[1178:1179:  separator] `)`
[1180:1186: identifier] `concat`
[1186:1187:  separator] `(`
[1187:1192: identifier] `other`
[1192:1193:   operator] `:`
[1194:1200: identifier] `string`
[1200:1201:  separator] `)`
[1202:1203:  separator] `{`
[1205:1208: identifier] `mut`
[1209:1212: identifier] `idx`
[1213:1214:   operator] `:`
[1214:1215:   operator] `=`
[1216:1220: identifier] `uint`
[1220:1221:  separator] `(`
[1221:1222:     number] `0`
[1222:1223:  separator] `)`
[1223:1224:  separator] `;`
[1226:1229: identifier] `for`
[1230:1233: identifier] `idx`
[1234:1235:   operator] `<`
[1236:1239: identifier] `len`
[1239:1240:  separator] `(`
[1240:1245: identifier] `other`
[1245:1246:  separator] `)`
[1247:1248:  separator] `{`
[1251:1267: identifier] `otherRunePointer`
[1268:1269:   operator] `:`
[1269:1270:   operator] `=`
[1271:1278: identifier] `uintptr`
[1278:1279:  separator] `(`
[1279:1284: identifier] `other`
[1284:1285:  separator] `[`
[1285:1288: identifier] `idx`
[1288:1289:  separator] `]`
[1289:1290:  separator] `)`
[1290:1291:  separator] `;`
[1294:1295: identifier] `a`
[1295:1296:  separator] `.`
[1296:1302: identifier] `append`
[1302:1303:  separator] `(`
[1303:1304:  separator] `(`
[1304:1308: identifier] `rune`
[1308:1309:  separator] `)`
[1309:1310:  separator] `(`
[1310:1326: identifier] `otherRunePointer`
[1326:1327:  separator] `)`
[1327:1328:  separator] `)`
[1328:1329:  separator] `;`
[1332:1335: identifier] `idx`
[1336:1337:   operator] `+`
[1337:1338:   operator] `=`
[1339:1340:     number] `1`
[1340:1341:  separator] `;`
[1343:1344:  separator] `}`
[1345:1346:  separator] `}`
[1348:1372: doccomment] `/// Append a single rune`
[1373:1376: identifier] `pub`
[1377:1381: identifier] `func`
[1382:1383:  separator] `(`
[1383:1384: identifier] `a`
[1384:1385:   operator] `:`
[1386:1387:   operator] `^`
[1387:1393: identifier] `String`
[1393:1394:  separator] `)`
[1395:1401: identifier] `append`
[1401:1402:  separator] `(`
[1402:1406: identifier] `char`
[1406:1407:   operator] `:`
[1408:1412: identifier] `rune`
[1412:1413:  separator] `)`
[1414:1415:  separator] `{`
[1417:1418: identifier] `a`
[1418:1419:  separator] `.`
[1419:1423: identifier] `data`
[1423:1424:  separator] `.`
[1424:1430: identifier] `append`
[1430:1431:  separator] `(`
[1431:1435: identifier] `char`
[1435:1436:  separator] `)`
[1436:1437:  separator] `;`
[1438:1439:  separator] `}`
[1441:1444: identifier] `pub`
[1445:1449: identifier] `func`
[1450:1451:  separator] `(`
[1451:1452: identifier] `a`
[1452:1453:   operator] `:`
[1454:1455:   operator] `^`
[1455:1461: identifier] `String`
[1461:1462:  separator] `)`
[1463:1465: identifier] `at`
[1465:1466:  separator] `(`
[1466:1471: identifier] `index`
[1471:1472:   operator] `:`
[1473:1477: identifier] `uint`
[1477:1478:  separator] `)`
[1479:1481:   operator] `->`
[1482:1486: identifier] `rune`
[1487:1488:  separator] `{`
[1490:1496: identifier] `return`
[1497:1498: identifier] `a`
[1498:1499:  separator] `.`
[1499:1503: identifier] `data`
[1503:1504:  separator] `.`
[1504:1507: identifier] `get`
[1507:1508:  separator] `(`
[1508:1513: identifier] `index`
[1513:1514:  separator] `)`
[1514:1515:  separator] `;`
[1516:1517:  separator] `}`
[1519:1522: identifier] `pub`
[1523:1527: identifier] `func`
[1528:1529:  separator] `(`
[1529:1530: identifier] `a`
[1530:1531:   operator] `:`
[1532:1533:   operator] `^`
[1533:1539: identifier] `String`
[1539:1540:  separator] `)`
[1541:1547: identifier] `length`
[1547:1548:  separator] `(`
[1548:1549:  separator] `)`
[1550:1552:   operator] `->`
[1553:1557: identifier] `uint`
[1558:1559:  separator] `{`
[1561:1567: identifier] `return`
[1568:1569: identifier] `a`
[1569:1570:  separator] `.`
[1570:1574: identifier] `data`
[1574:1575:  separator] `.`
[1575:1584: identifier] `getLength`
[1584:1585:  separator] `(`
[1585:1586:  separator] `)`
[1586:1587:  separator] `;`
[1588:1589:  separator] `}`
[1591:1594: identifier] `pub`
[1595:1599: identifier] `func`
[1600:1601:  separator] `(`
[1601:1602: identifier] `a`
[1602:1603:   operator] `:`
[1604:1605:   operator] `^`
[1605:1611: identifier] `String`
[1611:1612:  separator] `)`
[1613:1620: identifier] `destroy`
[1620:1621:  separator] `(`
[1621:1622:  separator] `)`
[1623:1624:  separator] `{`
[1626:1627: identifier] `a`
[1627:1628:  separator] `.`
[1628:1632: identifier] `data`
[1632:1633:  separator] `.`
[1633:1640: identifier] `destroy`
[1640:1641:  separator] `(`
[1641:1642:  separator] `)`
[1642:1643:  separator] `;`
[1645:1648: identifier] `mem`
[1648:1650:   operator] `::`
[1650:1654: identifier] `free`
[1654:1655:  separator] `(`
[1655:1656: identifier] `a`
[1656:1657:  separator] `)`
[1657:1658:  separator] `;`
[1659:1660:  separator] `}`
 [32mEnded lexing[00m string (2.72ms)
 [32mStarted parsing[00m string
 [32mEnded parsing[00m string (1.26ms)
 [32mStarted lexing[00m util
[   0:   3: identifier] `pub`
[   4:   8: identifier] `func`
[   9:  17: identifier] `contains`
[  17:  18:  separator] `(`
[  18:  26: identifier] `haystack`
[  26:  27:   operator] `:`
[  28:  34: identifier] `string`
[  34:  35:  separator] `,`
[  36:  42: identifier] `needle`
[  42:  43:   operator] `:`
[  44:  50: identifier] `string`
[  50:  51:  separator] `)`
[  52:  54:   operator] `->`
[  55:  59: identifier] `bool`
[  60:  61:  separator] `{`
[  63:  65: identifier] `if`
[  66:  69: identifier] `len`
[  69:  70:  separator] `(`
[  70:  78: identifier] `haystack`
[  78:  79:  separator] `)`
[  80:  81:   operator] `<`
[  82:  85: identifier] `len`
[  85:  86:  separator] `(`
[  86:  92: identifier] `needle`
[  92:  93:  separator] `)`
[  94:  95:  separator] `{`
[  98: 104: identifier] `return`
[ 105: 110: identifier] `false`
[ 110: 111:  separator] `;`
[ 113: 114:  separator] `}`
[ 118: 121: identifier] `mut`
[ 122: 125: identifier] `idx`
[ 126: 127:   operator] `:`
[ 127: 128:   operator] `=`
[ 129: 133: identifier] `uint`
[ 133: 134:  separator] `(`
[ 134: 135:     number] `0`
[ 135: 136:  separator] `)`
[ 136: 137:  separator] `;`
[ 139: 142: identifier] `mut`
[ 143: 148: identifier] `count`
[ 149: 150:   operator] `:`
[ 150: 151:   operator] `=`
[ 152: 156: identifier] `uint`
[ 156: 157:  separator] `(`
[ 157: 158:     number] `0`
[ 158: 159:  separator] `)`
[ 159: 160:  separator] `;`
[ 162: 165: identifier] `for`
[ 166: 169: identifier] `idx`
[ 170: 171:   operator] `<`
[ 172: 175: identifier] `len`
[ 175: 176:  separator] `(`
[ 176: 184: identifier] `haystack`
[ 184: 185:  separator] `)`
[ 186: 187:  separator] `{`
[ 190: 192: identifier] `if`
[ 193: 201: identifier] `haystack`
[ 201: 202:  separator] `[`
[ 202: 205: identifier] `idx`
[ 205: 206:  separator] `]`
[ 207: 209:   operator] `==`
[ 210: 216: identifier] `needle`
[ 216: 217:  separator] `[`
[ 217: 222: identifier] `count`
[ 222: 223:  separator] `]`
[ 224: 225:  separator] `{`
[ 229: 234: identifier] `count`
[ 235: 236:   operator] `+`
[ 236: 237:   operator] `=`
[ 238: 239:     number] `1`
[ 239: 240:  separator] `;`
[ 243: 244:  separator] `}`
[ 245: 249: identifier] `else`
[ 250: 251:  separator] `{`
[ 255: 260: identifier] `count`
[ 261: 262:   operator] `=`
[ 263: 264:     number] `0`
[ 264: 265:  separator] `;`
[ 268: 269:  separator] `}`
[ 273: 275: identifier] `if`
[ 276: 281: identifier] `count`
[ 282: 284:   operator] `==`
[ 285: 288: identifier] `len`
[ 288: 289:  separator] `(`
[ 289: 295: identifier] `needle`
[ 295: 296:  separator] `)`
[ 297: 298:  separator] `{`
[ 302: 308: identifier] `return`
[ 309: 313: identifier] `true`
[ 313: 314:  separator] `;`
[ 317: 318:  separator] `}`
[ 322: 325: identifier] `idx`
[ 326: 327:   operator] `+`
[ 327: 328:   operator] `=`
[ 329: 330:     number] `1`
[ 330: 331:  separator] `;`
[ 333: 334:  separator] `}`
[ 337: 343: identifier] `return`
[ 344: 349: identifier] `false`
[ 349: 350:  separator] `;`
[ 351: 352:  separator] `}`
[ 354: 357: identifier] `pub`
[ 358: 362: identifier] `func`
[ 363: 372: identifier] `hasPrefix`
[ 372: 373:  separator] `(`
[ 373: 379: identifier] `source`
[ 379: 380:   operator] `:`
[ 381: 387: identifier] `string`
[ 387: 388:  separator] `,`
[ 389: 395: identifier] `prefix`
[ 395: 396:   operator] `:`
[ 397: 403: identifier] `string`
[ 403: 404:  separator] `)`
[ 405: 407:   operator] `->`
[ 408: 412: identifier] `bool`
[ 413: 414:  separator] `{`
[ 416: 418: identifier] `if`
[ 419: 422: identifier] `len`
[ 422: 423:  separator] `(`
[ 423: 429: identifier] `prefix`
[ 429: 430:  separator] `)`
[ 431: 432:   operator] `>`
[ 433: 436: identifier] `len`
[ 436: 437:  separator] `(`
[ 437: 443: identifier] `source`
[ 443: 444:  separator] `)`
[ 445: 446:  separator] `{`
[ 449: 455: identifier] `return`
[ 456: 461: identifier] `false`
[ 461: 462:  separator] `;`
[ 464: 465:  separator] `}`
[ 467: 470: identifier] `mut`
[ 471: 474: identifier] `idx`
[ 475: 476:   operator] `:`
[ 476: 477:   operator] `=`
[ 478: 482: identifier] `uint`
[ 482: 483:  separator] `(`
[ 483: 484:     number] `0`
[ 484: 485:  separator] `)`
[ 485: 486:  separator] `;`
[ 488: 491: identifier] `for`
[ 492: 495: identifier] `idx`
[ 496: 497:   operator] `<`
[ 498: 501: identifier] `len`
[ 501: 502:  separator] `(`
[ 502: 508: identifier] `prefix`
[ 508: 509:  separator] `)`
[ 510: 511:  separator] `{`
[ 514: 516: identifier] `if`
[ 517: 523: identifier] `source`
[ 523: 524:  separator] `[`
[ 524: 527: identifier] `idx`
[ 527: 528:  separator] `]`
[ 529: 531:   operator] `!=`
[ 532: 538: identifier] `prefix`
[ 538: 539:  separator] `[`
[ 539: 542: identifier] `idx`
[ 542: 543:  separator] `]`
[ 544: 545:  separator] `{`
[ 549: 555: identifier] `return`
[ 556: 561: identifier] `false`
[ 561: 562:  separator] `;`
[ 565: 566:  separator] `}`
[ 569: 572: identifier] `idx`
[ 573: 574:   operator] `+`
[ 574: 575:   operator] `=`
[ 576: 577:     number] `1`
[ 577: 578:  separator] `;`
[ 580: 581:  separator] `}`
[ 583: 589: identifier] `return`
[ 590: 594: identifier] `true`
[ 594: 595:  separator] `;`
[ 596: 597:  separator] `}`
[ 599: 602: identifier] `pub`
[ 603: 607: identifier] `func`
[ 608: 617: identifier] `hasSuffix`
[ 617: 618:  separator] `(`
[ 618: 624: identifier] `source`
[ 624: 625:   operator] `:`
[ 626: 632: identifier] `string`
[ 632: 633:  separator] `,`
[ 634: 640: identifier] `suffix`
[ 640: 641:   operator] `:`
[ 642: 648: identifier] `string`
[ 648: 649:  separator] `)`
[ 650: 652:   operator] `->`
[ 653: 657: identifier] `bool`
[ 658: 659:  separator] `{`
[ 663: 665: identifier] `if`
[ 666: 669: identifier] `len`
[ 669: 670:  separator] `(`
[ 670: 676: identifier] `suffix`
[ 676: 677:  separator] `)`
[ 678: 679:   operator] `>`
[ 680: 683: identifier] `len`
[ 683: 684:  separator] `(`
[ 684: 690: identifier] `source`
[ 690: 691:  separator] `)`
[ 692: 693:  separator] `{`
[ 696: 702: identifier] `return`
[ 703: 708: identifier] `false`
[ 708: 709:  separator] `;`
[ 711: 712:  separator] `}`
[ 715: 718: identifier] `mut`
[ 719: 722: identifier] `idx`
[ 723: 724:   operator] `:`
[ 724: 725:   operator] `=`
[ 726: 729: identifier] `len`
[ 729: 730:  separator] `(`
[ 730: 736: identifier] `source`
[ 736: 737:  separator] `)`
[ 738: 739:   operator] `-`
[ 740: 743: identifier] `len`
[ 743: 744:  separator] `(`
[ 744: 750: identifier] `suffix`
[ 750: 751:  separator] `)`
[ 751: 752:  separator] `;`
[ 811: 814: identifier] `for`
[ 815: 818: identifier] `idx`
[ 819: 820:   operator] `<`
[ 821: 824: identifier] `len`
[ 824: 825:  separator] `(`
[ 825: 831: identifier] `suffix`
[ 831: 832:  separator] `)`
[ 833: 834:   operator] `-`
[ 835: 838: identifier] `idx`
[ 839: 840:  separator] `{`
[ 843: 845: identifier] `if`
[ 846: 852: identifier] `source`
[ 852: 853:  separator] `[`
[ 853: 856: identifier] `idx`
[ 856: 857:  separator] `]`
[ 858: 860:   operator] `!=`
[ 861: 867: identifier] `suffix`
[ 867: 868:  separator] `[`
[ 868: 871: identifier] `idx`
[ 871: 872:  separator] `]`
[ 873: 874:  separator] `{`
[ 878: 884: identifier] `return`
[ 885: 890: identifier] `false`
[ 890: 891:  separator] `;`
[ 894: 895:  separator] `}`
[ 898: 901: identifier] `idx`
[ 902: 903:   operator] `+`
[ 903: 904:   operator] `=`
[ 905: 906:     number] `1`
[ 906: 907:  separator] `;`
[ 909: 910:  separator] `}`
[ 912: 918: identifier] `return`
[ 919: 923: identifier] `true`
[ 923: 924:  separator] `;`
[ 925: 926:  separator] `}`
[ 928: 931: identifier] `pub`
[ 932: 936: identifier] `func`
[ 937: 944: identifier] `compare`
[ 944: 945:  separator] `(`
[ 945: 946: identifier] `a`
[ 946: 947:   operator] `:`
[ 948: 954: identifier] `string`
[ 954: 955:  separator] `,`
[ 956: 957: identifier] `b`
[ 957: 958:   operator] `:`
[ 959: 965: identifier] `string`
[ 965: 966:  separator] `)`
[ 967: 969:   operator] `->`
[ 970: 974: identifier] `bool`
[ 975: 976:  separator] `{`
[ 978: 980: identifier] `if`
[ 981: 984: identifier] `len`
[ 984: 985:  separator] `(`
[ 985: 986: identifier] `a`
[ 986: 987:  separator] `)`
[ 988: 990:   operator] `!=`
[ 991: 994: identifier] `len`
[ 994: 995:  separator] `(`
[ 995: 996: identifier] `b`
[ 996: 997:  separator] `)`
[ 998: 999:  separator] `{`
[1002:1008: identifier] `return`
[1009:1014: identifier] `false`
[1014:1015:  separator] `;`
[1017:1018:  separator] `}`
[1021:1024: identifier] `mut`
[1025:1026: identifier] `i`
[1027:1028:   operator] `:`
[1028:1029:   operator] `=`
[1030:1034: identifier] `uint`
[1034:1035:  separator] `(`
[1035:1036:     number] `0`
[1036:1037:  separator] `)`
[1037:1038:  separator] `;`
[1040:1043: identifier] `for`
[1044:1045: identifier] `i`
[1046:1047:   operator] `<`
[1048:1051: identifier] `len`
[1051:1052:  separator] `(`
[1052:1053: identifier] `a`
[1053:1054:  separator] `)`
[1055:1056:  separator] `{`
[1059:1061: identifier] `if`
[1062:1063: identifier] `a`
[1063:1064:  separator] `[`
[1064:1065: identifier] `i`
[1065:1066:  separator] `]`
[1067:1069:   operator] `!=`
[1070:1071: identifier] `b`
[1071:1072:  separator] `[`
[1072:1073: identifier] `i`
[1073:1074:  separator] `]`
[1075:1076:  separator] `{`
[1080:1086: identifier] `return`
[1087:1092: identifier] `false`
[1092:1093:  separator] `;`
[1096:1097:  separator] `}`
[1099:1100:  separator] `}`
[1103:1109: identifier] `return`
[1110:1114: identifier] `true`
[1114:1115:  separator] `;`
[1116:1117:  separator] `}`
 [32mEnded lexing[00m util (1.90ms)
 [32mStarted parsing[00m util
 [32mEnded parsing[00m util (1.23ms)
 [32mStarted lexing[00m mem
[  59:  62: identifier] `pub`
[  63:  67: identifier] `func`
[  68:  73: identifier] `alloc`
[  73:  74:   operator] `<`
[  74:  75: identifier] `T`
[  75:  76:   operator] `>`
[  76:  77:  separator] `(`
[  77:  78:  separator] `)`
[  79:  81:   operator] `->`
[  82:  83:   operator] `^`
[  83:  86: identifier] `mut`
[  87:  88: identifier] `T`
[  89:  90:  separator] `{`
[  95: 101: identifier] `return`
[ 102: 103:  separator] `(`
[ 103: 104:   operator] `^`
[ 104: 107: identifier] `mut`
[ 108: 109: identifier] `T`
[ 109: 110:  separator] `)`
[ 110: 111:  separator] `(`
[ 111: 119: identifier] `rawAlloc`
[ 119: 120:  separator] `(`
[ 120: 126: identifier] `sizeof`
[ 126: 127:  separator] `(`
[ 127: 128: identifier] `T`
[ 128: 129:  separator] `)`
[ 129: 130:  separator] `)`
[ 130: 131:  separator] `)`
[ 131: 132:  separator] `;`
[ 133: 134:  separator] `}`
[ 180: 184: identifier] `type`
[ 185: 193: identifier] `RawArray`
[ 194: 200: identifier] `struct`
[ 201: 202:  separator] `{`
[ 207: 211: identifier] `size`
[ 211: 212:   operator] `:`
[ 213: 217: identifier] `uint`
[ 217: 218:  separator] `,`
[ 223: 226: identifier] `ptr`
[ 226: 227:   operator] `:`
[ 228: 229:   operator] `^`
[ 229: 231: identifier] `u8`
[ 231: 232:  separator] `,`
[ 233: 234:  separator] `}`
[ 234: 235:  separator] `;`
[ 237: 240: identifier] `pub`
[ 241: 245: identifier] `func`
[ 246: 256: identifier] `allocArray`
[ 256: 257:   operator] `<`
[ 257: 258: identifier] `T`
[ 258: 259:   operator] `>`
[ 259: 260:  separator] `(`
[ 260: 263: identifier] `num`
[ 263: 264:   operator] `:`
[ 265: 269: identifier] `uint`
[ 269: 270:  separator] `)`
[ 271: 273:   operator] `->`
[ 274: 275:  separator] `[`
[ 275: 276:  separator] `]`
[ 276: 277: identifier] `T`
[ 278: 279:  separator] `{`
[ 284: 290: identifier] `rawPtr`
[ 291: 292:   operator] `:`
[ 292: 293:   operator] `=`
[ 294: 295:  separator] `(`
[ 295: 296:   operator] `^`
[ 296: 298: identifier] `u8`
[ 298: 299:  separator] `)`
[ 299: 300:  separator] `(`
[ 300: 308: identifier] `rawAlloc`
[ 308: 309:  separator] `(`
[ 309: 315: identifier] `sizeof`
[ 315: 316:  separator] `(`
[ 316: 317: identifier] `T`
[ 317: 318:  separator] `)`
[ 319: 320:   operator] `*`
[ 321: 324: identifier] `num`
[ 324: 325:  separator] `)`
[ 325: 326:  separator] `)`
[ 326: 327:  separator] `;`
[ 333: 341: identifier] `rawArray`
[ 342: 343:   operator] `:`
[ 343: 344:   operator] `=`
[ 345: 353: identifier] `RawArray`
[ 353: 354:  separator] `{`
[ 363: 367: identifier] `size`
[ 367: 368:   operator] `:`
[ 369: 372: identifier] `num`
[ 372: 373:  separator] `,`
[ 382: 385: identifier] `ptr`
[ 385: 386:   operator] `:`
[ 387: 393: identifier] `rawPtr`
[ 393: 394:  separator] `,`
[ 399: 400:  separator] `}`
[ 400: 401:  separator] `;`
[ 407: 413: identifier] `arrPtr`
[ 414: 415:   operator] `:`
[ 415: 416:   operator] `=`
[ 417: 418:  separator] `(`
[ 418: 419:   operator] `^`
[ 419: 420:  separator] `[`
[ 420: 421:  separator] `]`
[ 421: 422: identifier] `T`
[ 422: 423:  separator] `)`
[ 423: 424:  separator] `(`
[ 424: 431: identifier] `uintptr`
[ 431: 432:  separator] `(`
[ 432: 433:   operator] `^`
[ 433: 441: identifier] `rawArray`
[ 441: 442:  separator] `)`
[ 442: 443:  separator] `)`
[ 443: 444:  separator] `;`
[ 450: 456: identifier] `return`
[ 457: 458:   operator] `@`
[ 458: 464: identifier] `arrPtr`
[ 464: 465:  separator] `;`
[ 466: 467:  separator] `}`
[ 469: 472: identifier] `pub`
[ 473: 477: identifier] `func`
[ 478: 487: identifier] `copyArray`
[ 487: 488:   operator] `<`
[ 488: 489: identifier] `T`
[ 489: 490:   operator] `>`
[ 490: 491:  separator] `(`
[ 491: 494: identifier] `mut`
[ 495: 499: identifier] `dest`
[ 499: 500:   operator] `:`
[ 501: 502:  separator] `[`
[ 502: 503:  separator] `]`
[ 503: 504: identifier] `T`
[ 504: 505:  separator] `,`
[ 506: 509: identifier] `src`
[ 509: 510:   operator] `:`
[ 511: 512:  separator] `[`
[ 512: 513:  separator] `]`
[ 513: 514: identifier] `T`
[ 514: 515:  separator] `,`
[ 516: 519: identifier] `num`
[ 519: 520:   operator] `:`
[ 521: 525: identifier] `uint`
[ 525: 526:  separator] `)`
[ 527: 528:  separator] `{`
[ 533: 536: identifier] `mut`
[ 537: 540: identifier] `max`
[ 541: 542:   operator] `:`
[ 542: 543:   operator] `=`
[ 544: 547: identifier] `num`
[ 547: 548:  separator] `;`
[ 553: 555: identifier] `if`
[ 556: 559: identifier] `max`
[ 560: 561:   operator] `>`
[ 562: 565: identifier] `len`
[ 565: 566:  separator] `(`
[ 566: 570: identifier] `dest`
[ 570: 571:  separator] `)`
[ 572: 573:  separator] `{`
[ 582: 585: identifier] `max`
[ 586: 587:   operator] `=`
[ 588: 591: identifier] `len`
[ 591: 592:  separator] `(`
[ 592: 596: identifier] `dest`
[ 596: 597:  separator] `)`
[ 597: 598:  separator] `;`
[ 603: 604:  separator] `}`
[ 609: 611: identifier] `if`
[ 612: 615: identifier] `max`
[ 616: 617:   operator] `>`
[ 618: 621: identifier] `len`
[ 621: 622:  separator] `(`
[ 622: 625: identifier] `src`
[ 625: 626:  separator] `)`
[ 627: 628:  separator] `{`
[ 637: 640: identifier] `max`
[ 641: 642:   operator] `=`
[ 643: 646: identifier] `len`
[ 646: 647:  separator] `(`
[ 647: 650: identifier] `src`
[ 650: 651:  separator] `)`
[ 651: 652:  separator] `;`
[ 657: 658:  separator] `}`
[ 664: 667: identifier] `mut`
[ 668: 669: identifier] `i`
[ 669: 670:   operator] `:`
[ 671: 675: identifier] `uint`
[ 676: 677:   operator] `=`
[ 678: 679:     number] `0`
[ 679: 680:  separator] `;`
[ 685: 688: identifier] `for`
[ 689: 690: identifier] `i`
[ 691: 692:   operator] `<`
[ 693: 696: identifier] `max`
[ 697: 698:  separator] `{`
[ 707: 711: identifier] `dest`
[ 711: 712:  separator] `[`
[ 712: 713: identifier] `i`
[ 713: 714:  separator] `]`
[ 715: 716:   operator] `=`
[ 717: 720: identifier] `src`
[ 720: 721:  separator] `[`
[ 721: 722: identifier] `i`
[ 722: 723:  separator] `]`
[ 723: 724:  separator] `;`
[ 733: 734: identifier] `i`
[ 735: 736:   operator] `+`
[ 736: 737:   operator] `=`
[ 738: 739:     number] `1`
[ 739: 740:  separator] `;`
[ 745: 746:  separator] `}`
[ 747: 748:  separator] `}`
[ 750: 753: identifier] `pub`
[ 754: 758: identifier] `func`
[ 759: 763: identifier] `free`
[ 763: 764:   operator] `<`
[ 764: 765: identifier] `T`
[ 765: 766:   operator] `>`
[ 766: 767:  separator] `(`
[ 767: 770: identifier] `ptr`
[ 770: 771:   operator] `:`
[ 772: 773:   operator] `^`
[ 773: 774: identifier] `T`
[ 774: 775:  separator] `)`
[ 776: 777:  separator] `{`
[ 782: 789: identifier] `rawFree`
[ 789: 790:  separator] `(`
[ 790: 797: identifier] `uintptr`
[ 797: 798:  separator] `(`
[ 798: 801: identifier] `ptr`
[ 801: 802:  separator] `)`
[ 802: 803:  separator] `)`
[ 803: 804:  separator] `;`
[ 805: 806:  separator] `}`
[ 808: 811: identifier] `pub`
[ 812: 816: identifier] `func`
[ 817: 826: identifier] `freeArray`
[ 826: 827:   operator] `<`
[ 827: 828: identifier] `T`
[ 828: 829:   operator] `>`
[ 829: 830:  separator] `(`
[ 830: 835: identifier] `array`
[ 835: 836:   operator] `:`
[ 837: 838:  separator] `[`
[ 838: 839:  separator] `]`
[ 839: 840: identifier] `T`
[ 840: 841:  separator] `)`
[ 842: 843:  separator] `{`
[ 848: 851: identifier] `mut`
[ 852: 860: identifier] `rawArray`
[ 861: 862:   operator] `:`
[ 862: 863:   operator] `=`
[ 864: 865:   operator] `@`
[ 865: 866:  separator] `(`
[ 866: 867:  separator] `(`
[ 867: 868:   operator] `^`
[ 868: 876: identifier] `RawArray`
[ 876: 877:  separator] `)`
[ 877: 878:  separator] `(`
[ 878: 885: identifier] `uintptr`
[ 885: 886:  separator] `(`
[ 886: 887:   operator] `&`
[ 887: 892: identifier] `array`
[ 892: 893:  separator] `)`
[ 893: 894:  separator] `)`
[ 894: 895:  separator] `)`
[ 895: 896:  separator] `;`
[ 901: 908: identifier] `rawFree`
[ 908: 909:  separator] `(`
[ 909: 916: identifier] `uintptr`
[ 916: 917:  separator] `(`
[ 917: 925: identifier] `rawArray`
[ 925: 926:  separator] `.`
[ 926: 929: identifier] `ptr`
[ 929: 930:  separator] `)`
[ 930: 931:  separator] `)`
[ 931: 932:  separator] `;`
[ 933: 934:  separator] `}`
 [32mEnded lexing[00m mem (1.55ms)
 [32mStarted parsing[00m mem
 [32mEnded parsing[00m mem (0.83ms)
 [32mStarted lexing[00m raw
[   0:   1:  separator] `[`
[   1:   2: identifier] `c`
[   2:   3:  separator] `]`
[   4:   8: identifier] `func`
[   9:  15: identifier] `malloc`
[  15:  16:  separator] `(`
[  16:  20: identifier] `size`
[  20:  21:   operator] `:`
[  22:  26: identifier] `uint`
[  26:  27:  separator] `)`
[  28:  30:   operator] `->`
[  31:  32:   operator] `^`
[  32:  33: identifier] `C`
[  33:  35:   operator] `::`
[  35:  39: identifier] `void`
[  39:  40:  separator] `;`
[  41:  42:  separator] `[`
[  42:  43: identifier] `c`
[  43:  44:  separator] `]`
[  45:  49: identifier] `func`
[  50:  54: identifier] `free`
[  54:  55:  separator] `(`
[  55:  58: identifier] `ptr`
[  58:  59:   operator] `:`
[  60:  61:   operator] `^`
[  61:  62: identifier] `C`
[  62:  64:   operator] `::`
[  64:  68: identifier] `void`
[  68:  69:  separator] `)`
[  69:  70:  separator] `;`
[  72:  75: identifier] `pub`
[  76:  80: identifier] `func`
[  81:  89: identifier] `rawAlloc`
[  89:  90:  separator] `(`
[  90:  95: identifier] `bytes`
[  95:  96:   operator] `:`
[  97: 101: identifier] `uint`
[ 101: 102:  separator] `)`
[ 103: 105:   operator] `->`
[ 106: 113: identifier] `uintptr`
[ 114: 115:  separator] `{`
[ 120: 126: identifier] `return`
[ 127: 134: identifier] `uintptr`
[ 134: 135:  separator] `(`
[ 135: 136: identifier] `C`
[ 136: 138:   operator] `::`
[ 138: 144: identifier] `malloc`
[ 144: 145:  separator] `(`
[ 145: 150: identifier] `bytes`
[ 150: 151:  separator] `)`
[ 151: 152:  separator] `)`
[ 152: 153:  separator] `;`
[ 154: 155:  separator] `}`
[ 157: 160: identifier] `pub`
[ 161: 165: identifier] `func`
[ 166: 173: identifier] `rawFree`
[ 173: 174:  separator] `(`
[ 174: 177: identifier] `ptr`
[ 177: 178:   operator] `:`
[ 179: 186: identifier] `uintptr`
[ 186: 187:  separator] `)`
[ 188: 189:  separator] `{`
[ 194: 195: identifier] `C`
[ 195: 197:   operator] `::`
[ 197: 201: identifier] `free`
[ 201: 202:  separator] `(`
[ 202: 203:  separator] `(`
[ 203: 204:   operator] `^`
[ 204: 205: identifier] `C`
[ 205: 207:   operator] `::`
[ 207: 211: identifier] `void`
[ 211: 212:  separator] `)`
[ 212: 213:  separator] `(`
[ 213: 216: identifier] `ptr`
[ 216: 217:  separator] `)`
[ 217: 218:  separator] `)`
[ 218: 219:  separator] `;`
[ 220: 221:  separator] `}`
 [32mEnded lexing[00m raw (0.45ms)
 [32mStarted parsing[00m raw
 [32mEnded parsing[00m raw (0.15ms)
 [32mStarted lexing[00m coding
[   0:  14: identifier] `TRAILING_BYTES`
[  15:  16:   operator] `:`
[  16:  17:   operator] `=`
[  18:  19:  separator] `[`
[  19:  20:  separator] `]`
[  20:  22: identifier] `u8`
[  22:  23:  separator] `{`
[  25:  26:     number] `0`
[  26:  27:  separator] `,`
[  27:  28:     number] `0`
[  28:  29:  separator] `,`
[  29:  30:     number] `0`
[  30:  31:  separator] `,`
[  31:  32:     number] `0`
[  32:  33:  separator] `,`
[  33:  34:     number] `0`
[  34:  35:  separator] `,`
[  35:  36:     number] `0`
[  36:  37:  separator] `,`
[  37:  38:     number] `0`
[  38:  39:  separator] `,`
[  39:  40:     number] `0`
[  40:  41:  separator] `,`
[  41:  42:     number] `0`
[  42:  43:  separator] `,`
[  43:  44:     number] `0`
[  44:  45:  separator] `,`
[  45:  46:     number] `0`
[  46:  47:  separator] `,`
[  47:  48:     number] `0`
[  48:  49:  separator] `,`
[  49:  50:     number] `0`
[  50:  51:  separator] `,`
[  51:  52:     number] `0`
[  52:  53:  separator] `,`
[  53:  54:     number] `0`
[  54:  55:  separator] `,`
[  55:  56:     number] `0`
[  56:  57:  separator] `,`
[  58:  59:     number] `0`
[  59:  60:  separator] `,`
[  60:  61:     number] `0`
[  61:  62:  separator] `,`
[  62:  63:     number] `0`
[  63:  64:  separator] `,`
[  64:  65:     number] `0`
[  65:  66:  separator] `,`
[  66:  67:     number] `0`
[  67:  68:  separator] `,`
[  68:  69:     number] `0`
[  69:  70:  separator] `,`
[  70:  71:     number] `0`
[  71:  72:  separator] `,`
[  72:  73:     number] `0`
[  73:  74:  separator] `,`
[  74:  75:     number] `0`
[  75:  76:  separator] `,`
[  76:  77:     number] `0`
[  77:  78:  separator] `,`
[  78:  79:     number] `0`
[  79:  80:  separator] `,`
[  80:  81:     number] `0`
[  81:  82:  separator] `,`
[  82:  83:     number] `0`
[  83:  84:  separator] `,`
[  84:  85:     number] `0`
[  85:  86:  separator] `,`
[  86:  87:     number] `0`
[  87:  88:  separator] `,`
[  88:  89:     number] `0`
[  89:  90:  separator] `,`
[  95:  96:     number] `0`
[  96:  97:  separator] `,`
[  97:  98:     number] `0`
[  98:  99:  separator] `,`
[  99: 100:     number] `0`
[ 100: 101:  separator] `,`
[ 101: 102:     number] `0`
[ 102: 103:  separator] `,`
[ 103: 104:     number] `0`
[ 104: 105:  separator] `,`
[ 105: 106:     number] `0`
[ 106: 107:  separator] `,`
[ 107: 108:     number] `0`
[ 108: 109:  separator] `,`
[ 109: 110:     number] `0`
[ 110: 111:  separator] `,`
[ 111: 112:     number] `0`
[ 112: 113:  separator] `,`
[ 113: 114:     number] `0`
[ 114: 115:  separator] `,`
[ 115: 116:     number] `0`
[ 116: 117:  separator] `,`
[ 117: 118:     number] `0`
[ 118: 119:  separator] `,`
[ 119: 120:     number] `0`
[ 120: 121:  separator] `,`
[ 121: 122:     number] `0`
[ 122: 123:  separator] `,`
[ 123: 124:     number] `0`
[ 124: 125:  separator] `,`
[ 125: 126:     number] `0`
[ 126: 127:  separator] `,`
[ 128: 129:     number] `0`
[ 129: 130:  separator] `,`
[ 130: 131:     number] `0`
[ 131: 132:  separator] `,`
[ 132: 133:     number] `0`
[ 133: 134:  separator] `,`
[ 134: 135:     number] `0`
[ 135: 136:  separator] `,`
[ 136: 137:     number] `0`
[ 137: 138:  separator] `,`
[ 138: 139:     number] `0`
[ 139: 140:  separator] `,`
[ 140: 141:     number] `0`
[ 141: 142:  separator] `,`
[ 142: 143:     number] `0`
[ 143: 144:  separator] `,`
[ 144: 145:     number] `0`
[ 145: 146:  separator] `,`
[ 146: 147:     number] `0`
[ 147: 148:  separator] `,`
[ 148: 149:     number] `0`
[ 149: 150:  separator] `,`
[ 150: 151:     number] `0`
[ 151: 152:  separator] `,`
[ 152: 153:     number] `0`
[ 153: 154:  separator] `,`
[ 154: 155:     number] `0`
[ 155: 156:  separator] `,`
[ 156: 157:     number] `0`
[ 157: 158:  separator] `,`
[ 158: 159:     number] `0`
[ 159: 160:  separator] `,`
[ 165: 166:     number] `0`
[ 166: 167:  separator] `,`
[ 167: 168:     number] `0`
[ 168: 169:  separator] `,`
[ 169: 170:     number] `0`
[ 170: 171:  separator] `,`
[ 171: 172:     number] `0`
[ 172: 173:  separator] `,`
[ 173: 174:     number] `0`
[ 174: 175:  separator] `,`
[ 175: 176:     number] `0`
[ 176: 177:  separator] `,`
[ 177: 178:     number] `0`
[ 178: 179:  separator] `,`
[ 179: 180:     number] `0`
[ 180: 181:  separator] `,`
[ 181: 182:     number] `0`
[ 182: 183:  separator] `,`
[ 183: 184:     number] `0`
[ 184: 185:  separator] `,`
[ 185: 186:     number] `0`
[ 186: 187:  separator] `,`
[ 187: 188:     number] `0`
[ 188: 189:  separator] `,`
[ 189: 190:     number] `0`
[ 190: 191:  separator] `,`
[ 191: 192:     number] `0`
[ 192: 193:  separator] `,`
[ 193: 194:     number] `0`
[ 194: 195:  separator] `,`
[ 195: 196:     number] `0`
[ 196: 197:  separator] `,`
[ 198: 199:     number] `0`
[ 199: 200:  separator] `,`
[ 200: 201:     number] `0`
[ 201: 202:  separator] `,`
[ 202: 203:     number] `0`
[ 203: 204:  separator] `,`
[ 204: 205:     number] `0`
[ 205: 206:  separator] `,`
[ 206: 207:     number] `0`
[ 207: 208:  separator] `,`
[ 208: 209:     number] `0`
[ 209: 210:  separator] `,`
[ 210: 211:     number] `0`
[ 211: 212:  separator] `,`
[ 212: 213:     number] `0`
[ 213: 214:  separator] `,`
[ 214: 215:     number] `0`
[ 215: 216:  separator] `,`
[ 216: 217:     number] `0`
[ 217: 218:  separator] `,`
[ 218: 219:     number] `0`
[ 219: 220:  separator] `,`
[ 220: 221:     number] `0`
[ 221: 222:  separator] `,`
[ 222: 223:     number] `0`
[ 223: 224:  separator] `,`
[ 224: 225:     number] `0`
[ 225: 226:  separator] `,`
[ 226: 227:     number] `0`
[ 227: 228:  separator] `,`
[ 228: 229:     number] `0`
[ 229: 230:  separator] `,`
[ 235: 236:     number] `0`
[ 236: 237:  separator] `,`
[ 237: 238:     number] `0`
[ 238: 239:  separator] `,`
[ 239: 240:     number] `0`
[ 240: 241:  separator] `,`
[ 241: 242:     number] `0`
[ 242: 243:  separator] `,`
[ 243: 244:     number] `0`
[ 244: 245:  separator] `,`
[ 245: 246:     number] `0`
[ 246: 247:  separator] `,`
[ 247: 248:     number] `0`
[ 248: 249:  separator] `,`
[ 249: 250:     number] `0`
[ 250: 251:  separator] `,`
[ 251: 252:     number] `0`
[ 252: 253:  separator] `,`
[ 253: 254:     number] `0`
[ 254: 255:  separator] `,`
[ 255: 256:     number] `0`
[ 256: 257:  separator] `,`
[ 257: 258:     number] `0`
[ 258: 259:  separator] `,`
[ 259: 260:     number] `0`
[ 260: 261:  separator] `,`
[ 261: 262:     number] `0`
[ 262: 263:  separator] `,`
[ 263: 264:     number] `0`
[ 264: 265:  separator] `,`
[ 265: 266:     number] `0`
[ 266: 267:  separator] `,`
[ 268: 269:     number] `0`
[ 269: 270:  separator] `,`
[ 270: 271:     number] `0`
[ 271: 272:  separator] `,`
[ 272: 273:     number] `0`
[ 273: 274:  separator] `,`
[ 274: 275:     number] `0`
[ 275: 276:  separator] `,`
[ 276: 277:     number] `0`
[ 277: 278:  separator] `,`
[ 278: 279:     number] `0`
[ 279: 280:  separator] `,`
[ 280: 281:     number] `0`
[ 281: 282:  separator] `,`
[ 282: 283:     number] `0`
[ 283: 284:  separator] `,`
[ 284: 285:     number] `0`
[ 285: 286:  separator] `,`
[ 286: 287:     number] `0`
[ 287: 288:  separator] `,`
[ 288: 289:     number] `0`
[ 289: 290:  separator] `,`
[ 290: 291:     number] `0`
[ 291: 292:  separator] `,`
[ 292: 293:     number] `0`
[ 293: 294:  separator] `,`
[ 294: 295:     number] `0`
[ 295: 296:  separator] `,`
[ 296: 297:     number] `0`
[ 297: 298:  separator] `,`
[ 298: 299:     number] `0`
[ 299: 300:  separator] `,`
[ 305: 306:     number] `0`
[ 306: 307:  separator] `,`
[ 307: 308:     number] `0`
[ 308: 309:  separator] `,`
[ 309: 310:     number] `0`
[ 310: 311:  separator] `,`
[ 311: 312:     number] `0`
[ 312: 313:  separator] `,`
[ 313: 314:     number] `0`
[ 314: 315:  separator] `,`
[ 315: 316:     number] `0`
[ 316: 317:  separator] `,`
[ 317: 318:     number] `0`
[ 318: 319:  separator] `,`
[ 319: 320:     number] `0`
[ 320: 321:  separator] `,`
[ 321: 322:     number] `0`
[ 322: 323:  separator] `,`
[ 323: 324:     number] `0`
[ 324: 325:  separator] `,`
[ 325: 326:     number] `0`
[ 326: 327:  separator] `,`
[ 327: 328:     number] `0`
[ 328: 329:  separator] `,`
[ 329: 330:     number] `0`
[ 330: 331:  separator] `,`
[ 331: 332:     number] `0`
[ 332: 333:  separator] `,`
[ 333: 334:     number] `0`
[ 334: 335:  separator] `,`
[ 335: 336:     number] `0`
[ 336: 337:  separator] `,`
[ 338: 339:     number] `0`
[ 339: 340:  separator] `,`
[ 340: 341:     number] `0`
[ 341: 342:  separator] `,`
[ 342: 343:     number] `0`
[ 343: 344:  separator] `,`
[ 344: 345:     number] `0`
[ 345: 346:  separator] `,`
[ 346: 347:     number] `0`
[ 347: 348:  separator] `,`
[ 348: 349:     number] `0`
[ 349: 350:  separator] `,`
[ 350: 351:     number] `0`
[ 351: 352:  separator] `,`
[ 352: 353:     number] `0`
[ 353: 354:  separator] `,`
[ 354: 355:     number] `0`
[ 355: 356:  separator] `,`
[ 356: 357:     number] `0`
[ 357: 358:  separator] `,`
[ 358: 359:     number] `0`
[ 359: 360:  separator] `,`
[ 360: 361:     number] `0`
[ 361: 362:  separator] `,`
[ 362: 363:     number] `0`
[ 363: 364:  separator] `,`
[ 364: 365:     number] `0`
[ 365: 366:  separator] `,`
[ 366: 367:     number] `0`
[ 367: 368:  separator] `,`
[ 368: 369:     number] `0`
[ 369: 370:  separator] `,`
[ 375: 376:     number] `0`
[ 376: 377:  separator] `,`
[ 377: 378:     number] `0`
[ 378: 379:  separator] `,`
[ 379: 380:     number] `0`
[ 380: 381:  separator] `,`
[ 381: 382:     number] `0`
[ 382: 383:  separator] `,`
[ 383: 384:     number] `0`
[ 384: 385:  separator] `,`
[ 385: 386:     number] `0`
[ 386: 387:  separator] `,`
[ 387: 388:     number] `0`
[ 388: 389:  separator] `,`
[ 389: 390:     number] `0`
[ 390: 391:  separator] `,`
[ 391: 392:     number] `0`
[ 392: 393:  separator] `,`
[ 393: 394:     number] `0`
[ 394: 395:  separator] `,`
[ 395: 396:     number] `0`
[ 396: 397:  separator] `,`
[ 397: 398:     number] `0`
[ 398: 399:  separator] `,`
[ 399: 400:     number] `0`
[ 400: 401:  separator] `,`
[ 401: 402:     number] `0`
[ 402: 403:  separator] `,`
[ 403: 404:     number] `0`
[ 404: 405:  separator] `,`
[ 405: 406:     number] `0`
[ 406: 407:  separator] `,`
[ 408: 409:     number] `0`
[ 409: 410:  separator] `,`
[ 410: 411:     number] `0`
[ 411: 412:  separator] `,`
[ 412: 413:     number] `0`
[ 413: 414:  separator] `,`
[ 414: 415:     number] `0`
[ 415: 416:  separator] `,`
[ 416: 417:     number] `0`
[ 417: 418:  separator] `,`
[ 418: 419:     number] `0`
[ 419: 420:  separator] `,`
[ 420: 421:     number] `0`
[ 421: 422:  separator] `,`
[ 422: 423:     number] `0`
[ 423: 424:  separator] `,`
[ 424: 425:     number] `0`
[ 425: 426:  separator] `,`
[ 426: 427:     number] `0`
[ 427: 428:  separator] `,`
[ 428: 429:     number] `0`
[ 429: 430:  separator] `,`
[ 430: 431:     number] `0`
[ 431: 432:  separator] `,`
[ 432: 433:     number] `0`
[ 433: 434:  separator] `,`
[ 434: 435:     number] `0`
[ 435: 436:  separator] `,`
[ 436: 437:     number] `0`
[ 437: 438:  separator] `,`
[ 438: 439:     number] `0`
[ 439: 440:  separator] `,`
[ 445: 446:     number] `1`
[ 446: 447:  separator] `,`
[ 447: 448:     number] `1`
[ 448: 449:  separator] `,`
[ 449: 450:     number] `1`
[ 450: 451:  separator] `,`
[ 451: 452:     number] `1`
[ 452: 453:  separator] `,`
[ 453: 454:     number] `1`
[ 454: 455:  separator] `,`
[ 455: 456:     number] `1`
[ 456: 457:  separator] `,`
[ 457: 458:     number] `1`
[ 458: 459:  separator] `,`
[ 459: 460:     number] `1`
[ 460: 461:  separator] `,`
[ 461: 462:     number] `1`
[ 462: 463:  separator] `,`
[ 463: 464:     number] `1`
[ 464: 465:  separator] `,`
[ 465: 466:     number] `1`
[ 466: 467:  separator] `,`
[ 467: 468:     number] `1`
[ 468: 469:  separator] `,`
[ 469: 470:     number] `1`
[ 470: 471:  separator] `,`
[ 471: 472:     number] `1`
[ 472: 473:  separator] `,`
[ 473: 474:     number] `1`
[ 474: 475:  separator] `,`
[ 475: 476:     number] `1`
[ 476: 477:  separator] `,`
[ 478: 479:     number] `1`
[ 479: 480:  separator] `,`
[ 480: 481:     number] `1`
[ 481: 482:  separator] `,`
[ 482: 483:     number] `1`
[ 483: 484:  separator] `,`
[ 484: 485:     number] `1`
[ 485: 486:  separator] `,`
[ 486: 487:     number] `1`
[ 487: 488:  separator] `,`
[ 488: 489:     number] `1`
[ 489: 490:  separator] `,`
[ 490: 491:     number] `1`
[ 491: 492:  separator] `,`
[ 492: 493:     number] `1`
[ 493: 494:  separator] `,`
[ 494: 495:     number] `1`
[ 495: 496:  separator] `,`
[ 496: 497:     number] `1`
[ 497: 498:  separator] `,`
[ 498: 499:     number] `1`
[ 499: 500:  separator] `,`
[ 500: 501:     number] `1`
[ 501: 502:  separator] `,`
[ 502: 503:     number] `1`
[ 503: 504:  separator] `,`
[ 504: 505:     number] `1`
[ 505: 506:  separator] `,`
[ 506: 507:     number] `1`
[ 507: 508:  separator] `,`
[ 508: 509:     number] `1`
[ 509: 510:  separator] `,`
[ 515: 516:     number] `2`
[ 516: 517:  separator] `,`
[ 517: 518:     number] `2`
[ 518: 519:  separator] `,`
[ 519: 520:     number] `2`
[ 520: 521:  separator] `,`
[ 521: 522:     number] `2`
[ 522: 523:  separator] `,`
[ 523: 524:     number] `2`
[ 524: 525:  separator] `,`
[ 525: 526:     number] `2`
[ 526: 527:  separator] `,`
[ 527: 528:     number] `2`
[ 528: 529:  separator] `,`
[ 529: 530:     number] `2`
[ 530: 531:  separator] `,`
[ 531: 532:     number] `2`
[ 532: 533:  separator] `,`
[ 533: 534:     number] `2`
[ 534: 535:  separator] `,`
[ 535: 536:     number] `2`
[ 536: 537:  separator] `,`
[ 537: 538:     number] `2`
[ 538: 539:  separator] `,`
[ 539: 540:     number] `2`
[ 540: 541:  separator] `,`
[ 541: 542:     number] `2`
[ 542: 543:  separator] `,`
[ 543: 544:     number] `2`
[ 544: 545:  separator] `,`
[ 545: 546:     number] `2`
[ 546: 547:  separator] `,`
[ 548: 549:     number] `3`
[ 549: 550:  separator] `,`
[ 550: 551:     number] `3`
[ 551: 552:  separator] `,`
[ 552: 553:     number] `3`
[ 553: 554:  separator] `,`
[ 554: 555:     number] `3`
[ 555: 556:  separator] `,`
[ 556: 557:     number] `3`
[ 557: 558:  separator] `,`
[ 558: 559:     number] `3`
[ 559: 560:  separator] `,`
[ 560: 561:     number] `3`
[ 561: 562:  separator] `,`
[ 562: 563:     number] `3`
[ 563: 564:  separator] `,`
[ 564: 565:     number] `4`
[ 565: 566:  separator] `,`
[ 566: 567:     number] `4`
[ 567: 568:  separator] `,`
[ 568: 569:     number] `4`
[ 569: 570:  separator] `,`
[ 570: 571:     number] `4`
[ 571: 572:  separator] `,`
[ 572: 573:     number] `5`
[ 573: 574:  separator] `,`
[ 574: 575:     number] `5`
[ 575: 576:  separator] `,`
[ 576: 577:     number] `5`
[ 577: 578:  separator] `,`
[ 578: 579:     number] `5`
[ 580: 581:  separator] `}`
[ 581: 582:  separator] `;`
[ 584: 591: identifier] `OFFSETS`
[ 592: 593:   operator] `:`
[ 593: 594:   operator] `=`
[ 595: 596:  separator] `[`
[ 596: 597:  separator] `]`
[ 597: 600: identifier] `u32`
[ 600: 601:  separator] `{`
[ 603: 613:     number] `0x00000000`
[ 613: 614:  separator] `,`
[ 615: 625:     number] `0x00003080`
[ 625: 626:  separator] `,`
[ 627: 637:     number] `0x000E2080`
[ 637: 638:  separator] `,`
[ 643: 653:     number] `0x03C82080`
[ 653: 654:  separator] `,`
[ 655: 665:     number] `0xFA082080`
[ 665: 666:  separator] `,`
[ 667: 677:     number] `0x82082080`
[ 678: 679:  separator] `}`
[ 679: 680:  separator] `;`
[ 682: 685: identifier] `pub`
[ 686: 690: identifier] `func`
[ 691: 699: identifier] `numRunes`
[ 699: 700:  separator] `(`
[ 700: 703: identifier] `src`
[ 703: 704:   operator] `:`
[ 705: 706:  separator] `[`
[ 706: 707:  separator] `]`
[ 707: 709: identifier] `u8`
[ 709: 710:  separator] `)`
[ 711: 713:   operator] `->`
[ 714: 718: identifier] `uint`
[ 719: 720:  separator] `{`
[ 722: 725: identifier] `mut`
[ 726: 727: identifier] `i`
[ 727: 728:   operator] `:`
[ 729: 733: identifier] `uint`
[ 734: 735:   operator] `=`
[ 736: 737:     number] `0`
[ 737: 738:  separator] `;`
[ 740: 743: identifier] `mut`
[ 744: 747: identifier] `num`
[ 747: 748:   operator] `:`
[ 749: 753: identifier] `uint`
[ 754: 755:   operator] `=`
[ 756: 757:     number] `0`
[ 757: 758:  separator] `;`
[ 761: 764: identifier] `for`
[ 765: 766: identifier] `i`
[ 767: 768:   operator] `<`
[ 769: 772: identifier] `len`
[ 772: 773:  separator] `(`
[ 773: 776: identifier] `src`
[ 776: 777:  separator] `)`
[ 778: 779:  separator] `{`
[ 782: 784: identifier] `nb`
[ 785: 786:   operator] `:`
[ 786: 787:   operator] `=`
[ 788: 792: identifier] `uint`
[ 792: 793:  separator] `(`
[ 793: 807: identifier] `TRAILING_BYTES`
[ 807: 808:  separator] `[`
[ 808: 811: identifier] `src`
[ 811: 812:  separator] `[`
[ 812: 813: identifier] `i`
[ 813: 814:  separator] `]`
[ 814: 815:  separator] `]`
[ 815: 816:  separator] `)`
[ 816: 817:  separator] `;`
[ 820: 821: identifier] `i`
[ 822: 823:   operator] `+`
[ 823: 824:   operator] `=`
[ 825: 827: identifier] `nb`
[ 828: 829:   operator] `+`
[ 830: 831:     number] `1`
[ 831: 832:  separator] `;`
[ 835: 838: identifier] `num`
[ 839: 840:   operator] `+`
[ 840: 841:   operator] `=`
[ 842: 843:     number] `1`
[ 843: 844:  separator] `;`
[ 846: 847:  separator] `}`
[ 850: 856: identifier] `return`
[ 857: 860: identifier] `num`
[ 860: 861:  separator] `;`
[ 862: 863:  separator] `}`
[ 865: 868: identifier] `pub`
[ 869: 873: identifier] `func`
[ 874: 882: identifier] `numBytes`
[ 882: 883:  separator] `(`
[ 883: 886: identifier] `src`
[ 886: 887:   operator] `:`
[ 888: 889:  separator] `[`
[ 889: 890:  separator] `]`
[ 890: 894: identifier] `rune`
[ 894: 895:  separator] `)`
[ 896: 898:   operator] `->`
[ 899: 903: identifier] `uint`
[ 904: 905:  separator] `{`
[ 907: 910: identifier] `mut`
[ 911: 912: identifier] `i`
[ 912: 913:   operator] `:`
[ 914: 918: identifier] `uint`
[ 919: 920:   operator] `=`
[ 921: 922:     number] `0`
[ 922: 923:  separator] `;`
[ 925: 928: identifier] `mut`
[ 929: 932: identifier] `num`
[ 932: 933:   operator] `:`
[ 934: 938: identifier] `uint`
[ 939: 940:   operator] `=`
[ 941: 942:     number] `0`
[ 942: 943:  separator] `;`
[ 946: 949: identifier] `for`
[ 950: 951: identifier] `i`
[ 952: 953:   operator] `<`
[ 954: 957: identifier] `len`
[ 957: 958:  separator] `(`
[ 958: 961: identifier] `src`
[ 961: 962:  separator] `)`
[ 963: 964:  separator] `{`
[ 967: 969: identifier] `ch`
[ 970: 971:   operator] `:`
[ 971: 972:   operator] `=`
[ 973: 976: identifier] `src`
[ 976: 977:  separator] `[`
[ 977: 978: identifier] `i`
[ 978: 979:  separator] `]`
[ 979: 980:  separator] `;`
[ 983: 985: identifier] `if`
[ 986: 988: identifier] `ch`
[ 989: 990:   operator] `<`
[ 991: 995:     number] `0x80`
[ 996: 997:  separator] `{`
[1001:1004: identifier] `num`
[1005:1006:   operator] `+`
[1006:1007:   operator] `=`
[1008:1009:     number] `1`
[1009:1010:  separator] `;`
[1013:1014:  separator] `}`
[1015:1019: identifier] `else`
[1020:1022: identifier] `if`
[1023:1025: identifier] `ch`
[1026:1027:   operator] `<`
[1028:1033:     number] `0x800`
[1034:1035:  separator] `{`
[1039:1042: identifier] `num`
[1043:1044:   operator] `+`
[1044:1045:   operator] `=`
[1046:1047:     number] `2`
[1047:1048:  separator] `;`
[1057:1058:  separator] `}`
[1059:1063: identifier] `else`
[1064:1066: identifier] `if`
[1067:1069: identifier] `ch`
[1070:1071:   operator] `<`
[1072:1079:     number] `0x10000`
[1080:1081:  separator] `{`
[1091:1094: identifier] `num`
[1095:1096:   operator] `+`
[1096:1097:   operator] `=`
[1098:1099:     number] `3`
[1099:1100:  separator] `;`
[1109:1110:  separator] `}`
[1111:1115: identifier] `else`
[1116:1118: identifier] `if`
[1119:1121: identifier] `ch`
[1122:1123:   operator] `<`
[1124:1132:     number] `0x110000`
[1133:1134:  separator] `{`
[1144:1147: identifier] `num`
[1148:1149:   operator] `+`
[1149:1150:   operator] `=`
[1151:1152:     number] `4`
[1152:1153:  separator] `;`
[1162:1163:  separator] `}`
[1172:1173: identifier] `i`
[1174:1175:   operator] `+`
[1175:1176:   operator] `=`
[1177:1178:     number] `1`
[1178:1179:  separator] `;`
[1181:1182:  separator] `}`
[1184:1190: identifier] `return`
[1191:1194: identifier] `num`
[1194:1195:  separator] `;`
[1196:1197:  separator] `}`
[1199:1202: identifier] `pub`
[1203:1207: identifier] `func`
[1208:1214: identifier] `decode`
[1214:1215:  separator] `(`
[1215:1218: identifier] `mut`
[1219:1223: identifier] `dest`
[1223:1224:   operator] `:`
[1225:1226:  separator] `[`
[1226:1227:  separator] `]`
[1227:1231: identifier] `rune`
[1231:1232:  separator] `,`
[1233:1236: identifier] `src`
[1236:1237:   operator] `:`
[1238:1239:  separator] `[`
[1239:1240:  separator] `]`
[1240:1242: identifier] `u8`
[1242:1243:  separator] `)`
[1244:1246:   operator] `->`
[1247:1251: identifier] `uint`
[1252:1253:  separator] `{`
[1255:1258: identifier] `mut`
[1259:1267: identifier] `srcIndex`
[1267:1268:   operator] `:`
[1269:1273: identifier] `uint`
[1274:1275:   operator] `=`
[1276:1277:     number] `0`
[1277:1278:  separator] `;`
[1280:1283: identifier] `mut`
[1284:1293: identifier] `destIndex`
[1293:1294:   operator] `:`
[1295:1299: identifier] `uint`
[1300:1301:   operator] `=`
[1302:1303:     number] `0`
[1303:1304:  separator] `;`
[1307:1310: identifier] `for`
[1311:1320: identifier] `destIndex`
[1321:1322:   operator] `<`
[1323:1326: identifier] `len`
[1326:1327:  separator] `(`
[1327:1331: identifier] `dest`
[1331:1332:  separator] `)`
[1333:1334:  separator] `{`
[1337:1339: identifier] `nb`
[1340:1341:   operator] `:`
[1341:1342:   operator] `=`
[1343:1347: identifier] `uint`
[1347:1348:  separator] `(`
[1348:1362: identifier] `TRAILING_BYTES`
[1362:1363:  separator] `[`
[1363:1366: identifier] `src`
[1366:1367:  separator] `[`
[1367:1375: identifier] `srcIndex`
[1375:1376:  separator] `]`
[1376:1377:  separator] `]`
[1377:1378:  separator] `)`
[1378:1379:  separator] `;`
[1382:1384: identifier] `if`
[1385:1393: identifier] `srcIndex`
[1394:1395:   operator] `+`
[1396:1398: identifier] `nb`
[1399:1401:   operator] `>=`
[1402:1405: identifier] `len`
[1405:1406:  separator] `(`
[1406:1409: identifier] `src`
[1409:1410:  separator] `)`
[1411:1412:  separator] `{`
[1458:1464: identifier] `return`
[1465:1474: identifier] `destIndex`
[1474:1475:  separator] `;`
[1478:1479:  separator] `}`
[1483:1486: identifier] `mut`
[1487:1489: identifier] `ch`
[1489:1490:   operator] `:`
[1491:1495: identifier] `rune`
[1496:1497:   operator] `=`
[1498:1499:     number] `0`
[1499:1500:  separator] `;`
[1503:1505: identifier] `if`
[1506:1508: identifier] `nb`
[1509:1511:   operator] `>=`
[1512:1513:     number] `3`
[1514:1515:  separator] `{`
[1519:1521: identifier] `ch`
[1522:1523:   operator] `+`
[1523:1524:   operator] `=`
[1525:1529: identifier] `rune`
[1529:1530:  separator] `(`
[1530:1533: identifier] `src`
[1533:1534:  separator] `[`
[1534:1542: identifier] `srcIndex`
[1542:1543:  separator] `]`
[1543:1544:  separator] `)`
[1544:1545:  separator] `;`
[1546:1548: identifier] `ch`
[1549:1551:   operator] `<<`
[1551:1552:   operator] `=`
[1553:1554:     number] `6`
[1554:1555:  separator] `;`
[1559:1567: identifier] `srcIndex`
[1568:1569:   operator] `+`
[1569:1570:   operator] `=`
[1571:1572:     number] `1`
[1572:1573:  separator] `;`
[1576:1577:  separator] `}`
[1581:1583: identifier] `if`
[1584:1586: identifier] `nb`
[1587:1589:   operator] `>=`
[1590:1591:     number] `2`
[1592:1593:  separator] `{`
[1597:1599: identifier] `ch`
[1600:1601:   operator] `+`
[1601:1602:   operator] `=`
[1603:1607: identifier] `rune`
[1607:1608:  separator] `(`
[1608:1611: identifier] `src`
[1611:1612:  separator] `[`
[1612:1620: identifier] `srcIndex`
[1620:1621:  separator] `]`
[1621:1622:  separator] `)`
[1622:1623:  separator] `;`
[1624:1626: identifier] `ch`
[1627:1629:   operator] `<<`
[1629:1630:   operator] `=`
[1631:1632:     number] `6`
[1632:1633:  separator] `;`
[1637:1645: identifier] `srcIndex`
[1646:1647:   operator] `+`
[1647:1648:   operator] `=`
[1649:1650:     number] `1`
[1650:1651:  separator] `;`
[1654:1655:  separator] `}`
[1659:1661: identifier] `if`
[1662:1664: identifier] `nb`
[1665:1667:   operator] `>=`
[1668:1669:     number] `1`
[1670:1671:  separator] `{`
[1675:1677: identifier] `ch`
[1678:1679:   operator] `+`
[1679:1680:   operator] `=`
[1681:1685: identifier] `rune`
[1685:1686:  separator] `(`
[1686:1689: identifier] `src`
[1689:1690:  separator] `[`
[1690:1698: identifier] `srcIndex`
[1698:1699:  separator] `]`
[1699:1700:  separator] `)`
[1700:1701:  separator] `;`
[1702:1704: identifier] `ch`
[1705:1707:   operator] `<<`
[1707:1708:   operator] `=`
[1709:1710:     number] `6`
[1710:1711:  separator] `;`
[1715:1723: identifier] `srcIndex`
[1724:1725:   operator] `+`
[1725:1726:   operator] `=`
[1727:1728:     number] `1`
[1728:1729:  separator] `;`
[1732:1733:  separator] `}`
[1736:1738: identifier] `ch`
[1739:1740:   operator] `+`
[1740:1741:   operator] `=`
[1742:1746: identifier] `rune`
[1746:1747:  separator] `(`
[1747:1750: identifier] `src`
[1750:1751:  separator] `[`
[1751:1759: identifier] `srcIndex`
[1759:1760:  separator] `]`
[1760:1761:  separator] `)`
[1761:1762:  separator] `;`
[1765:1773: identifier] `srcIndex`
[1774:1775:   operator] `+`
[1775:1776:   operator] `=`
[1777:1778:     number] `1`
[1778:1779:  separator] `;`
[1783:1785: identifier] `ch`
[1786:1787:   operator] `-`
[1787:1788:   operator] `=`
[1789:1793: identifier] `rune`
[1793:1794:  separator] `(`
[1794:1801: identifier] `OFFSETS`
[1801:1802:  separator] `[`
[1802:1804: identifier] `nb`
[1804:1805:  separator] `]`
[1805:1806:  separator] `)`
[1806:1807:  separator] `;`
[1810:1814: identifier] `dest`
[1814:1815:  separator] `[`
[1815:1824: identifier] `destIndex`
[1824:1825:  separator] `]`
[1826:1827:   operator] `=`
[1828:1830: identifier] `ch`
[1830:1831:  separator] `;`
[1834:1843: identifier] `destIndex`
[1844:1845:   operator] `+`
[1845:1846:   operator] `=`
[1847:1848:     number] `1`
[1848:1849:  separator] `;`
[1851:1852:  separator] `}`
[1855:1861: identifier] `return`
[1862:1871: identifier] `destIndex`
[1871:1872:  separator] `;`
[1873:1874:  separator] `}`
[1876:1879: identifier] `pub`
[1880:1884: identifier] `func`
[1885:1891: identifier] `encode`
[1891:1892:  separator] `(`
[1892:1895: identifier] `mut`
[1896:1900: identifier] `dest`
[1900:1901:   operator] `:`
[1902:1903:  separator] `[`
[1903:1904:  separator] `]`
[1904:1906: identifier] `u8`
[1906:1907:  separator] `,`
[1908:1911: identifier] `src`
[1911:1912:   operator] `:`
[1913:1914:  separator] `[`
[1914:1915:  separator] `]`
[1915:1919: identifier] `rune`
[1919:1920:  separator] `)`
[1921:1923:   operator] `->`
[1924:1928: identifier] `uint`
[1929:1930:  separator] `{`
[1932:1935: identifier] `mut`
[1936:1944: identifier] `srcIndex`
[1944:1945:   operator] `:`
[1946:1950: identifier] `uint`
[1951:1952:   operator] `=`
[1953:1954:     number] `0`
[1954:1955:  separator] `;`
[1957:1960: identifier] `mut`
[1961:1970: identifier] `destIndex`
[1970:1971:   operator] `:`
[1972:1976: identifier] `uint`
[1977:1978:   operator] `=`
[1979:1980:     number] `0`
[1980:1981:  separator] `;`
[1983:1986: identifier] `for`
[1987:1995: identifier] `srcIndex`
[1996:1997:   operator] `<`
[1998:2001: identifier] `len`
[2001:2002:  separator] `(`
[2002:2005: identifier] `src`
[2005:2006:  separator] `)`
[2007:2008:  separator] `{`
[2011:2013: identifier] `ch`
[2014:2015:   operator] `:`
[2015:2016:   operator] `=`
[2017:2020: identifier] `src`
[2020:2021:  separator] `[`
[2021:2029: identifier] `srcIndex`
[2029:2030:  separator] `]`
[2030:2031:  separator] `;`
[2034:2036: identifier] `if`
[2037:2039: identifier] `ch`
[2040:2041:   operator] `<`
[2042:2046:     number] `0x80`
[2047:2048:  separator] `{`
[2052:2054: identifier] `if`
[2055:2064: identifier] `destIndex`
[2065:2067:   operator] `>=`
[2068:2071: identifier] `len`
[2071:2072:  separator] `(`
[2072:2076: identifier] `dest`
[2076:2077:  separator] `)`
[2078:2079:  separator] `{`
[2084:2090: identifier] `return`
[2091:2100: identifier] `destIndex`
[2100:2101:  separator] `;`
[2105:2106:  separator] `}`
[2110:2114: identifier] `dest`
[2114:2115:  separator] `[`
[2115:2124: identifier] `destIndex`
[2124:2125:  separator] `]`
[2126:2127:   operator] `=`
[2128:2130: identifier] `u8`
[2130:2131:  separator] `(`
[2131:2133: identifier] `ch`
[2133:2134:  separator] `)`
[2134:2135:  separator] `;`
[2139:2148: identifier] `destIndex`
[2149:2150:   operator] `+`
[2150:2151:   operator] `=`
[2152:2153:     number] `1`
[2153:2154:  separator] `;`
[2157:2158:  separator] `}`
[2161:2165: identifier] `else`
[2166:2168: identifier] `if`
[2169:2171: identifier] `ch`
[2172:2173:   operator] `<`
[2174:2179:     number] `0x800`
[2180:2181:  separator] `{`
[2185:2187: identifier] `if`
[2188:2197: identifier] `destIndex`
[2198:2200:   operator] `>=`
[2201:2204: identifier] `len`
[2204:2205:  separator] `(`
[2205:2209: identifier] `dest`
[2209:2210:  separator] `)`
[2210:2211:   operator] `-`
[2211:2212:     number] `1`
[2213:2214:  separator] `{`
[2219:2225: identifier] `return`
[2226:2235: identifier] `destIndex`
[2235:2236:  separator] `;`
[2240:2241:  separator] `}`
[2245:2249: identifier] `dest`
[2249:2250:  separator] `[`
[2250:2259: identifier] `destIndex`
[2260:2261:   operator] `+`
[2262:2263:     number] `0`
[2263:2264:  separator] `]`
[2265:2266:   operator] `=`
[2267:2269: identifier] `u8`
[2269:2270:  separator] `(`
[2270:2271:  separator] `(`
[2271:2273: identifier] `ch`
[2273:2274:   operator] `>`
[2274:2275:   operator] `>`
[2275:2276:     number] `6`
[2276:2277:  separator] `)`
[2278:2279:   operator] `|`
[2280:2284:     number] `0xC0`
[2284:2285:  separator] `)`
[2285:2286:  separator] `;`
[2299:2303: identifier] `dest`
[2303:2304:  separator] `[`
[2304:2313: identifier] `destIndex`
[2314:2315:   operator] `+`
[2316:2317:     number] `1`
[2317:2318:  separator] `]`
[2319:2320:   operator] `=`
[2321:2323: identifier] `u8`
[2323:2324:  separator] `(`
[2324:2325:  separator] `(`
[2325:2327: identifier] `ch`
[2328:2329:   operator] `&`
[2330:2334:     number] `0x3F`
[2334:2335:  separator] `)`
[2336:2337:   operator] `|`
[2338:2342:     number] `0x80`
[2342:2343:  separator] `)`
[2343:2344:  separator] `;`
[2357:2366: identifier] `destIndex`
[2367:2368:   operator] `+`
[2368:2369:   operator] `=`
[2370:2371:     number] `2`
[2371:2372:  separator] `;`
[2381:2382:  separator] `}`
[2391:2395: identifier] `else`
[2396:2398: identifier] `if`
[2399:2401: identifier] `ch`
[2402:2403:   operator] `<`
[2404:2411:     number] `0x10000`
[2412:2413:  separator] `{`
[2417:2419: identifier] `if`
[2420:2429: identifier] `destIndex`
[2430:2432:   operator] `>=`
[2433:2436: identifier] `len`
[2436:2437:  separator] `(`
[2437:2441: identifier] `dest`
[2441:2442:  separator] `)`
[2442:2443:   operator] `-`
[2443:2444:     number] `2`
[2445:2446:  separator] `{`
[2451:2457: identifier] `return`
[2458:2467: identifier] `destIndex`
[2467:2468:  separator] `;`
[2472:2473:  separator] `}`
[2486:2490: identifier] `dest`
[2490:2491:  separator] `[`
[2491:2500: identifier] `destIndex`
[2501:2502:   operator] `+`
[2503:2504:     number] `0`
[2504:2505:  separator] `]`
[2506:2507:   operator] `=`
[2508:2510: identifier] `u8`
[2510:2511:  separator] `(`
[2511:2512:  separator] `(`
[2512:2514: identifier] `ch`
[2514:2515:   operator] `>`
[2515:2516:   operator] `>`
[2516:2518:     number] `12`
[2518:2519:  separator] `)`
[2520:2521:   operator] `|`
[2522:2526:     number] `0xE0`
[2526:2527:  separator] `)`
[2527:2528:  separator] `;`
[2541:2545: identifier] `dest`
[2545:2546:  separator] `[`
[2546:2555: identifier] `destIndex`
[2556:2557:   operator] `+`
[2558:2559:     number] `1`
[2559:2560:  separator] `]`
[2561:2562:   operator] `=`
[2563:2565: identifier] `u8`
[2565:2566:  separator] `(`
[2566:2567:  separator] `(`
[2567:2568:  separator] `(`
[2568:2570: identifier] `ch`
[2570:2571:   operator] `>`
[2571:2572:   operator] `>`
[2572:2573:     number] `6`
[2573:2574:  separator] `)`
[2575:2576:   operator] `&`
[2577:2581:     number] `0x3F`
[2581:2582:  separator] `)`
[2583:2584:   operator] `|`
[2585:2589:     number] `0x80`
[2589:2590:  separator] `)`
[2590:2591:  separator] `;`
[2604:2608: identifier] `dest`
[2608:2609:  separator] `[`
[2609:2618: identifier] `destIndex`
[2619:2620:   operator] `+`
[2621:2622:     number] `2`
[2622:2623:  separator] `]`
[2624:2625:   operator] `=`
[2626:2628: identifier] `u8`
[2628:2629:  separator] `(`
[2629:2630:  separator] `(`
[2630:2632: identifier] `ch`
[2633:2634:   operator] `&`
[2635:2639:     number] `0x3F`
[2639:2640:  separator] `)`
[2641:2642:   operator] `|`
[2643:2647:     number] `0x80`
[2647:2648:  separator] `)`
[2648:2649:  separator] `;`
[2662:2671: identifier] `destIndex`
[2672:2673:   operator] `+`
[2673:2674:   operator] `=`
[2675:2676:     number] `3`
[2676:2677:  separator] `;`
[2686:2687:  separator] `}`
[2696:2700: identifier] `else`
[2701:2703: identifier] `if`
[2704:2706: identifier] `ch`
[2707:2708:   operator] `<`
[2709:2717:     number] `0x110000`
[2718:2719:  separator] `{`
[2723:2725: identifier] `if`
[2726:2735: identifier] `destIndex`
[2736:2738:   operator] `>=`
[2739:2742: identifier] `len`
[2742:2743:  separator] `(`
[2743:2747: identifier] `dest`
[2747:2748:  separator] `)`
[2748:2749:   operator] `-`
[2749:2750:     number] `3`
[2751:2752:  separator] `{`
[2757:2763: identifier] `return`
[2764:2773: identifier] `destIndex`
[2773:2774:  separator] `;`
[2778:2779:  separator] `}`
[2792:2796: identifier] `dest`
[2796:2797:  separator] `[`
[2797:2806: identifier] `destIndex`
[2807:2808:   operator] `+`
[2809:2810:     number] `0`
[2810:2811:  separator] `]`
[2812:2813:   operator] `=`
[2814:2816: identifier] `u8`
[2816:2817:  separator] `(`
[2817:2818:  separator] `(`
[2818:2820: identifier] `ch`
[2820:2821:   operator] `>`
[2821:2822:   operator] `>`
[2822:2824:     number] `18`
[2824:2825:  separator] `)`
[2826:2827:   operator] `|`
[2828:2832:     number] `0xF0`
[2832:2833:  separator] `)`
[2833:2834:  separator] `;`
[2847:2851: identifier] `dest`
[2851:2852:  separator] `[`
[2852:2861: identifier] `destIndex`
[2862:2863:   operator] `+`
[2864:2865:     number] `1`
[2865:2866:  separator] `]`
[2867:2868:   operator] `=`
[2869:2871: identifier] `u8`
[2871:2872:  separator] `(`
[2872:2873:  separator] `(`
[2873:2874:  separator] `(`
[2874:2876: identifier] `ch`
[2876:2877:   operator] `>`
[2877:2878:   operator] `>`
[2878:2880:     number] `12`
[2880:2881:  separator] `)`
[2882:2883:   operator] `&`
[2884:2888:     number] `0x3F`
[2888:2889:  separator] `)`
[2890:2891:   operator] `|`
[2892:2896:     number] `0x80`
[2896:2897:  separator] `)`
[2897:2898:  separator] `;`
[2911:2915: identifier] `dest`
[2915:2916:  separator] `[`
[2916:2925: identifier] `destIndex`
[2926:2927:   operator] `+`
[2928:2929:     number] `2`
[2929:2930:  separator] `]`
[2931:2932:   operator] `=`
[2933:2935: identifier] `u8`
[2935:2936:  separator] `(`
[2936:2937:  separator] `(`
[2937:2938:  separator] `(`
[2938:2940: identifier] `ch`
[2940:2941:   operator] `>`
[2941:2942:   operator] `>`
[2942:2943:     number] `6`
[2943:2944:  separator] `)`
[2945:2946:   operator] `&`
[2947:2951:     number] `0x3F`
[2951:2952:  separator] `)`
[2953:2954:   operator] `|`
[2955:2959:     number] `0x80`
[2959:2960:  separator] `)`
[2960:2961:  separator] `;`
[2974:2978: identifier] `dest`
[2978:2979:  separator] `[`
[2979:2988: identifier] `destIndex`
[2989:2990:   operator] `+`
[2991:2992:     number] `3`
[2992:2993:  separator] `]`
[2994:2995:   operator] `=`
[2996:2998: identifier] `u8`
[2998:2999:  separator] `(`
[2999:3000:  separator] `(`
[3000:3002: identifier] `ch`
[3003:3004:   operator] `&`
[3005:3009:     number] `0x3F`
[3009:3010:  separator] `)`
[3011:3012:   operator] `|`
[3013:3017:     number] `0x80`
[3017:3018:  separator] `)`
[3018:3019:  separator] `;`
[3032:3041: identifier] `destIndex`
[3042:3043:   operator] `+`
[3043:3044:   operator] `=`
[3045:3046:     number] `4`
[3046:3047:  separator] `;`
[3056:3057:  separator] `}`
[3066:3074: identifier] `srcIndex`
[3075:3076:   operator] `+`
[3076:3077:   operator] `=`
[3078:3079:     number] `1`
[3079:3080:  separator] `;`
[3082:3083:  separator] `}`
[3086:3092: identifier] `return`
[3093:3102: identifier] `destIndex`
[3102:3103:  separator] `;`
[3104:3105:  separator] `}`
 [32mEnded lexing[00m coding (6.95ms)
 [32mStarted parsing[00m coding
 [32mEnded parsing[00m coding (4.62ms)
 [32mStarted lexing[00m list
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  13: identifier] `mem`
[  15:  18: identifier] `pub`
[  19:  23: identifier] `type`
[  24:  28: identifier] `List`
[  29:  35: identifier] `struct`
[  35:  36:   operator] `<`
[  36:  37: identifier] `T`
[  37:  38:   operator] `>`
[  39:  40:  separator] `{`
[  45:  49: identifier] `data`
[  49:  50:   operator] `:`
[  51:  52:   operator] `^`
[  52:  55: identifier] `mut`
[  56:  57: identifier] `T`
[  57:  58:  separator] `,`
[  63:  69: identifier] `length`
[  69:  70:   operator] `:`
[  71:  75: identifier] `uint`
[  75:  76:  separator] `,`
[  81:  89: identifier] `capacity`
[  89:  90:   operator] `:`
[  91:  95: identifier] `uint`
[  95:  96:  separator] `,`
[  97:  98:  separator] `}`
[  98:  99:  separator] `;`
[ 101: 114: identifier] `BASE_CAPACITY`
[ 114: 115:   operator] `:`
[ 116: 120: identifier] `uint`
[ 121: 122:   operator] `=`
[ 123: 124:     number] `4`
[ 124: 125:  separator] `;`
[ 127: 130: identifier] `pub`
[ 131: 135: identifier] `func`
[ 136: 137:  separator] `(`
[ 137: 141: identifier] `List`
[ 141: 142:  separator] `)`
[ 143: 146: identifier] `new`
[ 146: 147:   operator] `<`
[ 147: 148: identifier] `T`
[ 148: 149:   operator] `>`
[ 149: 150:  separator] `(`
[ 150: 151:  separator] `)`
[ 152: 154:   operator] `->`
[ 155: 156:   operator] `^`
[ 156: 159: identifier] `mut`
[ 160: 164: identifier] `List`
[ 164: 165:   operator] `<`
[ 165: 166: identifier] `T`
[ 166: 167:   operator] `>`
[ 168: 169:  separator] `{`
[ 174: 180: identifier] `return`
[ 181: 185: identifier] `List`
[ 185: 187:   operator] `::`
[ 187: 202: identifier] `newWithCapacity`
[ 202: 203:   operator] `<`
[ 203: 204: identifier] `T`
[ 204: 205:   operator] `>`
[ 205: 206:  separator] `(`
[ 206: 207:     number] `0`
[ 207: 208:  separator] `)`
[ 208: 209:  separator] `;`
[ 210: 211:  separator] `}`
[ 213: 216: identifier] `pub`
[ 217: 221: identifier] `func`
[ 222: 223:  separator] `(`
[ 223: 227: identifier] `List`
[ 227: 228:  separator] `)`
[ 229: 244: identifier] `newWithCapacity`
[ 244: 245:   operator] `<`
[ 245: 246: identifier] `T`
[ 246: 247:   operator] `>`
[ 247: 248:  separator] `(`
[ 248: 251: identifier] `mut`
[ 252: 255: identifier] `cap`
[ 255: 256:   operator] `:`
[ 257: 261: identifier] `uint`
[ 261: 262:  separator] `)`
[ 263: 265:   operator] `->`
[ 266: 267:   operator] `^`
[ 267: 270: identifier] `mut`
[ 271: 275: identifier] `List`
[ 275: 276:   operator] `<`
[ 276: 277: identifier] `T`
[ 277: 278:   operator] `>`
[ 279: 280:  separator] `{`
[ 285: 287: identifier] `if`
[ 288: 291: identifier] `cap`
[ 292: 294:   operator] `<=`
[ 295: 296:     number] `0`
[ 297: 298:  separator] `{`
[ 307: 310: identifier] `cap`
[ 311: 312:   operator] `=`
[ 313: 326: identifier] `BASE_CAPACITY`
[ 326: 327:  separator] `;`
[ 332: 333:  separator] `}`
[ 339: 343: identifier] `size`
[ 344: 345:   operator] `:`
[ 345: 346:   operator] `=`
[ 347: 353: identifier] `sizeof`
[ 353: 354:  separator] `(`
[ 354: 355: identifier] `T`
[ 355: 356:  separator] `)`
[ 357: 358:   operator] `*`
[ 359: 362: identifier] `cap`
[ 362: 363:  separator] `;`
[ 369: 372: identifier] `res`
[ 373: 374:   operator] `:`
[ 374: 375:   operator] `=`
[ 376: 379: identifier] `mem`
[ 379: 381:   operator] `::`
[ 381: 386: identifier] `alloc`
[ 386: 387:   operator] `<`
[ 387: 391: identifier] `List`
[ 391: 392:   operator] `<`
[ 392: 393: identifier] `T`
[ 393: 394:   operator] `>`
[ 394: 395:   operator] `>`
[ 395: 396:  separator] `(`
[ 396: 397:  separator] `)`
[ 397: 398:  separator] `;`
[ 403: 404:   operator] `@`
[ 404: 407: identifier] `res`
[ 408: 409:   operator] `=`
[ 410: 414: identifier] `List`
[ 414: 415:   operator] `<`
[ 415: 416: identifier] `T`
[ 416: 417:   operator] `>`
[ 417: 418:  separator] `{`
[ 427: 431: identifier] `data`
[ 431: 432:   operator] `:`
[ 433: 434:  separator] `(`
[ 434: 435:   operator] `^`
[ 435: 438: identifier] `mut`
[ 439: 440: identifier] `T`
[ 440: 441:  separator] `)`
[ 441: 442:  separator] `(`
[ 442: 445: identifier] `mem`
[ 445: 447:   operator] `::`
[ 447: 455: identifier] `rawAlloc`
[ 455: 456:  separator] `(`
[ 456: 460: identifier] `size`
[ 460: 461:  separator] `)`
[ 461: 462:  separator] `)`
[ 462: 463:  separator] `,`
[ 472: 478: identifier] `length`
[ 478: 479:   operator] `:`
[ 480: 481:     number] `0`
[ 481: 482:  separator] `,`
[ 491: 499: identifier] `capacity`
[ 499: 500:   operator] `:`
[ 501: 504: identifier] `cap`
[ 504: 505:  separator] `,`
[ 510: 511:  separator] `}`
[ 511: 512:  separator] `;`
[ 518: 524: identifier] `return`
[ 525: 528: identifier] `res`
[ 528: 529:  separator] `;`
[ 530: 531:  separator] `}`
[ 533: 536: identifier] `pub`
[ 537: 541: identifier] `func`
[ 542: 543:  separator] `(`
[ 543: 545: identifier] `it`
[ 545: 546:   operator] `:`
[ 547: 548:   operator] `^`
[ 548: 552: identifier] `List`
[ 552: 553:   operator] `<`
[ 553: 554: identifier] `T`
[ 554: 555:   operator] `>`
[ 555: 556:  separator] `)`
[ 557: 564: identifier] `destroy`
[ 564: 565:  separator] `(`
[ 565: 566:  separator] `)`
[ 567: 568:  separator] `{`
[ 573: 576: identifier] `mem`
[ 576: 578:   operator] `::`
[ 578: 585: identifier] `rawFree`
[ 585: 586:  separator] `(`
[ 586: 593: identifier] `uintptr`
[ 593: 594:  separator] `(`
[ 594: 596: identifier] `it`
[ 596: 597:  separator] `.`
[ 597: 601: identifier] `data`
[ 601: 602:  separator] `)`
[ 602: 603:  separator] `)`
[ 603: 604:  separator] `;`
[ 609: 612: identifier] `mem`
[ 612: 614:   operator] `::`
[ 614: 618: identifier] `free`
[ 618: 619:  separator] `(`
[ 619: 621: identifier] `it`
[ 621: 622:  separator] `)`
[ 622: 623:  separator] `;`
[ 624: 625:  separator] `}`
[ 627: 630: identifier] `pub`
[ 631: 635: identifier] `func`
[ 636: 637:  separator] `(`
[ 637: 639: identifier] `it`
[ 639: 640:   operator] `:`
[ 641: 642:   operator] `^`
[ 642: 646: identifier] `List`
[ 646: 647:   operator] `<`
[ 647: 648: identifier] `T`
[ 648: 649:   operator] `>`
[ 649: 650:  separator] `)`
[ 651: 663: identifier] `toRawPointer`
[ 663: 664:  separator] `(`
[ 664: 665:  separator] `)`
[ 666: 668:   operator] `->`
[ 669: 670:   operator] `^`
[ 670: 671: identifier] `T`
[ 672: 673:  separator] `{`
[ 678: 684: identifier] `return`
[ 685: 687: identifier] `it`
[ 687: 688:  separator] `.`
[ 688: 692: identifier] `data`
[ 692: 693:  separator] `;`
[ 694: 695:  separator] `}`
[ 697: 700: identifier] `pub`
[ 701: 705: identifier] `func`
[ 706: 707:  separator] `(`
[ 707: 709: identifier] `it`
[ 709: 710:   operator] `:`
[ 711: 715: identifier] `List`
[ 715: 716:   operator] `<`
[ 716: 717: identifier] `T`
[ 717: 718:   operator] `>`
[ 718: 719:  separator] `)`
[ 720: 723: identifier] `get`
[ 723: 724:  separator] `(`
[ 724: 729: identifier] `index`
[ 729: 730:   operator] `:`
[ 731: 735: identifier] `uint`
[ 735: 736:  separator] `)`
[ 737: 739:   operator] `->`
[ 740: 741: identifier] `T`
[ 742: 743:  separator] `{`
[ 748: 750: identifier] `if`
[ 751: 756: identifier] `index`
[ 757: 759:   operator] `>=`
[ 760: 762: identifier] `it`
[ 762: 763:  separator] `.`
[ 763: 769: identifier] `length`
[ 770: 771:  separator] `{`
[ 780: 785: identifier] `panic`
[ 785: 786:  separator] `(`
[ 787: 812:     string] `List.get: index >= length`
[ 813: 814:  separator] `)`
[ 814: 815:  separator] `;`
[ 820: 821:  separator] `}`
[ 827: 833: identifier] `return`
[ 834: 836: identifier] `it`
[ 836: 837:  separator] `.`
[ 837: 841: identifier] `data`
[ 841: 842:  separator] `[`
[ 842: 847: identifier] `index`
[ 847: 848:  separator] `]`
[ 848: 849:  separator] `;`
[ 850: 851:  separator] `}`
[ 853: 856: identifier] `pub`
[ 857: 861: identifier] `func`
[ 862: 863:  separator] `(`
[ 863: 865: identifier] `it`
[ 865: 866:   operator] `:`
[ 867: 871: identifier] `List`
[ 871: 872:   operator] `<`
[ 872: 873: identifier] `T`
[ 873: 874:   operator] `>`
[ 874: 875:  separator] `)`
[ 876: 885: identifier] `getLength`
[ 885: 886:  separator] `(`
[ 886: 887:  separator] `)`
[ 888: 890:   operator] `->`
[ 891: 895: identifier] `uint`
[ 896: 897:  separator] `{`
[ 902: 908: identifier] `return`
[ 909: 911: identifier] `it`
[ 911: 912:  separator] `.`
[ 912: 918: identifier] `length`
[ 918: 919:  separator] `;`
[ 920: 921:  separator] `}`
[ 923: 926: identifier] `pub`
[ 927: 931: identifier] `func`
[ 932: 933:  separator] `(`
[ 933: 935: identifier] `it`
[ 935: 936:   operator] `:`
[ 937: 941: identifier] `List`
[ 941: 942:   operator] `<`
[ 942: 943: identifier] `T`
[ 943: 944:   operator] `>`
[ 944: 945:  separator] `)`
[ 946: 957: identifier] `getCapacity`
[ 957: 958:  separator] `(`
[ 958: 959:  separator] `)`
[ 960: 962:   operator] `->`
[ 963: 967: identifier] `uint`
[ 968: 969:  separator] `{`
[ 974: 980: identifier] `return`
[ 981: 983: identifier] `it`
[ 983: 984:  separator] `.`
[ 984: 992: identifier] `capacity`
[ 992: 993:  separator] `;`
[ 994: 995:  separator] `}`
[ 997:1029: doccomment] `/// This will double the size of`
[1030:1048: doccomment] `/// the lists data`
[1049:1087: doccomment] `/// Note that for now the memcpy seems`
[1088:1129: doccomment] `/// to be having some issues, so I'm just`
[1130:1169: doccomment] `/// manually swapping the data for now.`
[1170:1174: identifier] `func`
[1175:1176:  separator] `(`
[1176:1178: identifier] `it`
[1178:1179:   operator] `:`
[1180:1181:   operator] `^`
[1181:1184: identifier] `mut`
[1185:1189: identifier] `List`
[1189:1190:   operator] `<`
[1190:1191: identifier] `T`
[1191:1192:   operator] `>`
[1192:1193:  separator] `)`
[1194:1198: identifier] `grow`
[1198:1199:  separator] `(`
[1199:1200:  separator] `)`
[1201:1202:  separator] `{`
[1207:1214: identifier] `oldData`
[1215:1216:   operator] `:`
[1216:1217:   operator] `=`
[1218:1220: identifier] `it`
[1220:1221:  separator] `.`
[1221:1225: identifier] `data`
[1225:1226:  separator] `;`
[1231:1233: identifier] `it`
[1233:1234:  separator] `.`
[1234:1242: identifier] `capacity`
[1243:1244:   operator] `*`
[1244:1245:   operator] `=`
[1246:1247:     number] `2`
[1247:1248:  separator] `;`
[1253:1260: identifier] `newData`
[1261:1262:   operator] `:`
[1262:1263:   operator] `=`
[1264:1265:  separator] `(`
[1265:1266:   operator] `^`
[1266:1269: identifier] `mut`
[1270:1271: identifier] `T`
[1271:1272:  separator] `)`
[1272:1273:  separator] `(`
[1273:1276: identifier] `mem`
[1276:1278:   operator] `::`
[1278:1286: identifier] `rawAlloc`
[1286:1287:  separator] `(`
[1287:1293: identifier] `sizeof`
[1293:1294:  separator] `(`
[1294:1295: identifier] `T`
[1295:1296:  separator] `)`
[1297:1298:   operator] `*`
[1299:1301: identifier] `it`
[1301:1302:  separator] `.`
[1302:1310: identifier] `capacity`
[1310:1311:  separator] `)`
[1311:1312:  separator] `)`
[1312:1313:  separator] `;`
[1319:1322: identifier] `mut`
[1323:1324: identifier] `i`
[1325:1326:   operator] `:`
[1326:1327:   operator] `=`
[1328:1332: identifier] `uint`
[1332:1333:  separator] `(`
[1333:1334:     number] `0`
[1334:1335:  separator] `)`
[1335:1336:  separator] `;`
[1341:1344: identifier] `for`
[1345:1346: identifier] `i`
[1347:1348:   operator] `<`
[1349:1351: identifier] `it`
[1351:1352:  separator] `.`
[1352:1358: identifier] `length`
[1359:1360:  separator] `{`
[1369:1376: identifier] `newData`
[1376:1377:  separator] `[`
[1377:1378: identifier] `i`
[1378:1379:  separator] `]`
[1380:1381:   operator] `=`
[1382:1389: identifier] `oldData`
[1389:1390:  separator] `[`
[1390:1391: identifier] `i`
[1391:1392:  separator] `]`
[1392:1393:  separator] `;`
[1402:1403: identifier] `i`
[1404:1405:   operator] `+`
[1405:1406:   operator] `=`
[1407:1408:     number] `1`
[1408:1409:  separator] `;`
[1414:1415:  separator] `}`
[1421:1424: identifier] `mem`
[1424:1426:   operator] `::`
[1426:1433: identifier] `rawFree`
[1433:1434:  separator] `(`
[1434:1441: identifier] `uintptr`
[1441:1442:  separator] `(`
[1442:1449: identifier] `oldData`
[1449:1450:  separator] `)`
[1450:1451:  separator] `)`
[1451:1452:  separator] `;`
[1457:1459: identifier] `it`
[1459:1460:  separator] `.`
[1460:1464: identifier] `data`
[1465:1466:   operator] `=`
[1467:1474: identifier] `newData`
[1474:1475:  separator] `;`
[1476:1477:  separator] `}`
[1479:1520: doccomment] `/// This will peek at the top of the List`
[1521:1566: doccomment] `/// it will _not_ pop the value off the list.`
[1567:1605: doccomment] `/// Returns None if the list is empty.`
[1606:1609: identifier] `pub`
[1610:1614: identifier] `func`
[1615:1616:  separator] `(`
[1616:1618: identifier] `it`
[1618:1619:   operator] `:`
[1620:1621:   operator] `^`
[1621:1624: identifier] `mut`
[1625:1629: identifier] `List`
[1629:1630:   operator] `<`
[1630:1631: identifier] `T`
[1631:1632:   operator] `>`
[1632:1633:  separator] `)`
[1634:1637: identifier] `top`
[1637:1638:  separator] `(`
[1638:1639:  separator] `)`
[1640:1642:   operator] `->`
[1643:1649: identifier] `Option`
[1649:1650:   operator] `<`
[1650:1651: identifier] `T`
[1651:1652:   operator] `>`
[1653:1654:  separator] `{`
[1659:1661: identifier] `if`
[1662:1664: identifier] `it`
[1664:1665:  separator] `.`
[1665:1671: identifier] `length`
[1672:1674:   operator] `==`
[1675:1676:     number] `0`
[1677:1678:  separator] `{`
[1687:1693: identifier] `return`
[1694:1700: identifier] `Option`
[1700:1702:   operator] `::`
[1702:1706: identifier] `None`
[1706:1707:  separator] `;`
[1712:1713:  separator] `}`
[1718:1724: identifier] `return`
[1725:1731: identifier] `Option`
[1731:1733:   operator] `::`
[1733:1737: identifier] `Some`
[1737:1738:  separator] `(`
[1738:1740: identifier] `it`
[1740:1741:  separator] `.`
[1741:1744: identifier] `get`
[1744:1745:  separator] `(`
[1745:1747: identifier] `it`
[1747:1748:  separator] `.`
[1748:1754: identifier] `length`
[1755:1756:   operator] `-`
[1757:1758:     number] `1`
[1758:1759:  separator] `)`
[1759:1760:  separator] `)`
[1760:1761:  separator] `;`
[1762:1763:  separator] `}`
[1765:1814: doccomment] `/// Pop the last value T from the list. Note that`
[1815:1857: doccomment] `/// it does not clear out the popped item.`
[1858:1896: doccomment] `/// Returns None if the list is empty.`
[1897:1900: identifier] `pub`
[1901:1905: identifier] `func`
[1906:1907:  separator] `(`
[1907:1909: identifier] `it`
[1909:1910:   operator] `:`
[1911:1912:   operator] `^`
[1912:1915: identifier] `mut`
[1916:1920: identifier] `List`
[1920:1921:   operator] `<`
[1921:1922: identifier] `T`
[1922:1923:   operator] `>`
[1923:1924:  separator] `)`
[1925:1928: identifier] `pop`
[1928:1929:  separator] `(`
[1929:1930:  separator] `)`
[1931:1933:   operator] `->`
[1934:1940: identifier] `Option`
[1940:1941:   operator] `<`
[1941:1942: identifier] `T`
[1942:1943:   operator] `>`
[1944:1945:  separator] `{`
[1950:1952: identifier] `if`
[1953:1955: identifier] `it`
[1955:1956:  separator] `.`
[1956:1962: identifier] `length`
[1963:1965:   operator] `==`
[1966:1967:     number] `0`
[1968:1969:  separator] `{`
[1978:1984: identifier] `return`
[1985:1991: identifier] `Option`
[1991:1993:   operator] `::`
[1993:1997: identifier] `None`
[1997:1998:  separator] `;`
[2003:2004:  separator] `}`
[2009:2020: identifier] `poppedValue`
[2021:2022:   operator] `:`
[2022:2023:   operator] `=`
[2024:2026: identifier] `it`
[2026:2027:  separator] `.`
[2027:2030: identifier] `top`
[2030:2031:  separator] `(`
[2031:2032:  separator] `)`
[2032:2033:  separator] `;`
[2062:2064: identifier] `it`
[2064:2065:  separator] `.`
[2065:2071: identifier] `length`
[2072:2073:   operator] `-`
[2073:2074:   operator] `=`
[2075:2076:     number] `1`
[2076:2077:  separator] `;`
[2082:2088: identifier] `return`
[2089:2100: identifier] `poppedValue`
[2100:2101:  separator] `;`
[2102:2103:  separator] `}`
[2105:2149: doccomment] `/// Append a value of type T to the List. If`
[2150:2198: doccomment] `/// the length is at its capacity it will double`
[2199:2215: doccomment] `/// in capacity.`
[2216:2219: identifier] `pub`
[2220:2224: identifier] `func`
[2225:2226:  separator] `(`
[2226:2228: identifier] `it`
[2228:2229:   operator] `:`
[2230:2231:   operator] `^`
[2231:2234: identifier] `mut`
[2235:2239: identifier] `List`
[2239:2240:   operator] `<`
[2240:2241: identifier] `T`
[2241:2242:   operator] `>`
[2242:2243:  separator] `)`
[2244:2250: identifier] `append`
[2250:2251:  separator] `(`
[2251:2256: identifier] `value`
[2256:2257:   operator] `:`
[2258:2259: identifier] `T`
[2259:2260:  separator] `)`
[2261:2262:  separator] `{`
[2267:2269: identifier] `if`
[2270:2272: identifier] `it`
[2272:2273:  separator] `.`
[2273:2279: identifier] `length`
[2280:2282:   operator] `==`
[2283:2285: identifier] `it`
[2285:2286:  separator] `.`
[2286:2294: identifier] `capacity`
[2295:2296:  separator] `{`
[2305:2307: identifier] `it`
[2307:2308:  separator] `.`
[2308:2312: identifier] `grow`
[2312:2313:  separator] `(`
[2313:2314:  separator] `)`
[2314:2315:  separator] `;`
[2320:2321:  separator] `}`
[2327:2329: identifier] `it`
[2329:2330:  separator] `.`
[2330:2334: identifier] `data`
[2334:2335:  separator] `[`
[2335:2337: identifier] `it`
[2337:2338:  separator] `.`
[2338:2344: identifier] `length`
[2344:2345:  separator] `]`
[2346:2347:   operator] `=`
[2348:2353: identifier] `value`
[2353:2354:  separator] `;`
[2359:2361: identifier] `it`
[2361:2362:  separator] `.`
[2362:2368: identifier] `length`
[2369:2370:   operator] `+`
[2370:2371:   operator] `=`
[2372:2373:     number] `1`
[2373:2374:  separator] `;`
[2375:2376:  separator] `}`
 [32mEnded lexing[00m list (3.28ms)
 [32mStarted parsing[00m list
 [32mEnded parsing[00m list (1.54ms)
[01m[32mEnded read/lex/parse phase[00m (33.19ms)
[01m[32mStarted cyclic dependency check[00m
[01m[32mEnded cyclic dependency check[00m (0.01ms)
[01m[32mStarted construction phase[00m
 [32mStarted constructing module[00m __main
  [32mStarted constructing submodule[00m test-dynamic-string
  [32mEnded constructing submodule[00m test-dynamic-string (0.10ms)
 [32mEnded constructing module[00m __main (0.13ms)
 [32mStarted constructing module[00m std::io
  [32mStarted constructing submodule[00m file
  [32mEnded constructing submodule[00m file (0.10ms)
  [32mStarted constructing submodule[00m println
  [32mEnded constructing submodule[00m println (0.11ms)
 [32mEnded constructing module[00m std::io (0.24ms)
 [32mStarted constructing module[00m std::string
  [32mStarted constructing submodule[00m string
  [32mEnded constructing submodule[00m string (0.16ms)
  [32mStarted constructing submodule[00m util
  [32mEnded constructing submodule[00m util (0.11ms)
 [32mEnded constructing module[00m std::string (0.30ms)
 [32mStarted constructing module[00m std::mem
  [32mStarted constructing submodule[00m mem
  [32mEnded constructing submodule[00m mem (0.10ms)
  [32mStarted constructing submodule[00m raw
  [32mEnded constructing submodule[00m raw (0.03ms)
 [32mEnded constructing module[00m std::mem (0.15ms)
 [32mStarted constructing module[00m std::unicode::utf8
  [32mStarted constructing submodule[00m coding
  [32mEnded constructing submodule[00m coding (0.29ms)
 [32mEnded constructing module[00m std::unicode::utf8 (0.31ms)
 [32mStarted constructing module[00m std::adt
  [32mStarted constructing submodule[00m list
  [32mEnded constructing submodule[00m list (0.15ms)
 [32mEnded constructing module[00m std::adt (0.16ms)
[01m[32mEnded construction phase[00m (1.38ms)
[01m[32mStarted resolve phase[00m
 [32mStarted resolving module[00m std::mem
 [32mEnded resolving module[00m std::mem (0.25ms)
This scope:
 alloc (function)
 RawArray (type)
 allocArray (function)
 copyArray (function)
 free (function)
 freeArray (function)
 rawAlloc (function)
 rawFree (function)
Parent scope:
  s32 (type)
  s64 (type)
  f128 (type)
  u16 (type)
  u32 (type)
  bool (type)
  void (type)
  s8 (type)
  s128 (type)
  u64 (type)
  uint (type)
  rune (type)
  panic (function)
  Option (type)
  s16 (type)
  u8 (type)
  u128 (type)
  f32 (type)
  f64 (type)
  int (type)
  uintptr (type)
  ype(18) (type)
  string (type)
 [32mStarted resolving module[00m std::unicode::utf8
 [32mEnded resolving module[00m std::unicode::utf8 (0.59ms)
This scope:
 decode (function)
 encode (function)
 TRAILING_BYTES (variable)
 OFFSETS (variable)
 numRunes (function)
 numBytes (function)
Parent scope:
  s32 (type)
  s64 (type)
  f128 (type)
  u16 (type)
  u32 (type)
  bool (type)
  void (type)
  Option (type)
  s8 (type)
  s128 (type)
  u64 (type)
  uint (type)
  rune (type)
  panic (function)
  uintptr (type)
  ype(18) (type)
  s16 (type)
  u8 (type)
  u128 (type)
  f32 (type)
  f64 (type)
  int (type)
  string (type)
 [32mStarted resolving module[00m std::adt
 [32mEnded resolving module[00m std::adt (0.35ms)
This scope:
 List (type)
 BASE_CAPACITY (variable)
Parent scope:
  s32 (type)
  s64 (type)
  f128 (type)
  u16 (type)
  u32 (type)
  bool (type)
  void (type)
  Option (type)
  s8 (type)
  s128 (type)
  u64 (type)
  uint (type)
  rune (type)
  panic (function)
  uintptr (type)
  ype(18) (type)
  s16 (type)
  u8 (type)
  u128 (type)
  f32 (type)
  f64 (type)
  int (type)
  string (type)
 [32mStarted resolving module[00m std::string
 [32mEnded resolving module[00m std::string (0.47ms)
This scope:
 String (type)
 contains (function)
 hasPrefix (function)
 hasSuffix (function)
 compare (function)
Parent scope:
  u16 (type)
  u32 (type)
  bool (type)
  void (type)
  rune (type)
  panic (function)
  Option (type)
  s8 (type)
  s128 (type)
  u64 (type)
  uint (type)
  f64 (type)
  int (type)
  uintptr (type)
  ype(18) (type)
  s16 (type)
  u8 (type)
  u128 (type)
  f32 (type)
  string (type)
  s32 (type)
  s64 (type)
  f128 (type)
 [32mStarted resolving module[00m std::io
 [32mEnded resolving module[00m std::io (0.39ms)
This scope:
 FILE (type)
 FileMode (type)
 printByte (function)
 printUint (function)
 printDynamicString (function)
 printRune (function)
 printInt (function)
 Path (type)
 File (type)
 println (function)
 print (function)
Parent scope:
  ype(18) (type)
  s16 (type)
  u8 (type)
  u128 (type)
  f32 (type)
  f64 (type)
  int (type)
  uintptr (type)
  string (type)
  s32 (type)
  s64 (type)
  f128 (type)
  u16 (type)
  u32 (type)
  bool (type)
  void (type)
  s8 (type)
  s128 (type)
  u64 (type)
  uint (type)
  rune (type)
  panic (function)
  Option (type)
 [32mStarted resolving module[00m __main
 [32mEnded resolving module[00m __main (0.12ms)
This scope:
 main (function)
Parent scope:
  s128 (type)
  u64 (type)
  uint (type)
  rune (type)
  panic (function)
  Option (type)
  s8 (type)
  u8 (type)
  u128 (type)
  f32 (type)
  f64 (type)
  int (type)
  uintptr (type)
  ype(18) (type)
  s16 (type)
  string (type)
  s64 (type)
  f128 (type)
  s32 (type)
  u32 (type)
  bool (type)
  void (type)
  u16 (type)
[01m[32mEnded resolve phase[00m (3.43ms)
[01m[32mStarted inference phase[00m
 [32mStarted inferring submodule[00m mem
 [32mEnded inferring submodule[00m mem (0.92ms)
 [32mStarted inferring submodule[00m raw
 [32mEnded inferring submodule[00m raw (0.11ms)
 [32mStarted inferring submodule[00m file
 [32mEnded inferring submodule[00m file (0.58ms)
 [32mStarted inferring submodule[00m coding
 [32mEnded inferring submodule[00m coding (9.42ms)
 [32mStarted inferring submodule[00m list
 [32mEnded inferring submodule[00m list (5.61ms)
 [32mStarted inferring submodule[00m string
 [32mEnded inferring submodule[00m string (8.32ms)
 [32mStarted inferring submodule[00m util
 [32mEnded inferring submodule[00m util (0.94ms)
 [32mStarted inferring submodule[00m println
 [32mEnded inferring submodule[00m println (1.15ms)
 [32mStarted inferring submodule[00m test-dynamic-string
 [32mEnded inferring submodule[00m test-dynamic-string (1.86ms)
AST of submodule `__main/test-dynamic-string`:
([34mUseDirective[00m: std::io[00m)
([34mUseDirective[00m: std::string[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m main[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: test[00m [34m^mut String[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: from[00m)[00m ([34mStringLiteral[00m:       [33mhello [00m[00m [34mstring[00m)[00m [34m^mut String[00m)[00m)[00m 
	[00m ([34mDeferStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: destroy[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printDynamicString[00m)[00m ([34mVariableAccessExpr[00m: test[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mRuneLiteral[00m:  [33mw[00m[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mRuneLiteral[00m:  [33mo[00m[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: concat[00m)[00m ([34mStringLiteral[00m:    [33mrld[00m[00m [34mstring[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printDynamicString[00m)[00m ([34mVariableAccessExpr[00m: test[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: poppedValue[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: println[00m)[00m ([34mStringLiteral[00m:              [33mjust popped: [00m[00m [34mstring[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m unwrap[00m)[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: println[00m)[00m ([34mStringLiteral[00m: [33m[00m[00m [34mstring[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printDynamicString[00m)[00m ([34mVariableAccessExpr[00m: test[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: length[00m)[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: poppedValue[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m unwrap[00m)[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mRuneLiteral[00m:  [33m京[00m[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: value[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mRuneLiteral[00m:   [33m[00m[36m\n[33m[00m[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m unwrap[00m)[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::io/println`:
([34mUseDirective[00m: std::unicode::utf8[00m)
([34mUseDirective[00m: std::string[00m)
([34mUseDirective[00m: std::mem[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m printf[00m ([34mVariableDecl[00m: ([34mVariable[00m: fmt[00m [34m^u8[00m)[00m)[00m :[00m [34mint[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m println[00m ([34mVariableDecl[00m: ([34mVariable[00m: message[00m [34mstring[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: message[00m)[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:   [33m[00m[36m\n[33m[00m[00m [34m^u8[00m)[00m [34mint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:       [33m%.*s[00m[36m\n[33m[00m[00m [34m^u8[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: message[00m)[00m)[00m ([34mReferenceToExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: message[00m)[00m index[00m ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m [34m&u8[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m print[00m ([34mVariableDecl[00m: ([34mVariable[00m: message[00m [34mstring[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: message[00m)[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:     [33m%.*s[00m[00m [34m^u8[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: message[00m)[00m)[00m ([34mReferenceToExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: message[00m)[00m index[00m ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m [34m&u8[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printDynamicString[00m ([34mVariableDecl[00m: ([34mVariable[00m: s[00m [34m^String[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: length[00m)[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: at[00m)[00m ([34mVariableAccessExpr[00m: idx[00m)[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mRuneLiteral[00m:   [33m[00m[36m\n[33m[00m[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printRune[00m ([34mVariableDecl[00m: ([34mVariable[00m: r[00m [34mrune[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m rPtr[00m [34m^u8[00m)[00m  =[00m ([34mCastExpr[00m: ([34mCastExpr[00m: ([34mReferenceToExpr[00m: ([34mVariableAccessExpr[00m: r[00m)[00m [34m&rune[00m)[00m [34muintptr[00m)[00m [34m^u8[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: rCast[00m [34m[]rune[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mVariableAccessExpr[00m: r[00m)[00m ,[00m [34m[]rune[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: numBytes[00m [34muint[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: numBytes[00m)[00m ([34mVariableAccessExpr[00m: rCast[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:     [33m%.*s[00m[00m [34m^u8[00m)[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: numBytes[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m ([34mVariableAccessExpr[00m: rPtr[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printByte[00m ([34mVariableDecl[00m: ([34mVariable[00m: byte[00m [34mu8[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:   [33m%c[00m[00m [34m^u8[00m)[00m ([34mVariableAccessExpr[00m: byte[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printInt[00m ([34mVariableDecl[00m: ([34mVariable[00m: num[00m [34mint[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:    [33m%zd[00m[00m [34m^u8[00m)[00m ([34mVariableAccessExpr[00m: num[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printUint[00m ([34mVariableDecl[00m: ([34mVariable[00m: num[00m [34muint[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:    [33m%zu[00m[00m [34m^u8[00m)[00m ([34mVariableAccessExpr[00m: num[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::io/file`:
([34mUseDirective[00m: std::mem[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: FILE = struct {})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m fopen[00m ([34mVariableDecl[00m: ([34mVariable[00m: loc[00m [34m^u8[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: mode[00m [34m^u8[00m)[00m)[00m :[00m [34m^FILE[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m fseek[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: offset[00m [34muint[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: whence[00m [34muint[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m ftell[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m :[00m [34muint[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m rewind[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m fread[00m ([34mVariableDecl[00m: ([34mVariable[00m: where[00m [34m^u8[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: sz[00m [34muint[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: dunno[00m [34muint[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m fclose[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m getenv[00m ([34mVariableDecl[00m: ([34mVariable[00m: what[00m [34m^u8[00m)[00m)[00m :[00m [34m^u8[00m nil[00m)[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: FileMode = enum {Read: (), Write: (), Append: ()})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m getLegacyMode[00m :[00m [34mstring[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mVariableAccessExpr[00m: f[00m)[00m ([34mEnumLiteral[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStringLiteral[00m:  [33mr[00m[00m [34mstring[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mVariableAccessExpr[00m: f[00m)[00m ([34mEnumLiteral[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStringLiteral[00m:  [33mw[00m[00m [34mstring[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mVariableAccessExpr[00m: f[00m)[00m ([34mEnumLiteral[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStringLiteral[00m:  [33ma[00m[00m [34mstring[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mStringLiteral[00m:  [33mr[00m[00m [34mstring[00m)[00m)[00m)[00m)[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: Path = struct {location: string})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m new[00m ([34mVariableDecl[00m: ([34mVariable[00m: location[00m [34mstring[00m)[00m)[00m :[00m [34m^mut Path[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m p[00m [34m^mut Path[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<Path>[00m alloc[00m)[00m [34m^mut Path[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: p[00m)[00m)[00m member[00m location[00m)[00m  =[00m ([34mVariableAccessExpr[00m: location[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: p[00m)[00m)[00m)[00m)[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: File = struct {name: string, path: ^mut Path, handle: ^FILE})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m open[00m ([34mVariableDecl[00m: ([34mVariable[00m: path[00m [34m^mut Path[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: mode[00m [34mFileMode[00m)[00m)[00m :[00m [34m^mut File[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m f[00m [34m^mut File[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<File>[00m alloc[00m)[00m [34m^mut File[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: f[00m)[00m)[00m member[00m path[00m)[00m  =[00m ([34mVariableAccessExpr[00m: path[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: f[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m readToString[00m :[00m [34mstring[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: f[00m)[00m)[00m member[00m name[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m close[00m :[00m [34mvoid[00m ([34mBlock[00m)[00m)[00m)

AST of submodule `std::string/string`:
([34mUseDirective[00m: std::adt[00m)
([34mUseDirective[00m: std::mem[00m)
([34mUseDirective[00m: std::unicode::utf8[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: String = struct {data: ^mut List<rune>})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m from[00m ([34mVariableDecl[00m: ([34mVariable[00m: source[00m [34mstring[00m)[00m)[00m :[00m [34m^mut String[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: str[00m [34m^mut String[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: withCapacity[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m [34m^mut String[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: char[00m [34m[]u8[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: source[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m ,[00m [34m[]u8[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: decodedChar[00m [34m[]rune[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mrune[00m)[00m ,[00m [34m[]rune[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: decodeChar[00m [34muint[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: decode[00m)[00m ([34mVariableAccessExpr[00m: decodedChar[00m)[00m ([34mVariableAccessExpr[00m: char[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: decodedChar[00m)[00m index[00m ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: str[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m withCapacity[00m ([34mVariableDecl[00m: ([34mVariable[00m: size[00m [34muint[00m)[00m)[00m :[00m [34m^mut String[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: str[00m [34m^mut String[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<String>[00m alloc[00m)[00m [34m^mut String[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: str[00m)[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m data[00m :[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m newWithCapacity[00m)[00m ([34mVariableAccessExpr[00m: size[00m)[00m [34m^mut List<rune>[00m)[00m ,[00m [34mString[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mVariableAccessExpr[00m: size[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mRuneLiteral[00m:   [33m[00m[36m\0[33m[00m[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: str[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m clear[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: length[00m)[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m pop[00m :[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: length[00m)[00m [34muint[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mEnumLiteral[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m concat[00m ([34mVariableDecl[00m: ([34mVariable[00m: other[00m [34mstring[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: other[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: otherRunePointer[00m [34muintptr[00m)[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: other[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m [34muintptr[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: otherRunePointer[00m)[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m append[00m ([34mVariableDecl[00m: ([34mVariable[00m: char[00m [34mrune[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m append[00m)[00m ([34mVariableAccessExpr[00m: char[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m at[00m ([34mVariableDecl[00m: ([34mVariable[00m: index[00m [34muint[00m)[00m)[00m :[00m [34mrune[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m get[00m)[00m ([34mVariableAccessExpr[00m: index[00m)[00m [34mrune[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m length[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m getLength[00m)[00m [34muint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m destroy[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m destroy[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<String>[00m free[00m)[00m ([34mVariableAccessExpr[00m: a[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::string/util`:
([34mFunctionDecl[00m: ([34mFunction[00m: [00m contains[00m ([34mVariableDecl[00m: ([34mVariable[00m: haystack[00m [34mstring[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: needle[00m [34mstring[00m)[00m)[00m :[00m [34mbool[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: haystack[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: needle[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m count[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: haystack[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: haystack[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: needle[00m)[00m index[00m ([34mVariableAccessExpr[00m: count[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: count[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mVariableAccessExpr[00m: count[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mVariableAccessExpr[00m: count[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: needle[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mtrue[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m hasPrefix[00m ([34mVariableDecl[00m: ([34mVariable[00m: source[00m [34mstring[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: prefix[00m [34mstring[00m)[00m)[00m :[00m [34mbool[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: prefix[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: prefix[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_NOT_EQ[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: source[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: prefix[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mtrue[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m hasSuffix[00m ([34mVariableDecl[00m: ([34mVariable[00m: source[00m [34mstring[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: suffix[00m [34mstring[00m)[00m)[00m :[00m [34mbool[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: suffix[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: suffix[00m)[00m)[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: suffix[00m)[00m)[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_NOT_EQ[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: source[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: suffix[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mtrue[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m compare[00m ([34mVariableDecl[00m: ([34mVariable[00m: a[00m [34mstring[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: b[00m [34mstring[00m)[00m)[00m :[00m [34mbool[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_NOT_EQ[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: a[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: b[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: a[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_NOT_EQ[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: a[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: b[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mtrue[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::mem/mem`:
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m alloc[00m :[00m [34m^mut T[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawAlloc[00m)[00m ([34mSizeofExpr[00m: [34mT[00m)[00m [34muintptr[00m)[00m [34m^mut T[00m)[00m)[00m)[00m)[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: RawArray = struct {size: uint, ptr: ^u8})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m allocArray[00m ([34mVariableDecl[00m: ([34mVariable[00m: num[00m [34muint[00m)[00m)[00m :[00m [34m[]T[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: rawPtr[00m [34m^u8[00m)[00m  =[00m ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawAlloc[00m)[00m ([34mBinaryExpr[00m: BINOP_MUL[00m ([34mSizeofExpr[00m: [34mT[00m)[00m ([34mVariableAccessExpr[00m: num[00m)[00m)[00m [34muintptr[00m)[00m [34m^u8[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: rawArray[00m [34mRawArray[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m size[00m :[00m ([34mVariableAccessExpr[00m: num[00m)[00m ,[00m 
	[00m ptr[00m :[00m ([34mVariableAccessExpr[00m: rawPtr[00m)[00m ,[00m [34mRawArray[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: arrPtr[00m [34m^[]T[00m)[00m  =[00m ([34mCastExpr[00m: ([34mCastExpr[00m: ([34mPointerToExpr[00m: ([34mVariableAccessExpr[00m: rawArray[00m)[00m [34m^RawArray[00m)[00m [34muintptr[00m)[00m [34m^[]T[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: arrPtr[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m copyArray[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m dest[00m [34m[]T[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]T[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: num[00m [34muint[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m max[00m [34muint[00m)[00m  =[00m ([34mVariableAccessExpr[00m: num[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER[00m ([34mVariableAccessExpr[00m: max[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mVariableAccessExpr[00m: max[00m)[00m  =[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER[00m ([34mVariableAccessExpr[00m: max[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mVariableAccessExpr[00m: max[00m)[00m  =[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mVariableAccessExpr[00m: max[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m  =[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: i[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m free[00m ([34mVariableDecl[00m: ([34mVariable[00m: ptr[00m [34m^T[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawFree[00m)[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: ptr[00m)[00m [34muintptr[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m freeArray[00m ([34mVariableDecl[00m: ([34mVariable[00m: array[00m [34m[]T[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m rawArray[00m [34mRawArray[00m)[00m  =[00m ([34mDerefAccessExpr[00m: ([34mCastExpr[00m: ([34mCastExpr[00m: ([34mReferenceToExpr[00m: ([34mVariableAccessExpr[00m: array[00m)[00m [34m&[]T[00m)[00m [34muintptr[00m)[00m [34m^RawArray[00m)[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawFree[00m)[00m ([34mCastExpr[00m: ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: rawArray[00m)[00m member[00m ptr[00m)[00m [34muintptr[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::mem/raw`:
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m malloc[00m ([34mVariableDecl[00m: ([34mVariable[00m: size[00m [34muint[00m)[00m)[00m :[00m [34m^void[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m free[00m ([34mVariableDecl[00m: ([34mVariable[00m: ptr[00m [34m^void[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m rawAlloc[00m ([34mVariableDecl[00m: ([34mVariable[00m: bytes[00m [34muint[00m)[00m)[00m :[00m [34muintptr[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: malloc[00m)[00m ([34mVariableAccessExpr[00m: bytes[00m)[00m [34m^void[00m)[00m [34muintptr[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m rawFree[00m ([34mVariableDecl[00m: ([34mVariable[00m: ptr[00m [34muintptr[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: free[00m)[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: ptr[00m)[00m [34m^void[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::unicode::utf8/coding`:
([34mVariableDecl[00m: ([34mVariable[00m: TRAILING_BYTES[00m [34m[]u8[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m5[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m5[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m5[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m5[00m [34mu8[00m)[00m ,[00m [34m[]u8[00m)[00m)
([34mVariableDecl[00m: ([34mVariable[00m: OFFSETS[00m [34m[]u32[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m12416[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m925824[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m63447168[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4194836608[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2181570688[00m [34mu32[00m)[00m ,[00m [34m[]u32[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m numRunes[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]u8[00m)[00m)[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m num[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: nb[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: TRAILING_BYTES[00m)[00m index[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: i[00m)[00m BINOP_ADD[00m  =[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: nb[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m numBytes[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]rune[00m)[00m)[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m num[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: ch[00m [34mrune[00m)[00m  =[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m2048[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m65536[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m1114112[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m4[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: i[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m decode[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m dest[00m [34m[]rune[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]u8[00m)[00m)[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m srcIndex[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m destIndex[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: nb[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: TRAILING_BYTES[00m)[00m index[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m ([34mVariableAccessExpr[00m: nb[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m ch[00m [34mrune[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34mrune[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: nb[00m)[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_ADD[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_BIT_LEFT[00m  =[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: nb[00m)[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_ADD[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_BIT_LEFT[00m  =[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: nb[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_ADD[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_BIT_LEFT[00m  =[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_ADD[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_SUB[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: OFFSETS[00m)[00m index[00m ([34mVariableAccessExpr[00m: nb[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m  =[00m ([34mVariableAccessExpr[00m: ch[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m encode[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m dest[00m [34m[]u8[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]rune[00m)[00m)[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m srcIndex[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m destIndex[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: ch[00m [34mrune[00m)[00m  =[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m2048[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m192[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m65536[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m12[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m224[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m1114112[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m18[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m240[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m12[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m4[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::adt/list`:
([34mUseDirective[00m: std::mem[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: List = struct<T> {data: ^mut T, length: uint, capacity: uint})[00m)
([34mVariableDecl[00m: ([34mVariable[00m: BASE_CAPACITY[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m4[00m [34muint[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m new[00m :[00m [34m^mut List<T>[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<T>[00m newWithCapacity[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m [34m^mut List<T>[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m newWithCapacity[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m cap[00m [34muint[00m)[00m)[00m :[00m [34m^mut List<T>[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_LESS_EQ[00m ([34mVariableAccessExpr[00m: cap[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mVariableAccessExpr[00m: cap[00m)[00m  =[00m ([34mVariableAccessExpr[00m: BASE_CAPACITY[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: size[00m [34muint[00m)[00m  =[00m ([34mBinaryExpr[00m: BINOP_MUL[00m ([34mSizeofExpr[00m: [34mT[00m)[00m ([34mVariableAccessExpr[00m: cap[00m)[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: res[00m [34m^mut List<T>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<List<T>>[00m alloc[00m)[00m [34m^mut List<T>[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: res[00m)[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m data[00m :[00m ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawAlloc[00m)[00m ([34mVariableAccessExpr[00m: size[00m)[00m [34muintptr[00m)[00m [34m^mut T[00m)[00m ,[00m 
	[00m length[00m :[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m ,[00m 
	[00m capacity[00m :[00m ([34mVariableAccessExpr[00m: cap[00m)[00m ,[00m [34mList[00m [34m<[00m [34mT[00m [34m>[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: res[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m destroy[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawFree[00m)[00m ([34mCastExpr[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m [34muintptr[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<List<T>>[00m free[00m)[00m ([34mVariableAccessExpr[00m: it[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m toRawPointer[00m :[00m [34m^T[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m get[00m ([34mVariableDecl[00m: ([34mVariable[00m: index[00m [34muint[00m)[00m)[00m :[00m [34mT[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: index[00m)[00m ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: it[00m)[00m member[00m length[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: panic[00m)[00m ([34mStringLiteral[00m:                          [33mList.get: index >= length[00m[00m [34mstring[00m)[00m [34mvoid[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: it[00m)[00m member[00m data[00m)[00m index[00m ([34mVariableAccessExpr[00m: index[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m getLength[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: it[00m)[00m member[00m length[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m getCapacity[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: it[00m)[00m member[00m capacity[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m grow[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: oldData[00m [34m^mut T[00m)[00m  =[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m capacity[00m)[00m BINOP_MUL[00m  =[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: newData[00m [34m^mut T[00m)[00m  =[00m ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawAlloc[00m)[00m ([34mBinaryExpr[00m: BINOP_MUL[00m ([34mSizeofExpr[00m: [34mT[00m)[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m capacity[00m)[00m)[00m [34muintptr[00m)[00m [34m^mut T[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: newData[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m  =[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: oldData[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: i[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawFree[00m)[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: oldData[00m)[00m [34muintptr[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m  =[00m ([34mVariableAccessExpr[00m: newData[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m top[00m :[00m [34mOption[00m [34m<[00m [34mT[00m [34m>[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mEnumLiteral[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mEnumLiteral[00m: ([34mTupleLiteral[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<T>[00m get[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m [34mT[00m)[00m ,[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m pop[00m :[00m [34mOption[00m [34m<[00m [34mT[00m [34m>[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mEnumLiteral[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: poppedValue[00m [34mOption[00m [34m<[00m [34mT[00m [34m>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<T>[00m top[00m)[00m [34mOption[00m [34m<[00m [34mT[00m [34m>[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m BINOP_SUB[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: poppedValue[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m append[00m ([34mVariableDecl[00m: ([34mVariable[00m: value[00m [34mT[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m capacity[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<T>[00m grow[00m)[00m [34mvoid[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m index[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m)[00m  =[00m ([34mVariableAccessExpr[00m: value[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m)

[01m[32mEnded inference phase[00m (39.81ms)
[01m[32mStarted semantic analysis phase[00m
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.09ms)
 [32mEnded analysis pass[00m attribute (0.11ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.07ms)
 [32mEnded analysis pass[00m unreachable (0.08ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.09ms)
 [32mEnded analysis pass[00m break and next (0.11ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.07ms)
 [32mEnded analysis pass[00m deprecated (0.09ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.06ms)
 [32mEnded analysis pass[00m recusrive definition (0.08ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.17ms)
 [32mEnded analysis pass[00m type (0.19ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.07ms)
 [32mEnded analysis pass[00m immutable assign (0.08ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.08ms)
 [32mEnded analysis pass[00m use before declare (0.09ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.07ms)
 [32mEnded analysis pass[00m misc (0.08ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.07ms)
 [32mEnded analysis pass[00m reference (0.09ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.09ms)
 [32mEnded analysis pass[00m unused (0.11ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.07ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.09ms)
 [32mEnded analysis pass[00m attribute (0.20ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.07ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.09ms)
 [32mEnded analysis pass[00m unreachable (0.21ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.07ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.09ms)
 [32mEnded analysis pass[00m break and next (0.21ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.09ms)
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.07ms)
 [32mEnded analysis pass[00m deprecated (0.21ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.07ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.09ms)
 [32mEnded analysis pass[00m recusrive definition (0.22ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.12ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.15ms)
 [32mEnded analysis pass[00m type (0.33ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.06ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.09ms)
 [32mEnded analysis pass[00m immutable assign (0.20ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.08ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.11ms)
 [32mEnded analysis pass[00m use before declare (0.24ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.06ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.09ms)
 [32mEnded analysis pass[00m misc (0.20ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.08ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.10ms)
 [32mEnded analysis pass[00m reference (0.23ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.11ms)
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.07ms)
 [32mEnded analysis pass[00m unused (0.24ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.12ms)
 [32mEnded analysis pass[00m attribute (0.30ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.10ms)
 [32mEnded analysis pass[00m unreachable (0.28ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.11ms)
 [32mEnded analysis pass[00m break and next (0.29ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.11ms)
 [32mEnded analysis pass[00m deprecated (0.29ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.10ms)
 [32mEnded analysis pass[00m recusrive definition (0.28ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.30ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.15ms)
 [32mEnded analysis pass[00m type (0.50ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.10ms)
 [32mEnded analysis pass[00m immutable assign (0.28ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.15ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.13ms)
 [32mEnded analysis pass[00m use before declare (0.34ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.11ms)
 [32mEnded analysis pass[00m misc (0.29ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.11ms)
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.15ms)
 [32mEnded analysis pass[00m reference (0.30ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::string/string
[33m[01mwarning:[00m [string:22:3] Unused variable `decodeChar`
        decodeChar := utf8::decode(decodedChar, char);
        [32m[01m^[00m

  [32mEnded checking submodule[00m std::string/string (0.19ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.12ms)
 [32mEnded analysis pass[00m unused (0.36ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.08ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.03ms)
 [32mEnded analysis pass[00m attribute (0.15ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.07ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m unreachable (0.14ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.03ms)
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.07ms)
 [32mEnded analysis pass[00m break and next (0.19ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.08ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m deprecated (0.15ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.07ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m recusrive definition (0.14ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.12ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.03ms)
 [32mEnded analysis pass[00m type (0.20ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.07ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m immutable assign (0.14ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.09ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.03ms)
 [32mEnded analysis pass[00m use before declare (0.17ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.07ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m misc (0.14ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.03ms)
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.07ms)
 [32mEnded analysis pass[00m reference (0.15ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.09ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.03ms)
 [32mEnded analysis pass[00m unused (0.16ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.35ms)
 [32mEnded analysis pass[00m attribute (0.37ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.33ms)
 [32mEnded analysis pass[00m unreachable (0.36ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.34ms)
 [32mEnded analysis pass[00m break and next (0.36ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.33ms)
 [32mEnded analysis pass[00m deprecated (0.36ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.32ms)
 [32mEnded analysis pass[00m recusrive definition (0.34ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.59ms)
 [32mEnded analysis pass[00m type (0.62ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.33ms)
 [32mEnded analysis pass[00m immutable assign (0.36ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.38ms)
 [32mEnded analysis pass[00m use before declare (0.41ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.34ms)
 [32mEnded analysis pass[00m misc (0.37ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.35ms)
 [32mEnded analysis pass[00m reference (0.38ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.38ms)
 [32mEnded analysis pass[00m unused (0.40ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.15ms)
 [32mEnded analysis pass[00m attribute (0.17ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.14ms)
 [32mEnded analysis pass[00m unreachable (0.17ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.15ms)
 [32mEnded analysis pass[00m break and next (0.18ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.19ms)
 [32mEnded analysis pass[00m deprecated (0.21ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.13ms)
 [32mEnded analysis pass[00m recusrive definition (0.15ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.37ms)
 [32mEnded analysis pass[00m type (0.38ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.14ms)
 [32mEnded analysis pass[00m immutable assign (0.16ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.17ms)
 [32mEnded analysis pass[00m use before declare (0.19ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.13ms)
 [32mEnded analysis pass[00m misc (0.15ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.15ms)
 [32mEnded analysis pass[00m reference (0.17ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.17ms)
 [32mEnded analysis pass[00m unused (0.19ms)
[01m[32mEnded semantic analysis phase[00m (16.57ms)
[01m[32mStarted codegen phase[00m
 [32mStarted codegenning[00m __main
 [32mEnded codegenning[00m __main (5.06ms)
 [32mStarted codegenning[00m std::io
 [32mEnded codegenning[00m std::io (13.44ms)
 [32mStarted codegenning[00m std::string
 [32mEnded codegenning[00m std::string (28.15ms)
 [32mStarted codegenning[00m std::mem
 [32mEnded codegenning[00m std::mem (3.19ms)
 [32mStarted codegenning[00m std::unicode::utf8
 [32mEnded codegenning[00m std::unicode::utf8 (23.05ms)
 [32mStarted codegenning[00m std::adt
 [32mEnded codegenning[00m std::adt (11.75ms)
 [32mStarted codegenning[00m __runtime
 [32mEnded codegenning[00m __runtime (3.71ms)
 [32mStarted creating binary[00m
  [32mStarted creating object[00m __main
  [32mEnded creating object[00m __main (4.43ms)
  [32mStarted creating object[00m std::io
  [32mEnded creating object[00m std::io (4.39ms)
  [32mStarted creating object[00m std::string
  [32mEnded creating object[00m std::string (7.24ms)
  [32mStarted creating object[00m std::mem
  [32mEnded creating object[00m std::mem (6.28ms)
  [32mStarted creating object[00m std::unicode::utf8
  [32mEnded creating object[00m std::unicode::utf8 (4.62ms)
  [32mStarted creating object[00m std::adt
  [32mEnded creating object[00m std::adt (4.54ms)
  [32mStarted creating object[00m __runtime
  [32mEnded creating object[00m __runtime (2.20ms)
  [32mStarted linking[00m
cc [-fno-PIE -nodefaultlibs -lc -lm main-_M6__main.o main-_M3std_M2io.o main-_M3std_M6string.o main-_M3std_M3mem.o main-_M3std_M7unicode_M4utf8.o main-_M3std_M3adt.o main-_M9__runtime.o -o main]
  [32mEnded linking[00m (29.00ms)
 [32mEnded creating binary[00m (63.28ms)
[01m[32mEnded codegen phase[00m (152.92ms)
[32m[01mFinished build[00m (1 file(s), 254.26ms)
[01m[32mStarted lexing[00m runtime
[   1:   2:  separator] `[`
[   2:   3: identifier] `c`
[   3:   4:  separator] `]`
[   5:   9: identifier] `func`
[  10:  16: identifier] `printf`
[  16:  17:  separator] `(`
[  17:  20: identifier] `fmt`
[  20:  21:   operator] `:`
[  22:  23:   operator] `^`
[  23:  25: identifier] `u8`
[  25:  26:  separator] `,`
[  27:  28:  separator] `.`
[  28:  29:  separator] `.`
[  29:  30:  separator] `.`
[  30:  31:  separator] `)`
[  32:  34:   operator] `->`
[  35:  38: identifier] `int`
[  38:  39:  separator] `;`
[  40:  41:  separator] `[`
[  41:  42: identifier] `c`
[  42:  43:  separator] `]`
[  44:  48: identifier] `func`
[  49:  53: identifier] `exit`
[  53:  54:  separator] `(`
[  54:  58: identifier] `code`
[  58:  59:   operator] `:`
[  60:  61: identifier] `C`
[  61:  63:   operator] `::`
[  63:  66: identifier] `int`
[  66:  67:  separator] `)`
[  67:  68:  separator] `;`
[  70:  73: identifier] `pub`
[  74:  78: identifier] `func`
[  79:  84: identifier] `panic`
[  84:  85:  separator] `(`
[  85:  92: identifier] `message`
[  92:  93:   operator] `:`
[  94: 100: identifier] `string`
[ 100: 101:  separator] `)`
[ 102: 103:  separator] `{`
[ 105: 107: identifier] `if`
[ 108: 111: identifier] `len`
[ 111: 112:  separator] `(`
[ 112: 119: identifier] `message`
[ 119: 120:  separator] `)`
[ 121: 123:   operator] `==`
[ 124: 125:     number] `0`
[ 126: 127:  separator] `{`
[ 130: 131: identifier] `C`
[ 131: 133:   operator] `::`
[ 133: 139: identifier] `printf`
[ 139: 140:  separator] `(`
[ 140: 141: identifier] `c`
[ 142: 144:     string] `\n`
[ 145: 146:  separator] `)`
[ 146: 147:  separator] `;`
[ 149: 150:  separator] `}`
[ 151: 155: identifier] `else`
[ 156: 157:  separator] `{`
[ 160: 161: identifier] `C`
[ 161: 163:   operator] `::`
[ 163: 169: identifier] `printf`
[ 169: 170:  separator] `(`
[ 170: 171: identifier] `c`
[ 172: 185:     string] `panic: %.*s\n`
[ 186: 187:  separator] `,`
[ 188: 191: identifier] `len`
[ 191: 192:  separator] `(`
[ 192: 199: identifier] `message`
[ 199: 200:  separator] `)`
[ 200: 201:  separator] `,`
[ 202: 203:   operator] `&`
[ 203: 210: identifier] `message`
[ 210: 211:  separator] `[`
[ 211: 212:     number] `0`
[ 212: 213:  separator] `]`
[ 213: 214:  separator] `)`
[ 214: 215:  separator] `;`
[ 217: 218:  separator] `}`
[ 223: 224: identifier] `C`
[ 224: 226:   operator] `::`
[ 226: 230: identifier] `exit`
[ 230: 231:  separator] `(`
[ 231: 232:   operator] `-`
[ 232: 233:     number] `1`
[ 233: 234:  separator] `)`
[ 234: 235:  separator] `;`
[ 236: 237:  separator] `}`
[ 239: 242: identifier] `pub`
[ 243: 247: identifier] `type`
[ 248: 254: identifier] `Option`
[ 255: 259: identifier] `enum`
[ 259: 260:   operator] `<`
[ 260: 261: identifier] `T`
[ 261: 262:   operator] `>`
[ 263: 264:  separator] `{`
[ 269: 273: identifier] `Some`
[ 273: 274:  separator] `(`
[ 274: 275: identifier] `T`
[ 275: 276:  separator] `)`
[ 276: 277:  separator] `,`
[ 282: 286: identifier] `None`
[ 286: 287:  separator] `,`
[ 288: 289:  separator] `}`
[ 289: 290:  separator] `;`
[ 292: 295: identifier] `pub`
[ 296: 300: identifier] `func`
[ 301: 302:  separator] `(`
[ 302: 303: identifier] `o`
[ 303: 304:   operator] `:`
[ 305: 311: identifier] `Option`
[ 311: 312:   operator] `<`
[ 312: 313: identifier] `T`
[ 313: 314:   operator] `>`
[ 314: 315:  separator] `)`
[ 316: 322: identifier] `unwrap`
[ 322: 323:  separator] `(`
[ 323: 324:  separator] `)`
[ 325: 327:   operator] `->`
[ 328: 329: identifier] `T`
[ 330: 331:  separator] `{`
[ 336: 341: identifier] `match`
[ 342: 343: identifier] `o`
[ 344: 345:  separator] `{`
[ 354: 358: identifier] `Some`
[ 358: 359:  separator] `(`
[ 359: 360: identifier] `t`
[ 360: 361:  separator] `)`
[ 362: 364:   operator] `=>`
[ 365: 371: identifier] `return`
[ 372: 373: identifier] `t`
[ 373: 374:  separator] `,`
[ 383: 387: identifier] `None`
[ 388: 390:   operator] `=>`
[ 391: 396: identifier] `panic`
[ 396: 397:  separator] `(`
[ 398: 437:     string] `Option.unwrap: expected Some, have None`
[ 438: 439:  separator] `)`
[ 439: 440:  separator] `,`
[ 445: 446:  separator] `}`
[ 452: 455: identifier] `mut`
[ 456: 457: identifier] `a`
[ 457: 458:   operator] `:`
[ 459: 460: identifier] `T`
[ 460: 461:  separator] `;`
[ 466: 472: identifier] `return`
[ 473: 474: identifier] `a`
[ 474: 475:  separator] `;`
[ 476: 477:  separator] `}`
[01m[32mEnded lexing[00m runtime (1.29ms)
[01m[32mStarted parsing[00m runtime
[01m[32mEnded parsing[00m runtime (0.54ms)
[01m[32mStarted constructing module[00m __runtime
 [32mStarted constructing submodule[00m runtime
 [32mEnded constructing submodule[00m runtime (0.11ms)
[01m[32mEnded constructing module[00m __runtime (0.14ms)
[01m[32mStarted resolving module[00m __runtime
[01m[32mEnded resolving module[00m __runtime (0.27ms)
This scope:
 panic (function)
 Option (type)
Parent scope:
  s128 (type)
  u16 (type)
  u32 (type)
  uint (type)
  s16 (type)
  u128 (type)
  f128 (type)
  string (type)
  rune (type)
  s64 (type)
  u8 (type)
  u64 (type)
  f32 (type)
  f64 (type)
  void (type)
  ype(18) (type)
  s8 (type)
  s32 (type)
  int (type)
  uintptr (type)
  bool (type)
[01m[32mStarted inferring submodule[00m runtime
[01m[32mEnded inferring submodule[00m runtime (0.63ms)
[01m[32mStarted analysis pass[00m attribute
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.08ms)
[01m[32mEnded analysis pass[00m attribute (0.13ms)
[01m[32mStarted analysis pass[00m unreachable
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.06ms)
[01m[32mEnded analysis pass[00m unreachable (0.10ms)
[01m[32mStarted analysis pass[00m break and next
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.06ms)
[01m[32mEnded analysis pass[00m break and next (0.09ms)
[01m[32mStarted analysis pass[00m deprecated
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.05ms)
[01m[32mEnded analysis pass[00m deprecated (0.07ms)
[01m[32mStarted analysis pass[00m recusrive definition
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.05ms)
[01m[32mEnded analysis pass[00m recusrive definition (0.07ms)
[01m[32mStarted analysis pass[00m type
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.09ms)
[01m[32mEnded analysis pass[00m type (0.12ms)
[01m[32mStarted analysis pass[00m immutable assign
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.05ms)
[01m[32mEnded analysis pass[00m immutable assign (0.07ms)
[01m[32mStarted analysis pass[00m use before declare
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.06ms)
[01m[32mEnded analysis pass[00m use before declare (0.07ms)
[01m[32mStarted analysis pass[00m misc
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.04ms)
[01m[32mEnded analysis pass[00m misc (0.06ms)
[01m[32mStarted analysis pass[00m reference
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.05ms)
[01m[32mEnded analysis pass[00m reference (0.07ms)
[01m[32mStarted analysis pass[00m unused
 [32mStarted checking submodule[00m __runtime/runtime
 [32mEnded checking submodule[00m __runtime/runtime (0.06ms)
[01m[32mEnded analysis pass[00m unused (0.07ms)
[01m[32mStarted lexing[00m test-dynamic-string
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  12: identifier] `io`
[  13:  14:   operator] `#`
[  14:  17: identifier] `use`
[  18:  21: identifier] `std`
[  21:  23:   operator] `::`
[  23:  29: identifier] `string`
[  31:  34: identifier] `pub`
[  35:  39: identifier] `func`
[  40:  44: identifier] `main`
[  44:  45:  separator] `(`
[  45:  46:  separator] `)`
[  47:  49:   operator] `->`
[  50:  53: identifier] `int`
[  54:  55:  separator] `{`
[  57:  61: identifier] `test`
[  62:  63:   operator] `:`
[  63:  64:   operator] `=`
[  65:  71: identifier] `string`
[  71:  73:   operator] `::`
[  73:  79: identifier] `String`
[  79:  81:   operator] `::`
[  81:  85: identifier] `from`
[  85:  86:  separator] `(`
[  87:  93:     string] `hello `
[  94:  95:  separator] `)`
[  95:  96:  separator] `;`
[  98: 103: identifier] `defer`
[ 104: 108: identifier] `test`
[ 108: 109:  separator] `.`
[ 109: 116: identifier] `destroy`
[ 116: 117:  separator] `(`
[ 117: 118:  separator] `)`
[ 118: 119:  separator] `;`
[ 122: 124: identifier] `io`
[ 124: 126:   operator] `::`
[ 126: 144: identifier] `printDynamicString`
[ 144: 145:  separator] `(`
[ 145: 149: identifier] `test`
[ 149: 150:  separator] `)`
[ 150: 151:  separator] `;`
[ 154: 158: identifier] `test`
[ 158: 159:  separator] `.`
[ 159: 165: identifier] `append`
[ 165: 166:  separator] `(`
[ 166: 169:       rune] `'w'`
[ 169: 170:  separator] `)`
[ 170: 171:  separator] `;`
[ 173: 177: identifier] `test`
[ 177: 178:  separator] `.`
[ 178: 184: identifier] `append`
[ 184: 185:  separator] `(`
[ 185: 188:       rune] `'o'`
[ 188: 189:  separator] `)`
[ 189: 190:  separator] `;`
[ 192: 196: identifier] `test`
[ 196: 197:  separator] `.`
[ 197: 203: identifier] `concat`
[ 203: 204:  separator] `(`
[ 205: 208:     string] `rld`
[ 209: 210:  separator] `)`
[ 210: 211:  separator] `;`
[ 213: 215: identifier] `io`
[ 215: 217:   operator] `::`
[ 217: 235: identifier] `printDynamicString`
[ 235: 236:  separator] `(`
[ 236: 240: identifier] `test`
[ 240: 241:  separator] `)`
[ 241: 242:  separator] `;`
[ 245: 256: identifier] `poppedValue`
[ 257: 258:   operator] `:`
[ 258: 259:   operator] `=`
[ 260: 264: identifier] `test`
[ 264: 265:  separator] `.`
[ 265: 268: identifier] `pop`
[ 268: 269:  separator] `(`
[ 269: 270:  separator] `)`
[ 270: 271:  separator] `;`
[ 274: 276: identifier] `io`
[ 276: 278:   operator] `::`
[ 278: 285: identifier] `println`
[ 285: 286:  separator] `(`
[ 287: 300:     string] `just popped: `
[ 301: 302:  separator] `)`
[ 302: 303:  separator] `;`
[ 305: 307: identifier] `io`
[ 307: 309:   operator] `::`
[ 309: 318: identifier] `printRune`
[ 318: 319:  separator] `(`
[ 319: 330: identifier] `poppedValue`
[ 330: 331:  separator] `.`
[ 331: 337: identifier] `unwrap`
[ 337: 338:  separator] `(`
[ 338: 339:  separator] `)`
[ 339: 340:  separator] `)`
[ 340: 341:  separator] `;`
[ 343: 345: identifier] `io`
[ 345: 347:   operator] `::`
[ 347: 354: identifier] `println`
[ 354: 355:  separator] `(`
[ 356: 356:     string] ``
[ 357: 358:  separator] `)`
[ 358: 359:  separator] `;`
[ 362: 364: identifier] `io`
[ 364: 366:   operator] `::`
[ 366: 384: identifier] `printDynamicString`
[ 384: 385:  separator] `(`
[ 385: 389: identifier] `test`
[ 389: 390:  separator] `)`
[ 390: 391:  separator] `;`
[ 394: 397: identifier] `mut`
[ 398: 401: identifier] `idx`
[ 402: 403:   operator] `:`
[ 403: 404:   operator] `=`
[ 405: 409: identifier] `uint`
[ 409: 410:  separator] `(`
[ 410: 411:     number] `0`
[ 411: 412:  separator] `)`
[ 412: 413:  separator] `;`
[ 415: 418: identifier] `for`
[ 419: 422: identifier] `idx`
[ 423: 424:   operator] `<`
[ 425: 429: identifier] `test`
[ 429: 430:  separator] `.`
[ 430: 436: identifier] `length`
[ 436: 437:  separator] `(`
[ 437: 438:  separator] `)`
[ 439: 440:  separator] `{`
[ 443: 454: identifier] `poppedValue`
[ 455: 456:   operator] `:`
[ 456: 457:   operator] `=`
[ 458: 462: identifier] `test`
[ 462: 463:  separator] `.`
[ 463: 466: identifier] `pop`
[ 466: 467:  separator] `(`
[ 467: 468:  separator] `)`
[ 468: 469:  separator] `;`
[ 472: 474: identifier] `io`
[ 474: 476:   operator] `::`
[ 476: 485: identifier] `printRune`
[ 485: 486:  separator] `(`
[ 486: 497: identifier] `poppedValue`
[ 497: 498:  separator] `.`
[ 498: 504: identifier] `unwrap`
[ 504: 505:  separator] `(`
[ 505: 506:  separator] `)`
[ 506: 507:  separator] `)`
[ 507: 508:  separator] `;`
[ 511: 514: identifier] `idx`
[ 515: 516:   operator] `+`
[ 516: 517:   operator] `=`
[ 518: 519:     number] `1`
[ 519: 520:  separator] `;`
[ 522: 523:  separator] `}`
[ 526: 530: identifier] `test`
[ 530: 531:  separator] `.`
[ 531: 534: identifier] `pop`
[ 534: 535:  separator] `(`
[ 535: 536:  separator] `)`
[ 536: 537:  separator] `;`
[ 548: 552: identifier] `test`
[ 552: 553:  separator] `.`
[ 553: 559: identifier] `append`
[ 559: 560:  separator] `(`
[ 560: 563:       rune] `'京'`
[ 563: 564:  separator] `)`
[ 564: 565:  separator] `;`
[ 567: 572: identifier] `value`
[ 573: 574:   operator] `:`
[ 574: 575:   operator] `=`
[ 576: 580: identifier] `test`
[ 580: 581:  separator] `.`
[ 581: 584: identifier] `pop`
[ 584: 585:  separator] `(`
[ 585: 586:  separator] `)`
[ 586: 587:  separator] `;`
[ 590: 592: identifier] `io`
[ 592: 594:   operator] `::`
[ 594: 603: identifier] `printRune`
[ 603: 604:  separator] `(`
[ 604: 608:       rune] `'\n'`
[ 608: 609:  separator] `)`
[ 609: 610:  separator] `;`
[ 612: 614: identifier] `io`
[ 614: 616:   operator] `::`
[ 616: 625: identifier] `printRune`
[ 625: 626:  separator] `(`
[ 626: 631: identifier] `value`
[ 631: 632:  separator] `.`
[ 632: 638: identifier] `unwrap`
[ 638: 639:  separator] `(`
[ 639: 640:  separator] `)`
[ 640: 641:  separator] `)`
[ 641: 642:  separator] `;`
[ 645: 651: identifier] `return`
[ 652: 653:     number] `0`
[ 653: 654:  separator] `;`
[ 655: 656:  separator] `}`
[01m[32mEnded lexing[00m test-dynamic-string (1.53ms)
[01m[32mStarted parsing[00m test-dynamic-string
[01m[32mEnded parsing[00m test-dynamic-string (0.61ms)
[01m[32mStarted read/lex/parse phase[00m
 [32mStarted lexing[00m file
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  13: identifier] `mem`
[  15:  19: identifier] `type`
[  20:  24: identifier] `FILE`
[  25:  31: identifier] `struct`
[  32:  33:  separator] `{`
[  33:  34:  separator] `}`
[  34:  35:  separator] `;`
[  37:  38:  separator] `[`
[  38:  39: identifier] `c`
[  39:  40:  separator] `]`
[  41:  45: identifier] `func`
[  46:  51: identifier] `fopen`
[  51:  52:  separator] `(`
[  52:  55: identifier] `loc`
[  55:  56:   operator] `:`
[  57:  58:   operator] `^`
[  58:  60: identifier] `u8`
[  60:  61:  separator] `,`
[  62:  66: identifier] `mode`
[  66:  67:   operator] `:`
[  68:  69:   operator] `^`
[  69:  71: identifier] `u8`
[  71:  72:  separator] `)`
[  73:  75:   operator] `->`
[  76:  77:   operator] `^`
[  77:  81: identifier] `FILE`
[  81:  82:  separator] `;`
[  83:  84:  separator] `[`
[  84:  85: identifier] `c`
[  85:  86:  separator] `]`
[  87:  91: identifier] `func`
[  92:  97: identifier] `fseek`
[  97:  98:  separator] `(`
[  98: 104: identifier] `handle`
[ 104: 105:   operator] `:`
[ 106: 107:   operator] `^`
[ 107: 111: identifier] `FILE`
[ 111: 112:  separator] `,`
[ 113: 119: identifier] `offset`
[ 119: 120:   operator] `:`
[ 121: 125: identifier] `uint`
[ 125: 126:  separator] `,`
[ 127: 133: identifier] `whence`
[ 133: 134:   operator] `:`
[ 135: 139: identifier] `uint`
[ 139: 140:  separator] `)`
[ 140: 141:  separator] `;`
[ 142: 143:  separator] `[`
[ 143: 144: identifier] `c`
[ 144: 145:  separator] `]`
[ 146: 150: identifier] `func`
[ 151: 156: identifier] `ftell`
[ 156: 157:  separator] `(`
[ 157: 163: identifier] `handle`
[ 163: 164:   operator] `:`
[ 165: 166:   operator] `^`
[ 166: 170: identifier] `FILE`
[ 170: 171:  separator] `)`
[ 172: 174:   operator] `->`
[ 175: 179: identifier] `uint`
[ 179: 180:  separator] `;`
[ 181: 182:  separator] `[`
[ 182: 183: identifier] `c`
[ 183: 184:  separator] `]`
[ 185: 189: identifier] `func`
[ 190: 196: identifier] `rewind`
[ 196: 197:  separator] `(`
[ 197: 203: identifier] `handle`
[ 203: 204:   operator] `:`
[ 205: 206:   operator] `^`
[ 206: 210: identifier] `FILE`
[ 210: 211:  separator] `)`
[ 211: 212:  separator] `;`
[ 213: 214:  separator] `[`
[ 214: 215: identifier] `c`
[ 215: 216:  separator] `]`
[ 217: 221: identifier] `func`
[ 222: 227: identifier] `fread`
[ 227: 228:  separator] `(`
[ 228: 233: identifier] `where`
[ 233: 234:   operator] `:`
[ 235: 236:   operator] `^`
[ 236: 238: identifier] `u8`
[ 238: 239:  separator] `,`
[ 240: 242: identifier] `sz`
[ 242: 243:   operator] `:`
[ 244: 248: identifier] `uint`
[ 248: 249:  separator] `,`
[ 250: 255: identifier] `dunno`
[ 255: 256:   operator] `:`
[ 257: 261: identifier] `uint`
[ 261: 262:  separator] `,`
[ 263: 269: identifier] `handle`
[ 269: 270:   operator] `:`
[ 271: 272:   operator] `^`
[ 272: 276: identifier] `FILE`
[ 276: 277:  separator] `)`
[ 277: 278:  separator] `;`
[ 279: 280:  separator] `[`
[ 280: 281: identifier] `c`
[ 281: 282:  separator] `]`
[ 283: 287: identifier] `func`
[ 288: 294: identifier] `fclose`
[ 294: 295:  separator] `(`
[ 295: 301: identifier] `handle`
[ 301: 302:   operator] `:`
[ 303: 304:   operator] `^`
[ 304: 308: identifier] `FILE`
[ 308: 309:  separator] `)`
[ 309: 310:  separator] `;`
[ 311: 312:  separator] `[`
[ 312: 313: identifier] `c`
[ 313: 314:  separator] `]`
[ 315: 319: identifier] `func`
[ 320: 326: identifier] `getenv`
[ 326: 327:  separator] `(`
[ 327: 331: identifier] `what`
[ 331: 332:   operator] `:`
[ 333: 334:   operator] `^`
[ 334: 336: identifier] `u8`
[ 336: 337:  separator] `)`
[ 338: 340:   operator] `->`
[ 341: 342:   operator] `^`
[ 342: 344: identifier] `u8`
[ 344: 345:  separator] `;`
[ 347: 350: identifier] `pub`
[ 351: 355: identifier] `type`
[ 356: 364: identifier] `FileMode`
[ 365: 369: identifier] `enum`
[ 370: 371:  separator] `{`
[ 373: 377: identifier] `Read`
[ 377: 378:  separator] `,`
[ 380: 385: identifier] `Write`
[ 385: 386:  separator] `,`
[ 388: 394: identifier] `Append`
[ 394: 395:  separator] `,`
[ 396: 397:  separator] `}`
[ 397: 398:  separator] `;`
[ 446: 449: identifier] `pub`
[ 450: 454: identifier] `func`
[ 455: 456:  separator] `(`
[ 456: 457: identifier] `f`
[ 457: 458:   operator] `:`
[ 459: 467: identifier] `FileMode`
[ 467: 468:  separator] `)`
[ 469: 482: identifier] `getLegacyMode`
[ 482: 483:  separator] `(`
[ 483: 484:  separator] `)`
[ 485: 487:   operator] `->`
[ 488: 494: identifier] `string`
[ 495: 496:  separator] `{`
[ 498: 500: identifier] `if`
[ 501: 502: identifier] `f`
[ 503: 505:   operator] `==`
[ 506: 514: identifier] `FileMode`
[ 514: 516:   operator] `::`
[ 516: 520: identifier] `Read`
[ 521: 522:  separator] `{`
[ 525: 531: identifier] `return`
[ 533: 534:     string] `r`
[ 535: 536:  separator] `;`
[ 538: 539:  separator] `}`
[ 541: 545: identifier] `else`
[ 546: 548: identifier] `if`
[ 549: 550: identifier] `f`
[ 551: 553:   operator] `==`
[ 554: 562: identifier] `FileMode`
[ 562: 564:   operator] `::`
[ 564: 569: identifier] `Write`
[ 570: 571:  separator] `{`
[ 574: 580: identifier] `return`
[ 582: 583:     string] `w`
[ 584: 585:  separator] `;`
[ 587: 588:  separator] `}`
[ 590: 594: identifier] `else`
[ 595: 597: identifier] `if`
[ 598: 599: identifier] `f`
[ 600: 602:   operator] `==`
[ 603: 611: identifier] `FileMode`
[ 611: 613:   operator] `::`
[ 613: 619: identifier] `Append`
[ 620: 621:  separator] `{`
[ 624: 630: identifier] `return`
[ 632: 633:     string] `a`
[ 634: 635:  separator] `;`
[ 637: 638:  separator] `}`
[ 640: 646: identifier] `return`
[ 648: 649:     string] `r`
[ 650: 651:  separator] `;`
[ 668: 669:  separator] `}`
[ 671: 674: identifier] `pub`
[ 675: 679: identifier] `type`
[ 680: 684: identifier] `Path`
[ 685: 691: identifier] `struct`
[ 692: 693:  separator] `{`
[ 695: 703: identifier] `location`
[ 703: 704:   operator] `:`
[ 705: 711: identifier] `string`
[ 711: 712:  separator] `,`
[ 713: 714:  separator] `}`
[ 714: 715:  separator] `;`
[ 717: 720: identifier] `pub`
[ 721: 725: identifier] `func`
[ 726: 727:  separator] `(`
[ 727: 731: identifier] `Path`
[ 731: 732:  separator] `)`
[ 733: 736: identifier] `new`
[ 736: 737:  separator] `(`
[ 737: 745: identifier] `location`
[ 745: 746:   operator] `:`
[ 747: 753: identifier] `string`
[ 753: 754:  separator] `)`
[ 755: 757:   operator] `->`
[ 758: 759:   operator] `^`
[ 759: 762: identifier] `mut`
[ 763: 767: identifier] `Path`
[ 768: 769:  separator] `{`
[ 771: 774: identifier] `mut`
[ 775: 776: identifier] `p`
[ 776: 777:   operator] `:`
[ 778: 779:   operator] `^`
[ 779: 782: identifier] `mut`
[ 783: 787: identifier] `Path`
[ 788: 789:   operator] `=`
[ 790: 793: identifier] `mem`
[ 793: 795:   operator] `::`
[ 795: 800: identifier] `alloc`
[ 800: 801:   operator] `<`
[ 801: 805: identifier] `Path`
[ 805: 806:   operator] `>`
[ 806: 807:  separator] `(`
[ 807: 808:  separator] `)`
[ 808: 809:  separator] `;`
[ 811: 812: identifier] `p`
[ 812: 813:  separator] `.`
[ 813: 821: identifier] `location`
[ 822: 823:   operator] `=`
[ 824: 832: identifier] `location`
[ 832: 833:  separator] `;`
[ 835: 841: identifier] `return`
[ 842: 843: identifier] `p`
[ 843: 844:  separator] `;`
[ 845: 846:  separator] `}`
[ 848: 851: identifier] `pub`
[ 852: 856: identifier] `type`
[ 857: 861: identifier] `File`
[ 862: 868: identifier] `struct`
[ 869: 870:  separator] `{`
[ 872: 876: identifier] `name`
[ 876: 877:   operator] `:`
[ 878: 884: identifier] `string`
[ 884: 885:  separator] `,`
[ 887: 891: identifier] `path`
[ 891: 892:   operator] `:`
[ 893: 894:   operator] `^`
[ 894: 897: identifier] `mut`
[ 898: 902: identifier] `Path`
[ 902: 903:  separator] `,`
[ 905: 911: identifier] `handle`
[ 911: 912:   operator] `:`
[ 913: 914:   operator] `^`
[ 914: 918: identifier] `FILE`
[ 918: 919:  separator] `,`
[ 920: 921:  separator] `}`
[ 921: 922:  separator] `;`
[ 924: 927: identifier] `pub`
[ 928: 932: identifier] `func`
[ 933: 934:  separator] `(`
[ 934: 938: identifier] `File`
[ 938: 939:  separator] `)`
[ 940: 944: identifier] `open`
[ 944: 945:  separator] `(`
[ 945: 949: identifier] `path`
[ 949: 950:   operator] `:`
[ 951: 952:   operator] `^`
[ 952: 955: identifier] `mut`
[ 956: 960: identifier] `Path`
[ 960: 961:  separator] `,`
[ 962: 966: identifier] `mode`
[ 966: 967:   operator] `:`
[ 968: 976: identifier] `FileMode`
[ 976: 977:  separator] `)`
[ 978: 980:   operator] `->`
[ 981: 982:   operator] `^`
[ 982: 985: identifier] `mut`
[ 986: 990: identifier] `File`
[ 991: 992:  separator] `{`
[ 994: 997: identifier] `mut`
[ 998: 999: identifier] `f`
[ 999:1000:   operator] `:`
[1001:1002:   operator] `^`
[1002:1005: identifier] `mut`
[1006:1010: identifier] `File`
[1011:1012:   operator] `=`
[1013:1016: identifier] `mem`
[1016:1018:   operator] `::`
[1018:1023: identifier] `alloc`
[1023:1024:   operator] `<`
[1024:1028: identifier] `File`
[1028:1029:   operator] `>`
[1029:1030:  separator] `(`
[1030:1031:  separator] `)`
[1031:1032:  separator] `;`
[1034:1035: identifier] `f`
[1035:1036:  separator] `.`
[1036:1040: identifier] `path`
[1041:1042:   operator] `=`
[1043:1047: identifier] `path`
[1047:1048:  separator] `;`
[1050:1056: identifier] `return`
[1057:1058: identifier] `f`
[1058:1059:  separator] `;`
[1060:1061:  separator] `}`
[1063:1066: identifier] `pub`
[1067:1071: identifier] `func`
[1072:1073:  separator] `(`
[1073:1074: identifier] `f`
[1074:1075:   operator] `:`
[1076:1077:   operator] `^`
[1077:1080: identifier] `mut`
[1081:1085: identifier] `File`
[1085:1086:  separator] `)`
[1087:1099: identifier] `readToString`
[1099:1100:  separator] `(`
[1100:1101:  separator] `)`
[1102:1104:   operator] `->`
[1105:1111: identifier] `string`
[1112:1113:  separator] `{`
[1115:1121: identifier] `return`
[1122:1123: identifier] `f`
[1123:1124:  separator] `.`
[1124:1128: identifier] `name`
[1128:1129:  separator] `;`
[1130:1131:  separator] `}`
[1133:1136: identifier] `pub`
[1137:1141: identifier] `func`
[1142:1143:  separator] `(`
[1143:1144: identifier] `f`
[1144:1145:   operator] `:`
[1146:1147:   operator] `^`
[1147:1150: identifier] `mut`
[1151:1155: identifier] `File`
[1155:1156:  separator] `)`
[1157:1162: identifier] `close`
[1162:1163:  separator] `(`
[1163:1164:  separator] `)`
[1165:1166:  separator] `{`
[1192:1193:  separator] `}`
 [32mEnded lexing[00m file (3.48ms)
 [32mStarted parsing[00m file
 [32mEnded parsing[00m file (1.22ms)
 [32mStarted lexing[00m println
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  17: identifier] `unicode`
[  17:  19:   operator] `::`
[  19:  23: identifier] `utf8`
[  24:  25:   operator] `#`
[  25:  28: identifier] `use`
[  29:  32: identifier] `std`
[  32:  34:   operator] `::`
[  34:  40: identifier] `string`
[  41:  42:   operator] `#`
[  42:  45: identifier] `use`
[  46:  49: identifier] `std`
[  49:  51:   operator] `::`
[  51:  54: identifier] `mem`
[  56:  57:  separator] `[`
[  57:  58: identifier] `c`
[  58:  59:  separator] `]`
[  60:  64: identifier] `func`
[  65:  71: identifier] `printf`
[  71:  72:  separator] `(`
[  72:  75: identifier] `fmt`
[  75:  76:   operator] `:`
[  77:  78:   operator] `^`
[  78:  80: identifier] `u8`
[  80:  81:  separator] `,`
[  82:  83:  separator] `.`
[  83:  84:  separator] `.`
[  84:  85:  separator] `.`
[  85:  86:  separator] `)`
[  87:  89:   operator] `->`
[  90:  93: identifier] `int`
[  93:  94:  separator] `;`
[ 142: 145: identifier] `pub`
[ 146: 150: identifier] `func`
[ 151: 158: identifier] `println`
[ 158: 159:  separator] `(`
[ 159: 166: identifier] `message`
[ 166: 167:   operator] `:`
[ 168: 174: identifier] `string`
[ 174: 175:  separator] `)`
[ 176: 178:   operator] `->`
[ 179: 182: identifier] `int`
[ 183: 184:  separator] `{`
[ 186: 188: identifier] `if`
[ 189: 192: identifier] `len`
[ 192: 193:  separator] `(`
[ 193: 200: identifier] `message`
[ 200: 201:  separator] `)`
[ 202: 204:   operator] `==`
[ 205: 206:     number] `0`
[ 207: 208:  separator] `{`
[ 211: 217: identifier] `return`
[ 218: 219: identifier] `C`
[ 219: 221:   operator] `::`
[ 221: 227: identifier] `printf`
[ 227: 228:  separator] `(`
[ 228: 229: identifier] `c`
[ 230: 232:     string] `\n`
[ 233: 234:  separator] `)`
[ 234: 235:  separator] `;`
[ 237: 238:  separator] `}`
[ 240: 246: identifier] `return`
[ 247: 248: identifier] `C`
[ 248: 250:   operator] `::`
[ 250: 256: identifier] `printf`
[ 256: 257:  separator] `(`
[ 257: 258: identifier] `c`
[ 259: 265:     string] `%.*s\n`
[ 266: 267:  separator] `,`
[ 268: 271: identifier] `len`
[ 271: 272:  separator] `(`
[ 272: 279: identifier] `message`
[ 279: 280:  separator] `)`
[ 280: 281:  separator] `,`
[ 282: 283:   operator] `&`
[ 283: 290: identifier] `message`
[ 290: 291:  separator] `[`
[ 291: 292:     number] `0`
[ 292: 293:  separator] `]`
[ 293: 294:  separator] `)`
[ 294: 295:  separator] `;`
[ 296: 297:  separator] `}`
[ 299: 302: identifier] `pub`
[ 303: 307: identifier] `func`
[ 308: 313: identifier] `print`
[ 313: 314:  separator] `(`
[ 314: 321: identifier] `message`
[ 321: 322:   operator] `:`
[ 323: 329: identifier] `string`
[ 329: 330:  separator] `)`
[ 331: 333:   operator] `->`
[ 334: 337: identifier] `int`
[ 338: 339:  separator] `{`
[ 341: 343: identifier] `if`
[ 344: 347: identifier] `len`
[ 347: 348:  separator] `(`
[ 348: 355: identifier] `message`
[ 355: 356:  separator] `)`
[ 357: 359:   operator] `==`
[ 360: 361:     number] `0`
[ 362: 363:  separator] `{`
[ 366: 372: identifier] `return`
[ 373: 374:     number] `0`
[ 374: 375:  separator] `;`
[ 377: 378:  separator] `}`
[ 380: 386: identifier] `return`
[ 387: 388: identifier] `C`
[ 388: 390:   operator] `::`
[ 390: 396: identifier] `printf`
[ 396: 397:  separator] `(`
[ 397: 398: identifier] `c`
[ 399: 403:     string] `%.*s`
[ 404: 405:  separator] `,`
[ 406: 409: identifier] `len`
[ 409: 410:  separator] `(`
[ 410: 417: identifier] `message`
[ 417: 418:  separator] `)`
[ 418: 419:  separator] `,`
[ 420: 421:   operator] `&`
[ 421: 428: identifier] `message`
[ 428: 429:  separator] `[`
[ 429: 430:     number] `0`
[ 430: 431:  separator] `]`
[ 431: 432:  separator] `)`
[ 432: 433:  separator] `;`
[ 434: 435:  separator] `}`
[ 437: 440: identifier] `pub`
[ 441: 445: identifier] `func`
[ 446: 464: identifier] `printDynamicString`
[ 464: 465:  separator] `(`
[ 465: 466: identifier] `s`
[ 466: 467:   operator] `:`
[ 468: 469:   operator] `^`
[ 469: 475: identifier] `string`
[ 475: 477:   operator] `::`
[ 477: 483: identifier] `String`
[ 483: 484:  separator] `)`
[ 485: 487:   operator] `->`
[ 488: 491: identifier] `int`
[ 492: 493:  separator] `{`
[ 495: 498: identifier] `mut`
[ 499: 502: identifier] `idx`
[ 503: 504:   operator] `:`
[ 504: 505:   operator] `=`
[ 506: 510: identifier] `uint`
[ 510: 511:  separator] `(`
[ 511: 512:     number] `0`
[ 512: 513:  separator] `)`
[ 513: 514:  separator] `;`
[ 516: 519: identifier] `for`
[ 520: 523: identifier] `idx`
[ 524: 525:   operator] `<`
[ 526: 527: identifier] `s`
[ 527: 528:  separator] `.`
[ 528: 534: identifier] `length`
[ 534: 535:  separator] `(`
[ 535: 536:  separator] `)`
[ 537: 538:  separator] `{`
[ 541: 550: identifier] `printRune`
[ 550: 551:  separator] `(`
[ 551: 552: identifier] `s`
[ 552: 553:  separator] `.`
[ 553: 555: identifier] `at`
[ 555: 556:  separator] `(`
[ 556: 559: identifier] `idx`
[ 559: 560:  separator] `)`
[ 560: 561:  separator] `)`
[ 561: 562:  separator] `;`
[ 565: 568: identifier] `idx`
[ 569: 570:   operator] `+`
[ 570: 571:   operator] `=`
[ 572: 573:     number] `1`
[ 573: 574:  separator] `;`
[ 576: 577:  separator] `}`
[ 579: 588: identifier] `printRune`
[ 588: 589:  separator] `(`
[ 589: 593:       rune] `'\n'`
[ 593: 594:  separator] `)`
[ 594: 595:  separator] `;`
[ 597: 603: identifier] `return`
[ 604: 607: identifier] `int`
[ 607: 608:  separator] `(`
[ 608: 611: identifier] `idx`
[ 611: 612:  separator] `)`
[ 612: 613:  separator] `;`
[ 614: 615:  separator] `}`
[ 617: 620: identifier] `pub`
[ 621: 625: identifier] `func`
[ 626: 635: identifier] `printRune`
[ 635: 636:  separator] `(`
[ 636: 637: identifier] `r`
[ 637: 638:   operator] `:`
[ 639: 643: identifier] `rune`
[ 643: 644:  separator] `)`
[ 645: 647:   operator] `->`
[ 648: 651: identifier] `int`
[ 652: 653:  separator] `{`
[ 655: 658: identifier] `mut`
[ 659: 663: identifier] `rPtr`
[ 664: 665:   operator] `:`
[ 665: 666:   operator] `=`
[ 667: 668:  separator] `(`
[ 668: 669:   operator] `^`
[ 669: 671: identifier] `u8`
[ 671: 672:  separator] `)`
[ 672: 673:  separator] `(`
[ 673: 680: identifier] `uintptr`
[ 680: 681:  separator] `(`
[ 681: 682:   operator] `&`
[ 682: 683: identifier] `r`
[ 683: 684:  separator] `)`
[ 684: 685:  separator] `)`
[ 685: 686:  separator] `;`
[ 688: 693: identifier] `rCast`
[ 694: 695:   operator] `:`
[ 695: 696:   operator] `=`
[ 697: 698:  separator] `[`
[ 698: 699:  separator] `]`
[ 699: 703: identifier] `rune`
[ 703: 704:  separator] `{`
[ 704: 705: identifier] `r`
[ 705: 706:  separator] `}`
[ 706: 707:  separator] `;`
[ 709: 717: identifier] `numBytes`
[ 718: 719:   operator] `:`
[ 719: 720:   operator] `=`
[ 721: 725: identifier] `utf8`
[ 725: 727:   operator] `::`
[ 727: 735: identifier] `numBytes`
[ 735: 736:  separator] `(`
[ 736: 741: identifier] `rCast`
[ 741: 742:  separator] `)`
[ 742: 743:  separator] `;`
[ 748: 749: identifier] `C`
[ 749: 751:   operator] `::`
[ 751: 757: identifier] `printf`
[ 757: 758:  separator] `(`
[ 758: 759: identifier] `c`
[ 760: 764:     string] `%.*s`
[ 765: 766:  separator] `,`
[ 767: 775: identifier] `numBytes`
[ 776: 777:   operator] `+`
[ 778: 779:     number] `1`
[ 779: 780:  separator] `,`
[ 781: 785: identifier] `rPtr`
[ 785: 786:  separator] `)`
[ 786: 787:  separator] `;`
[ 789: 795: identifier] `return`
[ 796: 797:     number] `0`
[ 797: 798:  separator] `;`
[ 799: 800:  separator] `}`
[ 802: 805: identifier] `pub`
[ 806: 810: identifier] `func`
[ 811: 820: identifier] `printByte`
[ 820: 821:  separator] `(`
[ 821: 825: identifier] `byte`
[ 825: 826:   operator] `:`
[ 827: 829: identifier] `u8`
[ 829: 830:  separator] `)`
[ 831: 833:   operator] `->`
[ 834: 837: identifier] `int`
[ 838: 839:  separator] `{`
[ 841: 847: identifier] `return`
[ 848: 849: identifier] `C`
[ 849: 851:   operator] `::`
[ 851: 857: identifier] `printf`
[ 857: 858:  separator] `(`
[ 858: 859: identifier] `c`
[ 860: 862:     string] `%c`
[ 863: 864:  separator] `,`
[ 865: 869: identifier] `byte`
[ 869: 870:  separator] `)`
[ 870: 871:  separator] `;`
[ 872: 873:  separator] `}`
[ 875: 878: identifier] `pub`
[ 879: 883: identifier] `func`
[ 884: 892: identifier] `printInt`
[ 892: 893:  separator] `(`
[ 893: 896: identifier] `num`
[ 896: 897:   operator] `:`
[ 898: 901: identifier] `int`
[ 901: 902:  separator] `)`
[ 903: 905:   operator] `->`
[ 906: 909: identifier] `int`
[ 910: 911:  separator] `{`
[ 950: 956: identifier] `return`
[ 957: 958: identifier] `C`
[ 958: 960:   operator] `::`
[ 960: 966: identifier] `printf`
[ 966: 967:  separator] `(`
[ 967: 968: identifier] `c`
[ 969: 972:     string] `%zd`
[ 973: 974:  separator] `,`
[ 975: 978: identifier] `num`
[ 978: 979:  separator] `)`
[ 979: 980:  separator] `;`
[ 981: 982:  separator] `}`
[ 984: 987: identifier] `pub`
[ 988: 992: identifier] `func`
[ 993:1002: identifier] `printUint`
[1002:1003:  separator] `(`
[1003:1006: identifier] `num`
[1006:1007:   operator] `:`
[1008:1012: identifier] `uint`
[1012:1013:  separator] `)`
[1014:1016:   operator] `->`
[1017:1020: identifier] `int`
[1021:1022:  separator] `{`
[1061:1067: identifier] `return`
[1068:1069: identifier] `C`
[1069:1071:   operator] `::`
[1071:1077: identifier] `printf`
[1077:1078:  separator] `(`
[1078:1079: identifier] `c`
[1080:1083:     string] `%zu`
[1084:1085:  separator] `,`
[1086:1089: identifier] `num`
[1089:1090:  separator] `)`
[1090:1091:  separator] `;`
[1092:1093:  separator] `}`
 [32mEnded lexing[00m println (3.46ms)
 [32mStarted parsing[00m println
 [32mEnded parsing[00m println (1.89ms)
 [32mStarted lexing[00m string
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  13: identifier] `adt`
[  14:  15:   operator] `#`
[  15:  18: identifier] `use`
[  19:  22: identifier] `std`
[  22:  24:   operator] `::`
[  24:  27: identifier] `mem`
[  28:  29:   operator] `#`
[  29:  32: identifier] `use`
[  33:  36: identifier] `std`
[  36:  38:   operator] `::`
[  38:  45: identifier] `unicode`
[  45:  47:   operator] `::`
[  47:  51: identifier] `utf8`
[ 104: 107: identifier] `pub`
[ 108: 112: identifier] `type`
[ 113: 119: identifier] `String`
[ 120: 126: identifier] `struct`
[ 127: 128:  separator] `{`
[ 130: 134: identifier] `data`
[ 134: 135:   operator] `:`
[ 136: 137:   operator] `^`
[ 137: 140: identifier] `mut`
[ 141: 144: identifier] `adt`
[ 144: 146:   operator] `::`
[ 146: 150: identifier] `List`
[ 150: 151:   operator] `<`
[ 151: 155: identifier] `rune`
[ 155: 156:   operator] `>`
[ 156: 157:  separator] `,`
[ 159: 160:  separator] `}`
[ 160: 161:  separator] `;`
[ 222: 225: identifier] `pub`
[ 226: 230: identifier] `func`
[ 231: 232:  separator] `(`
[ 232: 238: identifier] `String`
[ 238: 239:  separator] `)`
[ 240: 244: identifier] `from`
[ 244: 245:  separator] `(`
[ 245: 251: identifier] `source`
[ 251: 252:   operator] `:`
[ 253: 259: identifier] `string`
[ 259: 260:  separator] `)`
[ 261: 263:   operator] `->`
[ 264: 265:   operator] `^`
[ 265: 268: identifier] `mut`
[ 269: 275: identifier] `String`
[ 276: 277:  separator] `{`
[ 279: 282: identifier] `str`
[ 283: 284:   operator] `:`
[ 284: 285:   operator] `=`
[ 286: 292: identifier] `String`
[ 292: 294:   operator] `::`
[ 294: 306: identifier] `withCapacity`
[ 306: 307:  separator] `(`
[ 307: 310: identifier] `len`
[ 310: 311:  separator] `(`
[ 311: 317: identifier] `source`
[ 317: 318:  separator] `)`
[ 318: 319:  separator] `)`
[ 319: 320:  separator] `;`
[ 322: 325: identifier] `mut`
[ 326: 329: identifier] `idx`
[ 330: 331:   operator] `:`
[ 331: 332:   operator] `=`
[ 333: 337: identifier] `uint`
[ 337: 338:  separator] `(`
[ 338: 339:     number] `0`
[ 339: 340:  separator] `)`
[ 340: 341:  separator] `;`
[ 343: 346: identifier] `for`
[ 347: 350: identifier] `idx`
[ 351: 352:   operator] `<`
[ 353: 356: identifier] `len`
[ 356: 357:  separator] `(`
[ 357: 363: identifier] `source`
[ 363: 364:  separator] `)`
[ 365: 366:  separator] `{`
[ 369: 373: identifier] `char`
[ 374: 375:   operator] `:`
[ 375: 376:   operator] `=`
[ 377: 378:  separator] `[`
[ 378: 379:  separator] `]`
[ 379: 381: identifier] `u8`
[ 381: 382:  separator] `{`
[ 382: 388: identifier] `source`
[ 388: 389:  separator] `[`
[ 389: 392: identifier] `idx`
[ 392: 393:  separator] `]`
[ 393: 394:  separator] `}`
[ 394: 395:  separator] `;`
[ 398: 409: identifier] `decodedChar`
[ 410: 411:   operator] `:`
[ 411: 412:   operator] `=`
[ 413: 414:  separator] `[`
[ 414: 415:  separator] `]`
[ 415: 419: identifier] `rune`
[ 419: 420:  separator] `{`
[ 420: 421:     number] `0`
[ 421: 422:  separator] `}`
[ 422: 423:  separator] `;`
[ 426: 436: identifier] `decodeChar`
[ 437: 438:   operator] `:`
[ 438: 439:   operator] `=`
[ 440: 444: identifier] `utf8`
[ 444: 446:   operator] `::`
[ 446: 452: identifier] `decode`
[ 452: 453:  separator] `(`
[ 453: 464: identifier] `decodedChar`
[ 464: 465:  separator] `,`
[ 466: 470: identifier] `char`
[ 470: 471:  separator] `)`
[ 471: 472:  separator] `;`
[ 475: 478: identifier] `str`
[ 478: 479:  separator] `.`
[ 479: 485: identifier] `append`
[ 485: 486:  separator] `(`
[ 486: 497: identifier] `decodedChar`
[ 497: 498:  separator] `[`
[ 498: 499:     number] `0`
[ 499: 500:  separator] `]`
[ 500: 501:  separator] `)`
[ 501: 502:  separator] `;`
[ 505: 508: identifier] `idx`
[ 509: 510:   operator] `+`
[ 510: 511:   operator] `=`
[ 512: 513:     number] `1`
[ 513: 514:  separator] `;`
[ 516: 517:  separator] `}`
[ 519: 525: identifier] `return`
[ 526: 529: identifier] `str`
[ 529: 530:  separator] `;`
[ 531: 532:  separator] `}`
[ 534: 537: identifier] `pub`
[ 538: 542: identifier] `func`
[ 543: 544:  separator] `(`
[ 544: 550: identifier] `String`
[ 550: 551:  separator] `)`
[ 552: 564: identifier] `withCapacity`
[ 564: 565:  separator] `(`
[ 565: 569: identifier] `size`
[ 569: 570:   operator] `:`
[ 571: 575: identifier] `uint`
[ 575: 576:  separator] `)`
[ 577: 579:   operator] `->`
[ 580: 581:   operator] `^`
[ 581: 584: identifier] `mut`
[ 585: 591: identifier] `String`
[ 592: 593:  separator] `{`
[ 595: 598: identifier] `str`
[ 599: 600:   operator] `:`
[ 600: 601:   operator] `=`
[ 602: 605: identifier] `mem`
[ 605: 607:   operator] `::`
[ 607: 612: identifier] `alloc`
[ 612: 613:   operator] `<`
[ 613: 619: identifier] `String`
[ 619: 620:   operator] `>`
[ 620: 621:  separator] `(`
[ 621: 622:  separator] `)`
[ 622: 623:  separator] `;`
[ 625: 626:   operator] `@`
[ 626: 629: identifier] `str`
[ 630: 631:   operator] `=`
[ 632: 638: identifier] `String`
[ 639: 640:  separator] `{`
[ 643: 647: identifier] `data`
[ 647: 648:   operator] `:`
[ 649: 652: identifier] `adt`
[ 652: 654:   operator] `::`
[ 654: 658: identifier] `List`
[ 658: 660:   operator] `::`
[ 660: 675: identifier] `newWithCapacity`
[ 675: 676:   operator] `<`
[ 676: 680: identifier] `rune`
[ 680: 681:   operator] `>`
[ 681: 682:  separator] `(`
[ 682: 686: identifier] `size`
[ 686: 687:  separator] `)`
[ 687: 688:  separator] `,`
[ 690: 691:  separator] `}`
[ 691: 692:  separator] `;`
[ 695: 698: identifier] `mut`
[ 699: 702: identifier] `idx`
[ 703: 704:   operator] `:`
[ 704: 705:   operator] `=`
[ 706: 710: identifier] `uint`
[ 710: 711:  separator] `(`
[ 711: 712:     number] `0`
[ 712: 713:  separator] `)`
[ 713: 714:  separator] `;`
[ 716: 719: identifier] `for`
[ 720: 723: identifier] `idx`
[ 724: 725:   operator] `<`
[ 726: 730: identifier] `size`
[ 731: 732:  separator] `{`
[ 735: 738: identifier] `str`
[ 738: 739:  separator] `.`
[ 739: 745: identifier] `append`
[ 745: 746:  separator] `(`
[ 746: 750:       rune] `'\0'`
[ 750: 751:  separator] `)`
[ 751: 752:  separator] `;`
[ 755: 758: identifier] `idx`
[ 759: 760:   operator] `+`
[ 760: 761:   operator] `=`
[ 762: 763:     number] `1`
[ 763: 764:  separator] `;`
[ 766: 767:  separator] `}`
[ 770: 776: identifier] `return`
[ 777: 780: identifier] `str`
[ 780: 781:  separator] `;`
[ 782: 783:  separator] `}`
[ 785: 812: doccomment] `/// Clear the entire string`
[ 813: 846: doccomment] `/// returning it back to a length`
[ 847: 859: doccomment] `/// of zero.`
[ 860: 863: identifier] `pub`
[ 864: 868: identifier] `func`
[ 869: 870:  separator] `(`
[ 870: 871: identifier] `a`
[ 871: 872:   operator] `:`
[ 873: 874:   operator] `^`
[ 874: 880: identifier] `String`
[ 880: 881:  separator] `)`
[ 882: 887: identifier] `clear`
[ 887: 888:  separator] `(`
[ 888: 889:  separator] `)`
[ 890: 891:  separator] `{`
[ 893: 896: identifier] `mut`
[ 897: 900: identifier] `idx`
[ 901: 902:   operator] `:`
[ 902: 903:   operator] `=`
[ 904: 908: identifier] `uint`
[ 908: 909:  separator] `(`
[ 909: 910:     number] `0`
[ 910: 911:  separator] `)`
[ 911: 912:  separator] `;`
[ 914: 917: identifier] `for`
[ 918: 921: identifier] `idx`
[ 922: 923:   operator] `<`
[ 924: 925: identifier] `a`
[ 925: 926:  separator] `.`
[ 926: 932: identifier] `length`
[ 932: 933:  separator] `(`
[ 933: 934:  separator] `)`
[ 935: 936:  separator] `{`
[ 939: 940: identifier] `a`
[ 940: 941:  separator] `.`
[ 941: 944: identifier] `pop`
[ 944: 945:  separator] `(`
[ 945: 946:  separator] `)`
[ 946: 947:  separator] `;`
[ 950: 953: identifier] `idx`
[ 954: 955:   operator] `+`
[ 955: 956:   operator] `=`
[ 957: 958:     number] `1`
[ 958: 959:  separator] `;`
[ 961: 962:  separator] `}`
[ 963: 964:  separator] `}`
[ 966:1000: doccomment] `/// Pops and returns the last rune`
[1001:1018: doccomment] `/// in the string`
[1019:1022: identifier] `pub`
[1023:1027: identifier] `func`
[1028:1029:  separator] `(`
[1029:1030: identifier] `a`
[1030:1031:   operator] `:`
[1032:1033:   operator] `^`
[1033:1039: identifier] `String`
[1039:1040:  separator] `)`
[1041:1044: identifier] `pop`
[1044:1045:  separator] `(`
[1045:1046:  separator] `)`
[1047:1049:   operator] `->`
[1050:1056: identifier] `Option`
[1056:1057:   operator] `<`
[1057:1061: identifier] `rune`
[1061:1062:   operator] `>`
[1063:1064:  separator] `{`
[1066:1068: identifier] `if`
[1069:1070: identifier] `a`
[1070:1071:  separator] `.`
[1071:1077: identifier] `length`
[1077:1078:  separator] `(`
[1078:1079:  separator] `)`
[1080:1082:   operator] `==`
[1083:1084:     number] `0`
[1085:1086:  separator] `{`
[1089:1095: identifier] `return`
[1096:1102: identifier] `Option`
[1102:1104:   operator] `::`
[1104:1108: identifier] `None`
[1108:1109:  separator] `;`
[1111:1112:  separator] `}`
[1114:1120: identifier] `return`
[1121:1122: identifier] `a`
[1122:1123:  separator] `.`
[1123:1127: identifier] `data`
[1127:1128:  separator] `.`
[1128:1131: identifier] `pop`
[1131:1132:  separator] `(`
[1132:1133:  separator] `)`
[1133:1134:  separator] `;`
[1135:1136:  separator] `}`
[1138:1157: doccomment] `/// Append a string`
[1158:1161: identifier] `pub`
[1162:1166: identifier] `func`
[1167:1168:  separator] `(`
[1168:1169: identifier] `a`
[1169:1170:   operator] `:`
[1171:1172:   operator] `^`
[1172:1178: identifier] `String`
[1178:1179:  separator] `)`
[1180:1186: identifier] `concat`
[1186:1187:  separator] `(`
[1187:1192: identifier] `other`
[1192:1193:   operator] `:`
[1194:1200: identifier] `string`
[1200:1201:  separator] `)`
[1202:1203:  separator] `{`
[1205:1208: identifier] `mut`
[1209:1212: identifier] `idx`
[1213:1214:   operator] `:`
[1214:1215:   operator] `=`
[1216:1220: identifier] `uint`
[1220:1221:  separator] `(`
[1221:1222:     number] `0`
[1222:1223:  separator] `)`
[1223:1224:  separator] `;`
[1226:1229: identifier] `for`
[1230:1233: identifier] `idx`
[1234:1235:   operator] `<`
[1236:1239: identifier] `len`
[1239:1240:  separator] `(`
[1240:1245: identifier] `other`
[1245:1246:  separator] `)`
[1247:1248:  separator] `{`
[1251:1267: identifier] `otherRunePointer`
[1268:1269:   operator] `:`
[1269:1270:   operator] `=`
[1271:1278: identifier] `uintptr`
[1278:1279:  separator] `(`
[1279:1284: identifier] `other`
[1284:1285:  separator] `[`
[1285:1288: identifier] `idx`
[1288:1289:  separator] `]`
[1289:1290:  separator] `)`
[1290:1291:  separator] `;`
[1294:1295: identifier] `a`
[1295:1296:  separator] `.`
[1296:1302: identifier] `append`
[1302:1303:  separator] `(`
[1303:1304:  separator] `(`
[1304:1308: identifier] `rune`
[1308:1309:  separator] `)`
[1309:1310:  separator] `(`
[1310:1326: identifier] `otherRunePointer`
[1326:1327:  separator] `)`
[1327:1328:  separator] `)`
[1328:1329:  separator] `;`
[1332:1335: identifier] `idx`
[1336:1337:   operator] `+`
[1337:1338:   operator] `=`
[1339:1340:     number] `1`
[1340:1341:  separator] `;`
[1343:1344:  separator] `}`
[1345:1346:  separator] `}`
[1348:1372: doccomment] `/// Append a single rune`
[1373:1376: identifier] `pub`
[1377:1381: identifier] `func`
[1382:1383:  separator] `(`
[1383:1384: identifier] `a`
[1384:1385:   operator] `:`
[1386:1387:   operator] `^`
[1387:1393: identifier] `String`
[1393:1394:  separator] `)`
[1395:1401: identifier] `append`
[1401:1402:  separator] `(`
[1402:1406: identifier] `char`
[1406:1407:   operator] `:`
[1408:1412: identifier] `rune`
[1412:1413:  separator] `)`
[1414:1415:  separator] `{`
[1417:1418: identifier] `a`
[1418:1419:  separator] `.`
[1419:1423: identifier] `data`
[1423:1424:  separator] `.`
[1424:1430: identifier] `append`
[1430:1431:  separator] `(`
[1431:1435: identifier] `char`
[1435:1436:  separator] `)`
[1436:1437:  separator] `;`
[1438:1439:  separator] `}`
[1441:1444: identifier] `pub`
[1445:1449: identifier] `func`
[1450:1451:  separator] `(`
[1451:1452: identifier] `a`
[1452:1453:   operator] `:`
[1454:1455:   operator] `^`
[1455:1461: identifier] `String`
[1461:1462:  separator] `)`
[1463:1465: identifier] `at`
[1465:1466:  separator] `(`
[1466:1471: identifier] `index`
[1471:1472:   operator] `:`
[1473:1477: identifier] `uint`
[1477:1478:  separator] `)`
[1479:1481:   operator] `->`
[1482:1486: identifier] `rune`
[1487:1488:  separator] `{`
[1490:1496: identifier] `return`
[1497:1498: identifier] `a`
[1498:1499:  separator] `.`
[1499:1503: identifier] `data`
[1503:1504:  separator] `.`
[1504:1507: identifier] `get`
[1507:1508:  separator] `(`
[1508:1513: identifier] `index`
[1513:1514:  separator] `)`
[1514:1515:  separator] `;`
[1516:1517:  separator] `}`
[1519:1522: identifier] `pub`
[1523:1527: identifier] `func`
[1528:1529:  separator] `(`
[1529:1530: identifier] `a`
[1530:1531:   operator] `:`
[1532:1533:   operator] `^`
[1533:1539: identifier] `String`
[1539:1540:  separator] `)`
[1541:1547: identifier] `length`
[1547:1548:  separator] `(`
[1548:1549:  separator] `)`
[1550:1552:   operator] `->`
[1553:1557: identifier] `uint`
[1558:1559:  separator] `{`
[1561:1567: identifier] `return`
[1568:1569: identifier] `a`
[1569:1570:  separator] `.`
[1570:1574: identifier] `data`
[1574:1575:  separator] `.`
[1575:1584: identifier] `getLength`
[1584:1585:  separator] `(`
[1585:1586:  separator] `)`
[1586:1587:  separator] `;`
[1588:1589:  separator] `}`
[1591:1594: identifier] `pub`
[1595:1599: identifier] `func`
[1600:1601:  separator] `(`
[1601:1602: identifier] `a`
[1602:1603:   operator] `:`
[1604:1605:   operator] `^`
[1605:1611: identifier] `String`
[1611:1612:  separator] `)`
[1613:1620: identifier] `destroy`
[1620:1621:  separator] `(`
[1621:1622:  separator] `)`
[1623:1624:  separator] `{`
[1626:1627: identifier] `a`
[1627:1628:  separator] `.`
[1628:1632: identifier] `data`
[1632:1633:  separator] `.`
[1633:1640: identifier] `destroy`
[1640:1641:  separator] `(`
[1641:1642:  separator] `)`
[1642:1643:  separator] `;`
[1645:1648: identifier] `mem`
[1648:1650:   operator] `::`
[1650:1654: identifier] `free`
[1654:1655:  separator] `(`
[1655:1656: identifier] `a`
[1656:1657:  separator] `)`
[1657:1658:  separator] `;`
[1659:1660:  separator] `}`
 [32mEnded lexing[00m string (3.36ms)
 [32mStarted parsing[00m string
 [32mEnded parsing[00m string (1.32ms)
 [32mStarted lexing[00m util
[   0:   3: identifier] `pub`
[   4:   8: identifier] `func`
[   9:  17: identifier] `contains`
[  17:  18:  separator] `(`
[  18:  26: identifier] `haystack`
[  26:  27:   operator] `:`
[  28:  34: identifier] `string`
[  34:  35:  separator] `,`
[  36:  42: identifier] `needle`
[  42:  43:   operator] `:`
[  44:  50: identifier] `string`
[  50:  51:  separator] `)`
[  52:  54:   operator] `->`
[  55:  59: identifier] `bool`
[  60:  61:  separator] `{`
[  63:  65: identifier] `if`
[  66:  69: identifier] `len`
[  69:  70:  separator] `(`
[  70:  78: identifier] `haystack`
[  78:  79:  separator] `)`
[  80:  81:   operator] `<`
[  82:  85: identifier] `len`
[  85:  86:  separator] `(`
[  86:  92: identifier] `needle`
[  92:  93:  separator] `)`
[  94:  95:  separator] `{`
[  98: 104: identifier] `return`
[ 105: 110: identifier] `false`
[ 110: 111:  separator] `;`
[ 113: 114:  separator] `}`
[ 118: 121: identifier] `mut`
[ 122: 125: identifier] `idx`
[ 126: 127:   operator] `:`
[ 127: 128:   operator] `=`
[ 129: 133: identifier] `uint`
[ 133: 134:  separator] `(`
[ 134: 135:     number] `0`
[ 135: 136:  separator] `)`
[ 136: 137:  separator] `;`
[ 139: 142: identifier] `mut`
[ 143: 148: identifier] `count`
[ 149: 150:   operator] `:`
[ 150: 151:   operator] `=`
[ 152: 156: identifier] `uint`
[ 156: 157:  separator] `(`
[ 157: 158:     number] `0`
[ 158: 159:  separator] `)`
[ 159: 160:  separator] `;`
[ 162: 165: identifier] `for`
[ 166: 169: identifier] `idx`
[ 170: 171:   operator] `<`
[ 172: 175: identifier] `len`
[ 175: 176:  separator] `(`
[ 176: 184: identifier] `haystack`
[ 184: 185:  separator] `)`
[ 186: 187:  separator] `{`
[ 190: 192: identifier] `if`
[ 193: 201: identifier] `haystack`
[ 201: 202:  separator] `[`
[ 202: 205: identifier] `idx`
[ 205: 206:  separator] `]`
[ 207: 209:   operator] `==`
[ 210: 216: identifier] `needle`
[ 216: 217:  separator] `[`
[ 217: 222: identifier] `count`
[ 222: 223:  separator] `]`
[ 224: 225:  separator] `{`
[ 229: 234: identifier] `count`
[ 235: 236:   operator] `+`
[ 236: 237:   operator] `=`
[ 238: 239:     number] `1`
[ 239: 240:  separator] `;`
[ 243: 244:  separator] `}`
[ 245: 249: identifier] `else`
[ 250: 251:  separator] `{`
[ 255: 260: identifier] `count`
[ 261: 262:   operator] `=`
[ 263: 264:     number] `0`
[ 264: 265:  separator] `;`
[ 268: 269:  separator] `}`
[ 273: 275: identifier] `if`
[ 276: 281: identifier] `count`
[ 282: 284:   operator] `==`
[ 285: 288: identifier] `len`
[ 288: 289:  separator] `(`
[ 289: 295: identifier] `needle`
[ 295: 296:  separator] `)`
[ 297: 298:  separator] `{`
[ 302: 308: identifier] `return`
[ 309: 313: identifier] `true`
[ 313: 314:  separator] `;`
[ 317: 318:  separator] `}`
[ 322: 325: identifier] `idx`
[ 326: 327:   operator] `+`
[ 327: 328:   operator] `=`
[ 329: 330:     number] `1`
[ 330: 331:  separator] `;`
[ 333: 334:  separator] `}`
[ 337: 343: identifier] `return`
[ 344: 349: identifier] `false`
[ 349: 350:  separator] `;`
[ 351: 352:  separator] `}`
[ 354: 357: identifier] `pub`
[ 358: 362: identifier] `func`
[ 363: 372: identifier] `hasPrefix`
[ 372: 373:  separator] `(`
[ 373: 379: identifier] `source`
[ 379: 380:   operator] `:`
[ 381: 387: identifier] `string`
[ 387: 388:  separator] `,`
[ 389: 395: identifier] `prefix`
[ 395: 396:   operator] `:`
[ 397: 403: identifier] `string`
[ 403: 404:  separator] `)`
[ 405: 407:   operator] `->`
[ 408: 412: identifier] `bool`
[ 413: 414:  separator] `{`
[ 416: 418: identifier] `if`
[ 419: 422: identifier] `len`
[ 422: 423:  separator] `(`
[ 423: 429: identifier] `prefix`
[ 429: 430:  separator] `)`
[ 431: 432:   operator] `>`
[ 433: 436: identifier] `len`
[ 436: 437:  separator] `(`
[ 437: 443: identifier] `source`
[ 443: 444:  separator] `)`
[ 445: 446:  separator] `{`
[ 449: 455: identifier] `return`
[ 456: 461: identifier] `false`
[ 461: 462:  separator] `;`
[ 464: 465:  separator] `}`
[ 467: 470: identifier] `mut`
[ 471: 474: identifier] `idx`
[ 475: 476:   operator] `:`
[ 476: 477:   operator] `=`
[ 478: 482: identifier] `uint`
[ 482: 483:  separator] `(`
[ 483: 484:     number] `0`
[ 484: 485:  separator] `)`
[ 485: 486:  separator] `;`
[ 488: 491: identifier] `for`
[ 492: 495: identifier] `idx`
[ 496: 497:   operator] `<`
[ 498: 501: identifier] `len`
[ 501: 502:  separator] `(`
[ 502: 508: identifier] `prefix`
[ 508: 509:  separator] `)`
[ 510: 511:  separator] `{`
[ 514: 516: identifier] `if`
[ 517: 523: identifier] `source`
[ 523: 524:  separator] `[`
[ 524: 527: identifier] `idx`
[ 527: 528:  separator] `]`
[ 529: 531:   operator] `!=`
[ 532: 538: identifier] `prefix`
[ 538: 539:  separator] `[`
[ 539: 542: identifier] `idx`
[ 542: 543:  separator] `]`
[ 544: 545:  separator] `{`
[ 549: 555: identifier] `return`
[ 556: 561: identifier] `false`
[ 561: 562:  separator] `;`
[ 565: 566:  separator] `}`
[ 569: 572: identifier] `idx`
[ 573: 574:   operator] `+`
[ 574: 575:   operator] `=`
[ 576: 577:     number] `1`
[ 577: 578:  separator] `;`
[ 580: 581:  separator] `}`
[ 583: 589: identifier] `return`
[ 590: 594: identifier] `true`
[ 594: 595:  separator] `;`
[ 596: 597:  separator] `}`
[ 599: 602: identifier] `pub`
[ 603: 607: identifier] `func`
[ 608: 617: identifier] `hasSuffix`
[ 617: 618:  separator] `(`
[ 618: 624: identifier] `source`
[ 624: 625:   operator] `:`
[ 626: 632: identifier] `string`
[ 632: 633:  separator] `,`
[ 634: 640: identifier] `suffix`
[ 640: 641:   operator] `:`
[ 642: 648: identifier] `string`
[ 648: 649:  separator] `)`
[ 650: 652:   operator] `->`
[ 653: 657: identifier] `bool`
[ 658: 659:  separator] `{`
[ 663: 665: identifier] `if`
[ 666: 669: identifier] `len`
[ 669: 670:  separator] `(`
[ 670: 676: identifier] `suffix`
[ 676: 677:  separator] `)`
[ 678: 679:   operator] `>`
[ 680: 683: identifier] `len`
[ 683: 684:  separator] `(`
[ 684: 690: identifier] `source`
[ 690: 691:  separator] `)`
[ 692: 693:  separator] `{`
[ 696: 702: identifier] `return`
[ 703: 708: identifier] `false`
[ 708: 709:  separator] `;`
[ 711: 712:  separator] `}`
[ 715: 718: identifier] `mut`
[ 719: 722: identifier] `idx`
[ 723: 724:   operator] `:`
[ 724: 725:   operator] `=`
[ 726: 729: identifier] `len`
[ 729: 730:  separator] `(`
[ 730: 736: identifier] `source`
[ 736: 737:  separator] `)`
[ 738: 739:   operator] `-`
[ 740: 743: identifier] `len`
[ 743: 744:  separator] `(`
[ 744: 750: identifier] `suffix`
[ 750: 751:  separator] `)`
[ 751: 752:  separator] `;`
[ 811: 814: identifier] `for`
[ 815: 818: identifier] `idx`
[ 819: 820:   operator] `<`
[ 821: 824: identifier] `len`
[ 824: 825:  separator] `(`
[ 825: 831: identifier] `suffix`
[ 831: 832:  separator] `)`
[ 833: 834:   operator] `-`
[ 835: 838: identifier] `idx`
[ 839: 840:  separator] `{`
[ 843: 845: identifier] `if`
[ 846: 852: identifier] `source`
[ 852: 853:  separator] `[`
[ 853: 856: identifier] `idx`
[ 856: 857:  separator] `]`
[ 858: 860:   operator] `!=`
[ 861: 867: identifier] `suffix`
[ 867: 868:  separator] `[`
[ 868: 871: identifier] `idx`
[ 871: 872:  separator] `]`
[ 873: 874:  separator] `{`
[ 878: 884: identifier] `return`
[ 885: 890: identifier] `false`
[ 890: 891:  separator] `;`
[ 894: 895:  separator] `}`
[ 898: 901: identifier] `idx`
[ 902: 903:   operator] `+`
[ 903: 904:   operator] `=`
[ 905: 906:     number] `1`
[ 906: 907:  separator] `;`
[ 909: 910:  separator] `}`
[ 912: 918: identifier] `return`
[ 919: 923: identifier] `true`
[ 923: 924:  separator] `;`
[ 925: 926:  separator] `}`
[ 928: 931: identifier] `pub`
[ 932: 936: identifier] `func`
[ 937: 944: identifier] `compare`
[ 944: 945:  separator] `(`
[ 945: 946: identifier] `a`
[ 946: 947:   operator] `:`
[ 948: 954: identifier] `string`
[ 954: 955:  separator] `,`
[ 956: 957: identifier] `b`
[ 957: 958:   operator] `:`
[ 959: 965: identifier] `string`
[ 965: 966:  separator] `)`
[ 967: 969:   operator] `->`
[ 970: 974: identifier] `bool`
[ 975: 976:  separator] `{`
[ 978: 980: identifier] `if`
[ 981: 984: identifier] `len`
[ 984: 985:  separator] `(`
[ 985: 986: identifier] `a`
[ 986: 987:  separator] `)`
[ 988: 990:   operator] `!=`
[ 991: 994: identifier] `len`
[ 994: 995:  separator] `(`
[ 995: 996: identifier] `b`
[ 996: 997:  separator] `)`
[ 998: 999:  separator] `{`
[1002:1008: identifier] `return`
[1009:1014: identifier] `false`
[1014:1015:  separator] `;`
[1017:1018:  separator] `}`
[1021:1024: identifier] `mut`
[1025:1026: identifier] `i`
[1027:1028:   operator] `:`
[1028:1029:   operator] `=`
[1030:1034: identifier] `uint`
[1034:1035:  separator] `(`
[1035:1036:     number] `0`
[1036:1037:  separator] `)`
[1037:1038:  separator] `;`
[1040:1043: identifier] `for`
[1044:1045: identifier] `i`
[1046:1047:   operator] `<`
[1048:1051: identifier] `len`
[1051:1052:  separator] `(`
[1052:1053: identifier] `a`
[1053:1054:  separator] `)`
[1055:1056:  separator] `{`
[1059:1061: identifier] `if`
[1062:1063: identifier] `a`
[1063:1064:  separator] `[`
[1064:1065: identifier] `i`
[1065:1066:  separator] `]`
[1067:1069:   operator] `!=`
[1070:1071: identifier] `b`
[1071:1072:  separator] `[`
[1072:1073: identifier] `i`
[1073:1074:  separator] `]`
[1075:1076:  separator] `{`
[1080:1086: identifier] `return`
[1087:1092: identifier] `false`
[1092:1093:  separator] `;`
[1096:1097:  separator] `}`
[1099:1100:  separator] `}`
[1103:1109: identifier] `return`
[1110:1114: identifier] `true`
[1114:1115:  separator] `;`
[1116:1117:  separator] `}`
 [32mEnded lexing[00m util (1.82ms)
 [32mStarted parsing[00m util
 [32mEnded parsing[00m util (1.26ms)
 [32mStarted lexing[00m mem
[  59:  62: identifier] `pub`
[  63:  67: identifier] `func`
[  68:  73: identifier] `alloc`
[  73:  74:   operator] `<`
[  74:  75: identifier] `T`
[  75:  76:   operator] `>`
[  76:  77:  separator] `(`
[  77:  78:  separator] `)`
[  79:  81:   operator] `->`
[  82:  83:   operator] `^`
[  83:  86: identifier] `mut`
[  87:  88: identifier] `T`
[  89:  90:  separator] `{`
[  95: 101: identifier] `return`
[ 102: 103:  separator] `(`
[ 103: 104:   operator] `^`
[ 104: 107: identifier] `mut`
[ 108: 109: identifier] `T`
[ 109: 110:  separator] `)`
[ 110: 111:  separator] `(`
[ 111: 119: identifier] `rawAlloc`
[ 119: 120:  separator] `(`
[ 120: 126: identifier] `sizeof`
[ 126: 127:  separator] `(`
[ 127: 128: identifier] `T`
[ 128: 129:  separator] `)`
[ 129: 130:  separator] `)`
[ 130: 131:  separator] `)`
[ 131: 132:  separator] `;`
[ 133: 134:  separator] `}`
[ 180: 184: identifier] `type`
[ 185: 193: identifier] `RawArray`
[ 194: 200: identifier] `struct`
[ 201: 202:  separator] `{`
[ 207: 211: identifier] `size`
[ 211: 212:   operator] `:`
[ 213: 217: identifier] `uint`
[ 217: 218:  separator] `,`
[ 223: 226: identifier] `ptr`
[ 226: 227:   operator] `:`
[ 228: 229:   operator] `^`
[ 229: 231: identifier] `u8`
[ 231: 232:  separator] `,`
[ 233: 234:  separator] `}`
[ 234: 235:  separator] `;`
[ 237: 240: identifier] `pub`
[ 241: 245: identifier] `func`
[ 246: 256: identifier] `allocArray`
[ 256: 257:   operator] `<`
[ 257: 258: identifier] `T`
[ 258: 259:   operator] `>`
[ 259: 260:  separator] `(`
[ 260: 263: identifier] `num`
[ 263: 264:   operator] `:`
[ 265: 269: identifier] `uint`
[ 269: 270:  separator] `)`
[ 271: 273:   operator] `->`
[ 274: 275:  separator] `[`
[ 275: 276:  separator] `]`
[ 276: 277: identifier] `T`
[ 278: 279:  separator] `{`
[ 284: 290: identifier] `rawPtr`
[ 291: 292:   operator] `:`
[ 292: 293:   operator] `=`
[ 294: 295:  separator] `(`
[ 295: 296:   operator] `^`
[ 296: 298: identifier] `u8`
[ 298: 299:  separator] `)`
[ 299: 300:  separator] `(`
[ 300: 308: identifier] `rawAlloc`
[ 308: 309:  separator] `(`
[ 309: 315: identifier] `sizeof`
[ 315: 316:  separator] `(`
[ 316: 317: identifier] `T`
[ 317: 318:  separator] `)`
[ 319: 320:   operator] `*`
[ 321: 324: identifier] `num`
[ 324: 325:  separator] `)`
[ 325: 326:  separator] `)`
[ 326: 327:  separator] `;`
[ 333: 341: identifier] `rawArray`
[ 342: 343:   operator] `:`
[ 343: 344:   operator] `=`
[ 345: 353: identifier] `RawArray`
[ 353: 354:  separator] `{`
[ 363: 367: identifier] `size`
[ 367: 368:   operator] `:`
[ 369: 372: identifier] `num`
[ 372: 373:  separator] `,`
[ 382: 385: identifier] `ptr`
[ 385: 386:   operator] `:`
[ 387: 393: identifier] `rawPtr`
[ 393: 394:  separator] `,`
[ 399: 400:  separator] `}`
[ 400: 401:  separator] `;`
[ 407: 413: identifier] `arrPtr`
[ 414: 415:   operator] `:`
[ 415: 416:   operator] `=`
[ 417: 418:  separator] `(`
[ 418: 419:   operator] `^`
[ 419: 420:  separator] `[`
[ 420: 421:  separator] `]`
[ 421: 422: identifier] `T`
[ 422: 423:  separator] `)`
[ 423: 424:  separator] `(`
[ 424: 431: identifier] `uintptr`
[ 431: 432:  separator] `(`
[ 432: 433:   operator] `^`
[ 433: 441: identifier] `rawArray`
[ 441: 442:  separator] `)`
[ 442: 443:  separator] `)`
[ 443: 444:  separator] `;`
[ 450: 456: identifier] `return`
[ 457: 458:   operator] `@`
[ 458: 464: identifier] `arrPtr`
[ 464: 465:  separator] `;`
[ 466: 467:  separator] `}`
[ 469: 472: identifier] `pub`
[ 473: 477: identifier] `func`
[ 478: 487: identifier] `copyArray`
[ 487: 488:   operator] `<`
[ 488: 489: identifier] `T`
[ 489: 490:   operator] `>`
[ 490: 491:  separator] `(`
[ 491: 494: identifier] `mut`
[ 495: 499: identifier] `dest`
[ 499: 500:   operator] `:`
[ 501: 502:  separator] `[`
[ 502: 503:  separator] `]`
[ 503: 504: identifier] `T`
[ 504: 505:  separator] `,`
[ 506: 509: identifier] `src`
[ 509: 510:   operator] `:`
[ 511: 512:  separator] `[`
[ 512: 513:  separator] `]`
[ 513: 514: identifier] `T`
[ 514: 515:  separator] `,`
[ 516: 519: identifier] `num`
[ 519: 520:   operator] `:`
[ 521: 525: identifier] `uint`
[ 525: 526:  separator] `)`
[ 527: 528:  separator] `{`
[ 533: 536: identifier] `mut`
[ 537: 540: identifier] `max`
[ 541: 542:   operator] `:`
[ 542: 543:   operator] `=`
[ 544: 547: identifier] `num`
[ 547: 548:  separator] `;`
[ 553: 555: identifier] `if`
[ 556: 559: identifier] `max`
[ 560: 561:   operator] `>`
[ 562: 565: identifier] `len`
[ 565: 566:  separator] `(`
[ 566: 570: identifier] `dest`
[ 570: 571:  separator] `)`
[ 572: 573:  separator] `{`
[ 582: 585: identifier] `max`
[ 586: 587:   operator] `=`
[ 588: 591: identifier] `len`
[ 591: 592:  separator] `(`
[ 592: 596: identifier] `dest`
[ 596: 597:  separator] `)`
[ 597: 598:  separator] `;`
[ 603: 604:  separator] `}`
[ 609: 611: identifier] `if`
[ 612: 615: identifier] `max`
[ 616: 617:   operator] `>`
[ 618: 621: identifier] `len`
[ 621: 622:  separator] `(`
[ 622: 625: identifier] `src`
[ 625: 626:  separator] `)`
[ 627: 628:  separator] `{`
[ 637: 640: identifier] `max`
[ 641: 642:   operator] `=`
[ 643: 646: identifier] `len`
[ 646: 647:  separator] `(`
[ 647: 650: identifier] `src`
[ 650: 651:  separator] `)`
[ 651: 652:  separator] `;`
[ 657: 658:  separator] `}`
[ 664: 667: identifier] `mut`
[ 668: 669: identifier] `i`
[ 669: 670:   operator] `:`
[ 671: 675: identifier] `uint`
[ 676: 677:   operator] `=`
[ 678: 679:     number] `0`
[ 679: 680:  separator] `;`
[ 685: 688: identifier] `for`
[ 689: 690: identifier] `i`
[ 691: 692:   operator] `<`
[ 693: 696: identifier] `max`
[ 697: 698:  separator] `{`
[ 707: 711: identifier] `dest`
[ 711: 712:  separator] `[`
[ 712: 713: identifier] `i`
[ 713: 714:  separator] `]`
[ 715: 716:   operator] `=`
[ 717: 720: identifier] `src`
[ 720: 721:  separator] `[`
[ 721: 722: identifier] `i`
[ 722: 723:  separator] `]`
[ 723: 724:  separator] `;`
[ 733: 734: identifier] `i`
[ 735: 736:   operator] `+`
[ 736: 737:   operator] `=`
[ 738: 739:     number] `1`
[ 739: 740:  separator] `;`
[ 745: 746:  separator] `}`
[ 747: 748:  separator] `}`
[ 750: 753: identifier] `pub`
[ 754: 758: identifier] `func`
[ 759: 763: identifier] `free`
[ 763: 764:   operator] `<`
[ 764: 765: identifier] `T`
[ 765: 766:   operator] `>`
[ 766: 767:  separator] `(`
[ 767: 770: identifier] `ptr`
[ 770: 771:   operator] `:`
[ 772: 773:   operator] `^`
[ 773: 774: identifier] `T`
[ 774: 775:  separator] `)`
[ 776: 777:  separator] `{`
[ 782: 789: identifier] `rawFree`
[ 789: 790:  separator] `(`
[ 790: 797: identifier] `uintptr`
[ 797: 798:  separator] `(`
[ 798: 801: identifier] `ptr`
[ 801: 802:  separator] `)`
[ 802: 803:  separator] `)`
[ 803: 804:  separator] `;`
[ 805: 806:  separator] `}`
[ 808: 811: identifier] `pub`
[ 812: 816: identifier] `func`
[ 817: 826: identifier] `freeArray`
[ 826: 827:   operator] `<`
[ 827: 828: identifier] `T`
[ 828: 829:   operator] `>`
[ 829: 830:  separator] `(`
[ 830: 835: identifier] `array`
[ 835: 836:   operator] `:`
[ 837: 838:  separator] `[`
[ 838: 839:  separator] `]`
[ 839: 840: identifier] `T`
[ 840: 841:  separator] `)`
[ 842: 843:  separator] `{`
[ 848: 851: identifier] `mut`
[ 852: 860: identifier] `rawArray`
[ 861: 862:   operator] `:`
[ 862: 863:   operator] `=`
[ 864: 865:   operator] `@`
[ 865: 866:  separator] `(`
[ 866: 867:  separator] `(`
[ 867: 868:   operator] `^`
[ 868: 876: identifier] `RawArray`
[ 876: 877:  separator] `)`
[ 877: 878:  separator] `(`
[ 878: 885: identifier] `uintptr`
[ 885: 886:  separator] `(`
[ 886: 887:   operator] `&`
[ 887: 892: identifier] `array`
[ 892: 893:  separator] `)`
[ 893: 894:  separator] `)`
[ 894: 895:  separator] `)`
[ 895: 896:  separator] `;`
[ 901: 908: identifier] `rawFree`
[ 908: 909:  separator] `(`
[ 909: 916: identifier] `uintptr`
[ 916: 917:  separator] `(`
[ 917: 925: identifier] `rawArray`
[ 925: 926:  separator] `.`
[ 926: 929: identifier] `ptr`
[ 929: 930:  separator] `)`
[ 930: 931:  separator] `)`
[ 931: 932:  separator] `;`
[ 933: 934:  separator] `}`
 [32mEnded lexing[00m mem (2.16ms)
 [32mStarted parsing[00m mem
 [32mEnded parsing[00m mem (0.89ms)
 [32mStarted lexing[00m raw
[   0:   1:  separator] `[`
[   1:   2: identifier] `c`
[   2:   3:  separator] `]`
[   4:   8: identifier] `func`
[   9:  15: identifier] `malloc`
[  15:  16:  separator] `(`
[  16:  20: identifier] `size`
[  20:  21:   operator] `:`
[  22:  26: identifier] `uint`
[  26:  27:  separator] `)`
[  28:  30:   operator] `->`
[  31:  32:   operator] `^`
[  32:  33: identifier] `C`
[  33:  35:   operator] `::`
[  35:  39: identifier] `void`
[  39:  40:  separator] `;`
[  41:  42:  separator] `[`
[  42:  43: identifier] `c`
[  43:  44:  separator] `]`
[  45:  49: identifier] `func`
[  50:  54: identifier] `free`
[  54:  55:  separator] `(`
[  55:  58: identifier] `ptr`
[  58:  59:   operator] `:`
[  60:  61:   operator] `^`
[  61:  62: identifier] `C`
[  62:  64:   operator] `::`
[  64:  68: identifier] `void`
[  68:  69:  separator] `)`
[  69:  70:  separator] `;`
[  72:  75: identifier] `pub`
[  76:  80: identifier] `func`
[  81:  89: identifier] `rawAlloc`
[  89:  90:  separator] `(`
[  90:  95: identifier] `bytes`
[  95:  96:   operator] `:`
[  97: 101: identifier] `uint`
[ 101: 102:  separator] `)`
[ 103: 105:   operator] `->`
[ 106: 113: identifier] `uintptr`
[ 114: 115:  separator] `{`
[ 120: 126: identifier] `return`
[ 127: 134: identifier] `uintptr`
[ 134: 135:  separator] `(`
[ 135: 136: identifier] `C`
[ 136: 138:   operator] `::`
[ 138: 144: identifier] `malloc`
[ 144: 145:  separator] `(`
[ 145: 150: identifier] `bytes`
[ 150: 151:  separator] `)`
[ 151: 152:  separator] `)`
[ 152: 153:  separator] `;`
[ 154: 155:  separator] `}`
[ 157: 160: identifier] `pub`
[ 161: 165: identifier] `func`
[ 166: 173: identifier] `rawFree`
[ 173: 174:  separator] `(`
[ 174: 177: identifier] `ptr`
[ 177: 178:   operator] `:`
[ 179: 186: identifier] `uintptr`
[ 186: 187:  separator] `)`
[ 188: 189:  separator] `{`
[ 194: 195: identifier] `C`
[ 195: 197:   operator] `::`
[ 197: 201: identifier] `free`
[ 201: 202:  separator] `(`
[ 202: 203:  separator] `(`
[ 203: 204:   operator] `^`
[ 204: 205: identifier] `C`
[ 205: 207:   operator] `::`
[ 207: 211: identifier] `void`
[ 211: 212:  separator] `)`
[ 212: 213:  separator] `(`
[ 213: 216: identifier] `ptr`
[ 216: 217:  separator] `)`
[ 217: 218:  separator] `)`
[ 218: 219:  separator] `;`
[ 220: 221:  separator] `}`
 [32mEnded lexing[00m raw (0.46ms)
 [32mStarted parsing[00m raw
 [32mEnded parsing[00m raw (0.17ms)
 [32mStarted lexing[00m coding
[   0:  14: identifier] `TRAILING_BYTES`
[  15:  16:   operator] `:`
[  16:  17:   operator] `=`
[  18:  19:  separator] `[`
[  19:  20:  separator] `]`
[  20:  22: identifier] `u8`
[  22:  23:  separator] `{`
[  25:  26:     number] `0`
[  26:  27:  separator] `,`
[  27:  28:     number] `0`
[  28:  29:  separator] `,`
[  29:  30:     number] `0`
[  30:  31:  separator] `,`
[  31:  32:     number] `0`
[  32:  33:  separator] `,`
[  33:  34:     number] `0`
[  34:  35:  separator] `,`
[  35:  36:     number] `0`
[  36:  37:  separator] `,`
[  37:  38:     number] `0`
[  38:  39:  separator] `,`
[  39:  40:     number] `0`
[  40:  41:  separator] `,`
[  41:  42:     number] `0`
[  42:  43:  separator] `,`
[  43:  44:     number] `0`
[  44:  45:  separator] `,`
[  45:  46:     number] `0`
[  46:  47:  separator] `,`
[  47:  48:     number] `0`
[  48:  49:  separator] `,`
[  49:  50:     number] `0`
[  50:  51:  separator] `,`
[  51:  52:     number] `0`
[  52:  53:  separator] `,`
[  53:  54:     number] `0`
[  54:  55:  separator] `,`
[  55:  56:     number] `0`
[  56:  57:  separator] `,`
[  58:  59:     number] `0`
[  59:  60:  separator] `,`
[  60:  61:     number] `0`
[  61:  62:  separator] `,`
[  62:  63:     number] `0`
[  63:  64:  separator] `,`
[  64:  65:     number] `0`
[  65:  66:  separator] `,`
[  66:  67:     number] `0`
[  67:  68:  separator] `,`
[  68:  69:     number] `0`
[  69:  70:  separator] `,`
[  70:  71:     number] `0`
[  71:  72:  separator] `,`
[  72:  73:     number] `0`
[  73:  74:  separator] `,`
[  74:  75:     number] `0`
[  75:  76:  separator] `,`
[  76:  77:     number] `0`
[  77:  78:  separator] `,`
[  78:  79:     number] `0`
[  79:  80:  separator] `,`
[  80:  81:     number] `0`
[  81:  82:  separator] `,`
[  82:  83:     number] `0`
[  83:  84:  separator] `,`
[  84:  85:     number] `0`
[  85:  86:  separator] `,`
[  86:  87:     number] `0`
[  87:  88:  separator] `,`
[  88:  89:     number] `0`
[  89:  90:  separator] `,`
[  95:  96:     number] `0`
[  96:  97:  separator] `,`
[  97:  98:     number] `0`
[  98:  99:  separator] `,`
[  99: 100:     number] `0`
[ 100: 101:  separator] `,`
[ 101: 102:     number] `0`
[ 102: 103:  separator] `,`
[ 103: 104:     number] `0`
[ 104: 105:  separator] `,`
[ 105: 106:     number] `0`
[ 106: 107:  separator] `,`
[ 107: 108:     number] `0`
[ 108: 109:  separator] `,`
[ 109: 110:     number] `0`
[ 110: 111:  separator] `,`
[ 111: 112:     number] `0`
[ 112: 113:  separator] `,`
[ 113: 114:     number] `0`
[ 114: 115:  separator] `,`
[ 115: 116:     number] `0`
[ 116: 117:  separator] `,`
[ 117: 118:     number] `0`
[ 118: 119:  separator] `,`
[ 119: 120:     number] `0`
[ 120: 121:  separator] `,`
[ 121: 122:     number] `0`
[ 122: 123:  separator] `,`
[ 123: 124:     number] `0`
[ 124: 125:  separator] `,`
[ 125: 126:     number] `0`
[ 126: 127:  separator] `,`
[ 128: 129:     number] `0`
[ 129: 130:  separator] `,`
[ 130: 131:     number] `0`
[ 131: 132:  separator] `,`
[ 132: 133:     number] `0`
[ 133: 134:  separator] `,`
[ 134: 135:     number] `0`
[ 135: 136:  separator] `,`
[ 136: 137:     number] `0`
[ 137: 138:  separator] `,`
[ 138: 139:     number] `0`
[ 139: 140:  separator] `,`
[ 140: 141:     number] `0`
[ 141: 142:  separator] `,`
[ 142: 143:     number] `0`
[ 143: 144:  separator] `,`
[ 144: 145:     number] `0`
[ 145: 146:  separator] `,`
[ 146: 147:     number] `0`
[ 147: 148:  separator] `,`
[ 148: 149:     number] `0`
[ 149: 150:  separator] `,`
[ 150: 151:     number] `0`
[ 151: 152:  separator] `,`
[ 152: 153:     number] `0`
[ 153: 154:  separator] `,`
[ 154: 155:     number] `0`
[ 155: 156:  separator] `,`
[ 156: 157:     number] `0`
[ 157: 158:  separator] `,`
[ 158: 159:     number] `0`
[ 159: 160:  separator] `,`
[ 165: 166:     number] `0`
[ 166: 167:  separator] `,`
[ 167: 168:     number] `0`
[ 168: 169:  separator] `,`
[ 169: 170:     number] `0`
[ 170: 171:  separator] `,`
[ 171: 172:     number] `0`
[ 172: 173:  separator] `,`
[ 173: 174:     number] `0`
[ 174: 175:  separator] `,`
[ 175: 176:     number] `0`
[ 176: 177:  separator] `,`
[ 177: 178:     number] `0`
[ 178: 179:  separator] `,`
[ 179: 180:     number] `0`
[ 180: 181:  separator] `,`
[ 181: 182:     number] `0`
[ 182: 183:  separator] `,`
[ 183: 184:     number] `0`
[ 184: 185:  separator] `,`
[ 185: 186:     number] `0`
[ 186: 187:  separator] `,`
[ 187: 188:     number] `0`
[ 188: 189:  separator] `,`
[ 189: 190:     number] `0`
[ 190: 191:  separator] `,`
[ 191: 192:     number] `0`
[ 192: 193:  separator] `,`
[ 193: 194:     number] `0`
[ 194: 195:  separator] `,`
[ 195: 196:     number] `0`
[ 196: 197:  separator] `,`
[ 198: 199:     number] `0`
[ 199: 200:  separator] `,`
[ 200: 201:     number] `0`
[ 201: 202:  separator] `,`
[ 202: 203:     number] `0`
[ 203: 204:  separator] `,`
[ 204: 205:     number] `0`
[ 205: 206:  separator] `,`
[ 206: 207:     number] `0`
[ 207: 208:  separator] `,`
[ 208: 209:     number] `0`
[ 209: 210:  separator] `,`
[ 210: 211:     number] `0`
[ 211: 212:  separator] `,`
[ 212: 213:     number] `0`
[ 213: 214:  separator] `,`
[ 214: 215:     number] `0`
[ 215: 216:  separator] `,`
[ 216: 217:     number] `0`
[ 217: 218:  separator] `,`
[ 218: 219:     number] `0`
[ 219: 220:  separator] `,`
[ 220: 221:     number] `0`
[ 221: 222:  separator] `,`
[ 222: 223:     number] `0`
[ 223: 224:  separator] `,`
[ 224: 225:     number] `0`
[ 225: 226:  separator] `,`
[ 226: 227:     number] `0`
[ 227: 228:  separator] `,`
[ 228: 229:     number] `0`
[ 229: 230:  separator] `,`
[ 235: 236:     number] `0`
[ 236: 237:  separator] `,`
[ 237: 238:     number] `0`
[ 238: 239:  separator] `,`
[ 239: 240:     number] `0`
[ 240: 241:  separator] `,`
[ 241: 242:     number] `0`
[ 242: 243:  separator] `,`
[ 243: 244:     number] `0`
[ 244: 245:  separator] `,`
[ 245: 246:     number] `0`
[ 246: 247:  separator] `,`
[ 247: 248:     number] `0`
[ 248: 249:  separator] `,`
[ 249: 250:     number] `0`
[ 250: 251:  separator] `,`
[ 251: 252:     number] `0`
[ 252: 253:  separator] `,`
[ 253: 254:     number] `0`
[ 254: 255:  separator] `,`
[ 255: 256:     number] `0`
[ 256: 257:  separator] `,`
[ 257: 258:     number] `0`
[ 258: 259:  separator] `,`
[ 259: 260:     number] `0`
[ 260: 261:  separator] `,`
[ 261: 262:     number] `0`
[ 262: 263:  separator] `,`
[ 263: 264:     number] `0`
[ 264: 265:  separator] `,`
[ 265: 266:     number] `0`
[ 266: 267:  separator] `,`
[ 268: 269:     number] `0`
[ 269: 270:  separator] `,`
[ 270: 271:     number] `0`
[ 271: 272:  separator] `,`
[ 272: 273:     number] `0`
[ 273: 274:  separator] `,`
[ 274: 275:     number] `0`
[ 275: 276:  separator] `,`
[ 276: 277:     number] `0`
[ 277: 278:  separator] `,`
[ 278: 279:     number] `0`
[ 279: 280:  separator] `,`
[ 280: 281:     number] `0`
[ 281: 282:  separator] `,`
[ 282: 283:     number] `0`
[ 283: 284:  separator] `,`
[ 284: 285:     number] `0`
[ 285: 286:  separator] `,`
[ 286: 287:     number] `0`
[ 287: 288:  separator] `,`
[ 288: 289:     number] `0`
[ 289: 290:  separator] `,`
[ 290: 291:     number] `0`
[ 291: 292:  separator] `,`
[ 292: 293:     number] `0`
[ 293: 294:  separator] `,`
[ 294: 295:     number] `0`
[ 295: 296:  separator] `,`
[ 296: 297:     number] `0`
[ 297: 298:  separator] `,`
[ 298: 299:     number] `0`
[ 299: 300:  separator] `,`
[ 305: 306:     number] `0`
[ 306: 307:  separator] `,`
[ 307: 308:     number] `0`
[ 308: 309:  separator] `,`
[ 309: 310:     number] `0`
[ 310: 311:  separator] `,`
[ 311: 312:     number] `0`
[ 312: 313:  separator] `,`
[ 313: 314:     number] `0`
[ 314: 315:  separator] `,`
[ 315: 316:     number] `0`
[ 316: 317:  separator] `,`
[ 317: 318:     number] `0`
[ 318: 319:  separator] `,`
[ 319: 320:     number] `0`
[ 320: 321:  separator] `,`
[ 321: 322:     number] `0`
[ 322: 323:  separator] `,`
[ 323: 324:     number] `0`
[ 324: 325:  separator] `,`
[ 325: 326:     number] `0`
[ 326: 327:  separator] `,`
[ 327: 328:     number] `0`
[ 328: 329:  separator] `,`
[ 329: 330:     number] `0`
[ 330: 331:  separator] `,`
[ 331: 332:     number] `0`
[ 332: 333:  separator] `,`
[ 333: 334:     number] `0`
[ 334: 335:  separator] `,`
[ 335: 336:     number] `0`
[ 336: 337:  separator] `,`
[ 338: 339:     number] `0`
[ 339: 340:  separator] `,`
[ 340: 341:     number] `0`
[ 341: 342:  separator] `,`
[ 342: 343:     number] `0`
[ 343: 344:  separator] `,`
[ 344: 345:     number] `0`
[ 345: 346:  separator] `,`
[ 346: 347:     number] `0`
[ 347: 348:  separator] `,`
[ 348: 349:     number] `0`
[ 349: 350:  separator] `,`
[ 350: 351:     number] `0`
[ 351: 352:  separator] `,`
[ 352: 353:     number] `0`
[ 353: 354:  separator] `,`
[ 354: 355:     number] `0`
[ 355: 356:  separator] `,`
[ 356: 357:     number] `0`
[ 357: 358:  separator] `,`
[ 358: 359:     number] `0`
[ 359: 360:  separator] `,`
[ 360: 361:     number] `0`
[ 361: 362:  separator] `,`
[ 362: 363:     number] `0`
[ 363: 364:  separator] `,`
[ 364: 365:     number] `0`
[ 365: 366:  separator] `,`
[ 366: 367:     number] `0`
[ 367: 368:  separator] `,`
[ 368: 369:     number] `0`
[ 369: 370:  separator] `,`
[ 375: 376:     number] `0`
[ 376: 377:  separator] `,`
[ 377: 378:     number] `0`
[ 378: 379:  separator] `,`
[ 379: 380:     number] `0`
[ 380: 381:  separator] `,`
[ 381: 382:     number] `0`
[ 382: 383:  separator] `,`
[ 383: 384:     number] `0`
[ 384: 385:  separator] `,`
[ 385: 386:     number] `0`
[ 386: 387:  separator] `,`
[ 387: 388:     number] `0`
[ 388: 389:  separator] `,`
[ 389: 390:     number] `0`
[ 390: 391:  separator] `,`
[ 391: 392:     number] `0`
[ 392: 393:  separator] `,`
[ 393: 394:     number] `0`
[ 394: 395:  separator] `,`
[ 395: 396:     number] `0`
[ 396: 397:  separator] `,`
[ 397: 398:     number] `0`
[ 398: 399:  separator] `,`
[ 399: 400:     number] `0`
[ 400: 401:  separator] `,`
[ 401: 402:     number] `0`
[ 402: 403:  separator] `,`
[ 403: 404:     number] `0`
[ 404: 405:  separator] `,`
[ 405: 406:     number] `0`
[ 406: 407:  separator] `,`
[ 408: 409:     number] `0`
[ 409: 410:  separator] `,`
[ 410: 411:     number] `0`
[ 411: 412:  separator] `,`
[ 412: 413:     number] `0`
[ 413: 414:  separator] `,`
[ 414: 415:     number] `0`
[ 415: 416:  separator] `,`
[ 416: 417:     number] `0`
[ 417: 418:  separator] `,`
[ 418: 419:     number] `0`
[ 419: 420:  separator] `,`
[ 420: 421:     number] `0`
[ 421: 422:  separator] `,`
[ 422: 423:     number] `0`
[ 423: 424:  separator] `,`
[ 424: 425:     number] `0`
[ 425: 426:  separator] `,`
[ 426: 427:     number] `0`
[ 427: 428:  separator] `,`
[ 428: 429:     number] `0`
[ 429: 430:  separator] `,`
[ 430: 431:     number] `0`
[ 431: 432:  separator] `,`
[ 432: 433:     number] `0`
[ 433: 434:  separator] `,`
[ 434: 435:     number] `0`
[ 435: 436:  separator] `,`
[ 436: 437:     number] `0`
[ 437: 438:  separator] `,`
[ 438: 439:     number] `0`
[ 439: 440:  separator] `,`
[ 445: 446:     number] `1`
[ 446: 447:  separator] `,`
[ 447: 448:     number] `1`
[ 448: 449:  separator] `,`
[ 449: 450:     number] `1`
[ 450: 451:  separator] `,`
[ 451: 452:     number] `1`
[ 452: 453:  separator] `,`
[ 453: 454:     number] `1`
[ 454: 455:  separator] `,`
[ 455: 456:     number] `1`
[ 456: 457:  separator] `,`
[ 457: 458:     number] `1`
[ 458: 459:  separator] `,`
[ 459: 460:     number] `1`
[ 460: 461:  separator] `,`
[ 461: 462:     number] `1`
[ 462: 463:  separator] `,`
[ 463: 464:     number] `1`
[ 464: 465:  separator] `,`
[ 465: 466:     number] `1`
[ 466: 467:  separator] `,`
[ 467: 468:     number] `1`
[ 468: 469:  separator] `,`
[ 469: 470:     number] `1`
[ 470: 471:  separator] `,`
[ 471: 472:     number] `1`
[ 472: 473:  separator] `,`
[ 473: 474:     number] `1`
[ 474: 475:  separator] `,`
[ 475: 476:     number] `1`
[ 476: 477:  separator] `,`
[ 478: 479:     number] `1`
[ 479: 480:  separator] `,`
[ 480: 481:     number] `1`
[ 481: 482:  separator] `,`
[ 482: 483:     number] `1`
[ 483: 484:  separator] `,`
[ 484: 485:     number] `1`
[ 485: 486:  separator] `,`
[ 486: 487:     number] `1`
[ 487: 488:  separator] `,`
[ 488: 489:     number] `1`
[ 489: 490:  separator] `,`
[ 490: 491:     number] `1`
[ 491: 492:  separator] `,`
[ 492: 493:     number] `1`
[ 493: 494:  separator] `,`
[ 494: 495:     number] `1`
[ 495: 496:  separator] `,`
[ 496: 497:     number] `1`
[ 497: 498:  separator] `,`
[ 498: 499:     number] `1`
[ 499: 500:  separator] `,`
[ 500: 501:     number] `1`
[ 501: 502:  separator] `,`
[ 502: 503:     number] `1`
[ 503: 504:  separator] `,`
[ 504: 505:     number] `1`
[ 505: 506:  separator] `,`
[ 506: 507:     number] `1`
[ 507: 508:  separator] `,`
[ 508: 509:     number] `1`
[ 509: 510:  separator] `,`
[ 515: 516:     number] `2`
[ 516: 517:  separator] `,`
[ 517: 518:     number] `2`
[ 518: 519:  separator] `,`
[ 519: 520:     number] `2`
[ 520: 521:  separator] `,`
[ 521: 522:     number] `2`
[ 522: 523:  separator] `,`
[ 523: 524:     number] `2`
[ 524: 525:  separator] `,`
[ 525: 526:     number] `2`
[ 526: 527:  separator] `,`
[ 527: 528:     number] `2`
[ 528: 529:  separator] `,`
[ 529: 530:     number] `2`
[ 530: 531:  separator] `,`
[ 531: 532:     number] `2`
[ 532: 533:  separator] `,`
[ 533: 534:     number] `2`
[ 534: 535:  separator] `,`
[ 535: 536:     number] `2`
[ 536: 537:  separator] `,`
[ 537: 538:     number] `2`
[ 538: 539:  separator] `,`
[ 539: 540:     number] `2`
[ 540: 541:  separator] `,`
[ 541: 542:     number] `2`
[ 542: 543:  separator] `,`
[ 543: 544:     number] `2`
[ 544: 545:  separator] `,`
[ 545: 546:     number] `2`
[ 546: 547:  separator] `,`
[ 548: 549:     number] `3`
[ 549: 550:  separator] `,`
[ 550: 551:     number] `3`
[ 551: 552:  separator] `,`
[ 552: 553:     number] `3`
[ 553: 554:  separator] `,`
[ 554: 555:     number] `3`
[ 555: 556:  separator] `,`
[ 556: 557:     number] `3`
[ 557: 558:  separator] `,`
[ 558: 559:     number] `3`
[ 559: 560:  separator] `,`
[ 560: 561:     number] `3`
[ 561: 562:  separator] `,`
[ 562: 563:     number] `3`
[ 563: 564:  separator] `,`
[ 564: 565:     number] `4`
[ 565: 566:  separator] `,`
[ 566: 567:     number] `4`
[ 567: 568:  separator] `,`
[ 568: 569:     number] `4`
[ 569: 570:  separator] `,`
[ 570: 571:     number] `4`
[ 571: 572:  separator] `,`
[ 572: 573:     number] `5`
[ 573: 574:  separator] `,`
[ 574: 575:     number] `5`
[ 575: 576:  separator] `,`
[ 576: 577:     number] `5`
[ 577: 578:  separator] `,`
[ 578: 579:     number] `5`
[ 580: 581:  separator] `}`
[ 581: 582:  separator] `;`
[ 584: 591: identifier] `OFFSETS`
[ 592: 593:   operator] `:`
[ 593: 594:   operator] `=`
[ 595: 596:  separator] `[`
[ 596: 597:  separator] `]`
[ 597: 600: identifier] `u32`
[ 600: 601:  separator] `{`
[ 603: 613:     number] `0x00000000`
[ 613: 614:  separator] `,`
[ 615: 625:     number] `0x00003080`
[ 625: 626:  separator] `,`
[ 627: 637:     number] `0x000E2080`
[ 637: 638:  separator] `,`
[ 643: 653:     number] `0x03C82080`
[ 653: 654:  separator] `,`
[ 655: 665:     number] `0xFA082080`
[ 665: 666:  separator] `,`
[ 667: 677:     number] `0x82082080`
[ 678: 679:  separator] `}`
[ 679: 680:  separator] `;`
[ 682: 685: identifier] `pub`
[ 686: 690: identifier] `func`
[ 691: 699: identifier] `numRunes`
[ 699: 700:  separator] `(`
[ 700: 703: identifier] `src`
[ 703: 704:   operator] `:`
[ 705: 706:  separator] `[`
[ 706: 707:  separator] `]`
[ 707: 709: identifier] `u8`
[ 709: 710:  separator] `)`
[ 711: 713:   operator] `->`
[ 714: 718: identifier] `uint`
[ 719: 720:  separator] `{`
[ 722: 725: identifier] `mut`
[ 726: 727: identifier] `i`
[ 727: 728:   operator] `:`
[ 729: 733: identifier] `uint`
[ 734: 735:   operator] `=`
[ 736: 737:     number] `0`
[ 737: 738:  separator] `;`
[ 740: 743: identifier] `mut`
[ 744: 747: identifier] `num`
[ 747: 748:   operator] `:`
[ 749: 753: identifier] `uint`
[ 754: 755:   operator] `=`
[ 756: 757:     number] `0`
[ 757: 758:  separator] `;`
[ 761: 764: identifier] `for`
[ 765: 766: identifier] `i`
[ 767: 768:   operator] `<`
[ 769: 772: identifier] `len`
[ 772: 773:  separator] `(`
[ 773: 776: identifier] `src`
[ 776: 777:  separator] `)`
[ 778: 779:  separator] `{`
[ 782: 784: identifier] `nb`
[ 785: 786:   operator] `:`
[ 786: 787:   operator] `=`
[ 788: 792: identifier] `uint`
[ 792: 793:  separator] `(`
[ 793: 807: identifier] `TRAILING_BYTES`
[ 807: 808:  separator] `[`
[ 808: 811: identifier] `src`
[ 811: 812:  separator] `[`
[ 812: 813: identifier] `i`
[ 813: 814:  separator] `]`
[ 814: 815:  separator] `]`
[ 815: 816:  separator] `)`
[ 816: 817:  separator] `;`
[ 820: 821: identifier] `i`
[ 822: 823:   operator] `+`
[ 823: 824:   operator] `=`
[ 825: 827: identifier] `nb`
[ 828: 829:   operator] `+`
[ 830: 831:     number] `1`
[ 831: 832:  separator] `;`
[ 835: 838: identifier] `num`
[ 839: 840:   operator] `+`
[ 840: 841:   operator] `=`
[ 842: 843:     number] `1`
[ 843: 844:  separator] `;`
[ 846: 847:  separator] `}`
[ 850: 856: identifier] `return`
[ 857: 860: identifier] `num`
[ 860: 861:  separator] `;`
[ 862: 863:  separator] `}`
[ 865: 868: identifier] `pub`
[ 869: 873: identifier] `func`
[ 874: 882: identifier] `numBytes`
[ 882: 883:  separator] `(`
[ 883: 886: identifier] `src`
[ 886: 887:   operator] `:`
[ 888: 889:  separator] `[`
[ 889: 890:  separator] `]`
[ 890: 894: identifier] `rune`
[ 894: 895:  separator] `)`
[ 896: 898:   operator] `->`
[ 899: 903: identifier] `uint`
[ 904: 905:  separator] `{`
[ 907: 910: identifier] `mut`
[ 911: 912: identifier] `i`
[ 912: 913:   operator] `:`
[ 914: 918: identifier] `uint`
[ 919: 920:   operator] `=`
[ 921: 922:     number] `0`
[ 922: 923:  separator] `;`
[ 925: 928: identifier] `mut`
[ 929: 932: identifier] `num`
[ 932: 933:   operator] `:`
[ 934: 938: identifier] `uint`
[ 939: 940:   operator] `=`
[ 941: 942:     number] `0`
[ 942: 943:  separator] `;`
[ 946: 949: identifier] `for`
[ 950: 951: identifier] `i`
[ 952: 953:   operator] `<`
[ 954: 957: identifier] `len`
[ 957: 958:  separator] `(`
[ 958: 961: identifier] `src`
[ 961: 962:  separator] `)`
[ 963: 964:  separator] `{`
[ 967: 969: identifier] `ch`
[ 970: 971:   operator] `:`
[ 971: 972:   operator] `=`
[ 973: 976: identifier] `src`
[ 976: 977:  separator] `[`
[ 977: 978: identifier] `i`
[ 978: 979:  separator] `]`
[ 979: 980:  separator] `;`
[ 983: 985: identifier] `if`
[ 986: 988: identifier] `ch`
[ 989: 990:   operator] `<`
[ 991: 995:     number] `0x80`
[ 996: 997:  separator] `{`
[1001:1004: identifier] `num`
[1005:1006:   operator] `+`
[1006:1007:   operator] `=`
[1008:1009:     number] `1`
[1009:1010:  separator] `;`
[1013:1014:  separator] `}`
[1015:1019: identifier] `else`
[1020:1022: identifier] `if`
[1023:1025: identifier] `ch`
[1026:1027:   operator] `<`
[1028:1033:     number] `0x800`
[1034:1035:  separator] `{`
[1039:1042: identifier] `num`
[1043:1044:   operator] `+`
[1044:1045:   operator] `=`
[1046:1047:     number] `2`
[1047:1048:  separator] `;`
[1057:1058:  separator] `}`
[1059:1063: identifier] `else`
[1064:1066: identifier] `if`
[1067:1069: identifier] `ch`
[1070:1071:   operator] `<`
[1072:1079:     number] `0x10000`
[1080:1081:  separator] `{`
[1091:1094: identifier] `num`
[1095:1096:   operator] `+`
[1096:1097:   operator] `=`
[1098:1099:     number] `3`
[1099:1100:  separator] `;`
[1109:1110:  separator] `}`
[1111:1115: identifier] `else`
[1116:1118: identifier] `if`
[1119:1121: identifier] `ch`
[1122:1123:   operator] `<`
[1124:1132:     number] `0x110000`
[1133:1134:  separator] `{`
[1144:1147: identifier] `num`
[1148:1149:   operator] `+`
[1149:1150:   operator] `=`
[1151:1152:     number] `4`
[1152:1153:  separator] `;`
[1162:1163:  separator] `}`
[1172:1173: identifier] `i`
[1174:1175:   operator] `+`
[1175:1176:   operator] `=`
[1177:1178:     number] `1`
[1178:1179:  separator] `;`
[1181:1182:  separator] `}`
[1184:1190: identifier] `return`
[1191:1194: identifier] `num`
[1194:1195:  separator] `;`
[1196:1197:  separator] `}`
[1199:1202: identifier] `pub`
[1203:1207: identifier] `func`
[1208:1214: identifier] `decode`
[1214:1215:  separator] `(`
[1215:1218: identifier] `mut`
[1219:1223: identifier] `dest`
[1223:1224:   operator] `:`
[1225:1226:  separator] `[`
[1226:1227:  separator] `]`
[1227:1231: identifier] `rune`
[1231:1232:  separator] `,`
[1233:1236: identifier] `src`
[1236:1237:   operator] `:`
[1238:1239:  separator] `[`
[1239:1240:  separator] `]`
[1240:1242: identifier] `u8`
[1242:1243:  separator] `)`
[1244:1246:   operator] `->`
[1247:1251: identifier] `uint`
[1252:1253:  separator] `{`
[1255:1258: identifier] `mut`
[1259:1267: identifier] `srcIndex`
[1267:1268:   operator] `:`
[1269:1273: identifier] `uint`
[1274:1275:   operator] `=`
[1276:1277:     number] `0`
[1277:1278:  separator] `;`
[1280:1283: identifier] `mut`
[1284:1293: identifier] `destIndex`
[1293:1294:   operator] `:`
[1295:1299: identifier] `uint`
[1300:1301:   operator] `=`
[1302:1303:     number] `0`
[1303:1304:  separator] `;`
[1307:1310: identifier] `for`
[1311:1320: identifier] `destIndex`
[1321:1322:   operator] `<`
[1323:1326: identifier] `len`
[1326:1327:  separator] `(`
[1327:1331: identifier] `dest`
[1331:1332:  separator] `)`
[1333:1334:  separator] `{`
[1337:1339: identifier] `nb`
[1340:1341:   operator] `:`
[1341:1342:   operator] `=`
[1343:1347: identifier] `uint`
[1347:1348:  separator] `(`
[1348:1362: identifier] `TRAILING_BYTES`
[1362:1363:  separator] `[`
[1363:1366: identifier] `src`
[1366:1367:  separator] `[`
[1367:1375: identifier] `srcIndex`
[1375:1376:  separator] `]`
[1376:1377:  separator] `]`
[1377:1378:  separator] `)`
[1378:1379:  separator] `;`
[1382:1384: identifier] `if`
[1385:1393: identifier] `srcIndex`
[1394:1395:   operator] `+`
[1396:1398: identifier] `nb`
[1399:1401:   operator] `>=`
[1402:1405: identifier] `len`
[1405:1406:  separator] `(`
[1406:1409: identifier] `src`
[1409:1410:  separator] `)`
[1411:1412:  separator] `{`
[1458:1464: identifier] `return`
[1465:1474: identifier] `destIndex`
[1474:1475:  separator] `;`
[1478:1479:  separator] `}`
[1483:1486: identifier] `mut`
[1487:1489: identifier] `ch`
[1489:1490:   operator] `:`
[1491:1495: identifier] `rune`
[1496:1497:   operator] `=`
[1498:1499:     number] `0`
[1499:1500:  separator] `;`
[1503:1505: identifier] `if`
[1506:1508: identifier] `nb`
[1509:1511:   operator] `>=`
[1512:1513:     number] `3`
[1514:1515:  separator] `{`
[1519:1521: identifier] `ch`
[1522:1523:   operator] `+`
[1523:1524:   operator] `=`
[1525:1529: identifier] `rune`
[1529:1530:  separator] `(`
[1530:1533: identifier] `src`
[1533:1534:  separator] `[`
[1534:1542: identifier] `srcIndex`
[1542:1543:  separator] `]`
[1543:1544:  separator] `)`
[1544:1545:  separator] `;`
[1546:1548: identifier] `ch`
[1549:1551:   operator] `<<`
[1551:1552:   operator] `=`
[1553:1554:     number] `6`
[1554:1555:  separator] `;`
[1559:1567: identifier] `srcIndex`
[1568:1569:   operator] `+`
[1569:1570:   operator] `=`
[1571:1572:     number] `1`
[1572:1573:  separator] `;`
[1576:1577:  separator] `}`
[1581:1583: identifier] `if`
[1584:1586: identifier] `nb`
[1587:1589:   operator] `>=`
[1590:1591:     number] `2`
[1592:1593:  separator] `{`
[1597:1599: identifier] `ch`
[1600:1601:   operator] `+`
[1601:1602:   operator] `=`
[1603:1607: identifier] `rune`
[1607:1608:  separator] `(`
[1608:1611: identifier] `src`
[1611:1612:  separator] `[`
[1612:1620: identifier] `srcIndex`
[1620:1621:  separator] `]`
[1621:1622:  separator] `)`
[1622:1623:  separator] `;`
[1624:1626: identifier] `ch`
[1627:1629:   operator] `<<`
[1629:1630:   operator] `=`
[1631:1632:     number] `6`
[1632:1633:  separator] `;`
[1637:1645: identifier] `srcIndex`
[1646:1647:   operator] `+`
[1647:1648:   operator] `=`
[1649:1650:     number] `1`
[1650:1651:  separator] `;`
[1654:1655:  separator] `}`
[1659:1661: identifier] `if`
[1662:1664: identifier] `nb`
[1665:1667:   operator] `>=`
[1668:1669:     number] `1`
[1670:1671:  separator] `{`
[1675:1677: identifier] `ch`
[1678:1679:   operator] `+`
[1679:1680:   operator] `=`
[1681:1685: identifier] `rune`
[1685:1686:  separator] `(`
[1686:1689: identifier] `src`
[1689:1690:  separator] `[`
[1690:1698: identifier] `srcIndex`
[1698:1699:  separator] `]`
[1699:1700:  separator] `)`
[1700:1701:  separator] `;`
[1702:1704: identifier] `ch`
[1705:1707:   operator] `<<`
[1707:1708:   operator] `=`
[1709:1710:     number] `6`
[1710:1711:  separator] `;`
[1715:1723: identifier] `srcIndex`
[1724:1725:   operator] `+`
[1725:1726:   operator] `=`
[1727:1728:     number] `1`
[1728:1729:  separator] `;`
[1732:1733:  separator] `}`
[1736:1738: identifier] `ch`
[1739:1740:   operator] `+`
[1740:1741:   operator] `=`
[1742:1746: identifier] `rune`
[1746:1747:  separator] `(`
[1747:1750: identifier] `src`
[1750:1751:  separator] `[`
[1751:1759: identifier] `srcIndex`
[1759:1760:  separator] `]`
[1760:1761:  separator] `)`
[1761:1762:  separator] `;`
[1765:1773: identifier] `srcIndex`
[1774:1775:   operator] `+`
[1775:1776:   operator] `=`
[1777:1778:     number] `1`
[1778:1779:  separator] `;`
[1783:1785: identifier] `ch`
[1786:1787:   operator] `-`
[1787:1788:   operator] `=`
[1789:1793: identifier] `rune`
[1793:1794:  separator] `(`
[1794:1801: identifier] `OFFSETS`
[1801:1802:  separator] `[`
[1802:1804: identifier] `nb`
[1804:1805:  separator] `]`
[1805:1806:  separator] `)`
[1806:1807:  separator] `;`
[1810:1814: identifier] `dest`
[1814:1815:  separator] `[`
[1815:1824: identifier] `destIndex`
[1824:1825:  separator] `]`
[1826:1827:   operator] `=`
[1828:1830: identifier] `ch`
[1830:1831:  separator] `;`
[1834:1843: identifier] `destIndex`
[1844:1845:   operator] `+`
[1845:1846:   operator] `=`
[1847:1848:     number] `1`
[1848:1849:  separator] `;`
[1851:1852:  separator] `}`
[1855:1861: identifier] `return`
[1862:1871: identifier] `destIndex`
[1871:1872:  separator] `;`
[1873:1874:  separator] `}`
[1876:1879: identifier] `pub`
[1880:1884: identifier] `func`
[1885:1891: identifier] `encode`
[1891:1892:  separator] `(`
[1892:1895: identifier] `mut`
[1896:1900: identifier] `dest`
[1900:1901:   operator] `:`
[1902:1903:  separator] `[`
[1903:1904:  separator] `]`
[1904:1906: identifier] `u8`
[1906:1907:  separator] `,`
[1908:1911: identifier] `src`
[1911:1912:   operator] `:`
[1913:1914:  separator] `[`
[1914:1915:  separator] `]`
[1915:1919: identifier] `rune`
[1919:1920:  separator] `)`
[1921:1923:   operator] `->`
[1924:1928: identifier] `uint`
[1929:1930:  separator] `{`
[1932:1935: identifier] `mut`
[1936:1944: identifier] `srcIndex`
[1944:1945:   operator] `:`
[1946:1950: identifier] `uint`
[1951:1952:   operator] `=`
[1953:1954:     number] `0`
[1954:1955:  separator] `;`
[1957:1960: identifier] `mut`
[1961:1970: identifier] `destIndex`
[1970:1971:   operator] `:`
[1972:1976: identifier] `uint`
[1977:1978:   operator] `=`
[1979:1980:     number] `0`
[1980:1981:  separator] `;`
[1983:1986: identifier] `for`
[1987:1995: identifier] `srcIndex`
[1996:1997:   operator] `<`
[1998:2001: identifier] `len`
[2001:2002:  separator] `(`
[2002:2005: identifier] `src`
[2005:2006:  separator] `)`
[2007:2008:  separator] `{`
[2011:2013: identifier] `ch`
[2014:2015:   operator] `:`
[2015:2016:   operator] `=`
[2017:2020: identifier] `src`
[2020:2021:  separator] `[`
[2021:2029: identifier] `srcIndex`
[2029:2030:  separator] `]`
[2030:2031:  separator] `;`
[2034:2036: identifier] `if`
[2037:2039: identifier] `ch`
[2040:2041:   operator] `<`
[2042:2046:     number] `0x80`
[2047:2048:  separator] `{`
[2052:2054: identifier] `if`
[2055:2064: identifier] `destIndex`
[2065:2067:   operator] `>=`
[2068:2071: identifier] `len`
[2071:2072:  separator] `(`
[2072:2076: identifier] `dest`
[2076:2077:  separator] `)`
[2078:2079:  separator] `{`
[2084:2090: identifier] `return`
[2091:2100: identifier] `destIndex`
[2100:2101:  separator] `;`
[2105:2106:  separator] `}`
[2110:2114: identifier] `dest`
[2114:2115:  separator] `[`
[2115:2124: identifier] `destIndex`
[2124:2125:  separator] `]`
[2126:2127:   operator] `=`
[2128:2130: identifier] `u8`
[2130:2131:  separator] `(`
[2131:2133: identifier] `ch`
[2133:2134:  separator] `)`
[2134:2135:  separator] `;`
[2139:2148: identifier] `destIndex`
[2149:2150:   operator] `+`
[2150:2151:   operator] `=`
[2152:2153:     number] `1`
[2153:2154:  separator] `;`
[2157:2158:  separator] `}`
[2161:2165: identifier] `else`
[2166:2168: identifier] `if`
[2169:2171: identifier] `ch`
[2172:2173:   operator] `<`
[2174:2179:     number] `0x800`
[2180:2181:  separator] `{`
[2185:2187: identifier] `if`
[2188:2197: identifier] `destIndex`
[2198:2200:   operator] `>=`
[2201:2204: identifier] `len`
[2204:2205:  separator] `(`
[2205:2209: identifier] `dest`
[2209:2210:  separator] `)`
[2210:2211:   operator] `-`
[2211:2212:     number] `1`
[2213:2214:  separator] `{`
[2219:2225: identifier] `return`
[2226:2235: identifier] `destIndex`
[2235:2236:  separator] `;`
[2240:2241:  separator] `}`
[2245:2249: identifier] `dest`
[2249:2250:  separator] `[`
[2250:2259: identifier] `destIndex`
[2260:2261:   operator] `+`
[2262:2263:     number] `0`
[2263:2264:  separator] `]`
[2265:2266:   operator] `=`
[2267:2269: identifier] `u8`
[2269:2270:  separator] `(`
[2270:2271:  separator] `(`
[2271:2273: identifier] `ch`
[2273:2274:   operator] `>`
[2274:2275:   operator] `>`
[2275:2276:     number] `6`
[2276:2277:  separator] `)`
[2278:2279:   operator] `|`
[2280:2284:     number] `0xC0`
[2284:2285:  separator] `)`
[2285:2286:  separator] `;`
[2299:2303: identifier] `dest`
[2303:2304:  separator] `[`
[2304:2313: identifier] `destIndex`
[2314:2315:   operator] `+`
[2316:2317:     number] `1`
[2317:2318:  separator] `]`
[2319:2320:   operator] `=`
[2321:2323: identifier] `u8`
[2323:2324:  separator] `(`
[2324:2325:  separator] `(`
[2325:2327: identifier] `ch`
[2328:2329:   operator] `&`
[2330:2334:     number] `0x3F`
[2334:2335:  separator] `)`
[2336:2337:   operator] `|`
[2338:2342:     number] `0x80`
[2342:2343:  separator] `)`
[2343:2344:  separator] `;`
[2357:2366: identifier] `destIndex`
[2367:2368:   operator] `+`
[2368:2369:   operator] `=`
[2370:2371:     number] `2`
[2371:2372:  separator] `;`
[2381:2382:  separator] `}`
[2391:2395: identifier] `else`
[2396:2398: identifier] `if`
[2399:2401: identifier] `ch`
[2402:2403:   operator] `<`
[2404:2411:     number] `0x10000`
[2412:2413:  separator] `{`
[2417:2419: identifier] `if`
[2420:2429: identifier] `destIndex`
[2430:2432:   operator] `>=`
[2433:2436: identifier] `len`
[2436:2437:  separator] `(`
[2437:2441: identifier] `dest`
[2441:2442:  separator] `)`
[2442:2443:   operator] `-`
[2443:2444:     number] `2`
[2445:2446:  separator] `{`
[2451:2457: identifier] `return`
[2458:2467: identifier] `destIndex`
[2467:2468:  separator] `;`
[2472:2473:  separator] `}`
[2486:2490: identifier] `dest`
[2490:2491:  separator] `[`
[2491:2500: identifier] `destIndex`
[2501:2502:   operator] `+`
[2503:2504:     number] `0`
[2504:2505:  separator] `]`
[2506:2507:   operator] `=`
[2508:2510: identifier] `u8`
[2510:2511:  separator] `(`
[2511:2512:  separator] `(`
[2512:2514: identifier] `ch`
[2514:2515:   operator] `>`
[2515:2516:   operator] `>`
[2516:2518:     number] `12`
[2518:2519:  separator] `)`
[2520:2521:   operator] `|`
[2522:2526:     number] `0xE0`
[2526:2527:  separator] `)`
[2527:2528:  separator] `;`
[2541:2545: identifier] `dest`
[2545:2546:  separator] `[`
[2546:2555: identifier] `destIndex`
[2556:2557:   operator] `+`
[2558:2559:     number] `1`
[2559:2560:  separator] `]`
[2561:2562:   operator] `=`
[2563:2565: identifier] `u8`
[2565:2566:  separator] `(`
[2566:2567:  separator] `(`
[2567:2568:  separator] `(`
[2568:2570: identifier] `ch`
[2570:2571:   operator] `>`
[2571:2572:   operator] `>`
[2572:2573:     number] `6`
[2573:2574:  separator] `)`
[2575:2576:   operator] `&`
[2577:2581:     number] `0x3F`
[2581:2582:  separator] `)`
[2583:2584:   operator] `|`
[2585:2589:     number] `0x80`
[2589:2590:  separator] `)`
[2590:2591:  separator] `;`
[2604:2608: identifier] `dest`
[2608:2609:  separator] `[`
[2609:2618: identifier] `destIndex`
[2619:2620:   operator] `+`
[2621:2622:     number] `2`
[2622:2623:  separator] `]`
[2624:2625:   operator] `=`
[2626:2628: identifier] `u8`
[2628:2629:  separator] `(`
[2629:2630:  separator] `(`
[2630:2632: identifier] `ch`
[2633:2634:   operator] `&`
[2635:2639:     number] `0x3F`
[2639:2640:  separator] `)`
[2641:2642:   operator] `|`
[2643:2647:     number] `0x80`
[2647:2648:  separator] `)`
[2648:2649:  separator] `;`
[2662:2671: identifier] `destIndex`
[2672:2673:   operator] `+`
[2673:2674:   operator] `=`
[2675:2676:     number] `3`
[2676:2677:  separator] `;`
[2686:2687:  separator] `}`
[2696:2700: identifier] `else`
[2701:2703: identifier] `if`
[2704:2706: identifier] `ch`
[2707:2708:   operator] `<`
[2709:2717:     number] `0x110000`
[2718:2719:  separator] `{`
[2723:2725: identifier] `if`
[2726:2735: identifier] `destIndex`
[2736:2738:   operator] `>=`
[2739:2742: identifier] `len`
[2742:2743:  separator] `(`
[2743:2747: identifier] `dest`
[2747:2748:  separator] `)`
[2748:2749:   operator] `-`
[2749:2750:     number] `3`
[2751:2752:  separator] `{`
[2757:2763: identifier] `return`
[2764:2773: identifier] `destIndex`
[2773:2774:  separator] `;`
[2778:2779:  separator] `}`
[2792:2796: identifier] `dest`
[2796:2797:  separator] `[`
[2797:2806: identifier] `destIndex`
[2807:2808:   operator] `+`
[2809:2810:     number] `0`
[2810:2811:  separator] `]`
[2812:2813:   operator] `=`
[2814:2816: identifier] `u8`
[2816:2817:  separator] `(`
[2817:2818:  separator] `(`
[2818:2820: identifier] `ch`
[2820:2821:   operator] `>`
[2821:2822:   operator] `>`
[2822:2824:     number] `18`
[2824:2825:  separator] `)`
[2826:2827:   operator] `|`
[2828:2832:     number] `0xF0`
[2832:2833:  separator] `)`
[2833:2834:  separator] `;`
[2847:2851: identifier] `dest`
[2851:2852:  separator] `[`
[2852:2861: identifier] `destIndex`
[2862:2863:   operator] `+`
[2864:2865:     number] `1`
[2865:2866:  separator] `]`
[2867:2868:   operator] `=`
[2869:2871: identifier] `u8`
[2871:2872:  separator] `(`
[2872:2873:  separator] `(`
[2873:2874:  separator] `(`
[2874:2876: identifier] `ch`
[2876:2877:   operator] `>`
[2877:2878:   operator] `>`
[2878:2880:     number] `12`
[2880:2881:  separator] `)`
[2882:2883:   operator] `&`
[2884:2888:     number] `0x3F`
[2888:2889:  separator] `)`
[2890:2891:   operator] `|`
[2892:2896:     number] `0x80`
[2896:2897:  separator] `)`
[2897:2898:  separator] `;`
[2911:2915: identifier] `dest`
[2915:2916:  separator] `[`
[2916:2925: identifier] `destIndex`
[2926:2927:   operator] `+`
[2928:2929:     number] `2`
[2929:2930:  separator] `]`
[2931:2932:   operator] `=`
[2933:2935: identifier] `u8`
[2935:2936:  separator] `(`
[2936:2937:  separator] `(`
[2937:2938:  separator] `(`
[2938:2940: identifier] `ch`
[2940:2941:   operator] `>`
[2941:2942:   operator] `>`
[2942:2943:     number] `6`
[2943:2944:  separator] `)`
[2945:2946:   operator] `&`
[2947:2951:     number] `0x3F`
[2951:2952:  separator] `)`
[2953:2954:   operator] `|`
[2955:2959:     number] `0x80`
[2959:2960:  separator] `)`
[2960:2961:  separator] `;`
[2974:2978: identifier] `dest`
[2978:2979:  separator] `[`
[2979:2988: identifier] `destIndex`
[2989:2990:   operator] `+`
[2991:2992:     number] `3`
[2992:2993:  separator] `]`
[2994:2995:   operator] `=`
[2996:2998: identifier] `u8`
[2998:2999:  separator] `(`
[2999:3000:  separator] `(`
[3000:3002: identifier] `ch`
[3003:3004:   operator] `&`
[3005:3009:     number] `0x3F`
[3009:3010:  separator] `)`
[3011:3012:   operator] `|`
[3013:3017:     number] `0x80`
[3017:3018:  separator] `)`
[3018:3019:  separator] `;`
[3032:3041: identifier] `destIndex`
[3042:3043:   operator] `+`
[3043:3044:   operator] `=`
[3045:3046:     number] `4`
[3046:3047:  separator] `;`
[3056:3057:  separator] `}`
[3066:3074: identifier] `srcIndex`
[3075:3076:   operator] `+`
[3076:3077:   operator] `=`
[3078:3079:     number] `1`
[3079:3080:  separator] `;`
[3082:3083:  separator] `}`
[3086:3092: identifier] `return`
[3093:3102: identifier] `destIndex`
[3102:3103:  separator] `;`
[3104:3105:  separator] `}`
 [32mEnded lexing[00m coding (11.79ms)
 [32mStarted parsing[00m coding
 [32mEnded parsing[00m coding (4.93ms)
 [32mStarted lexing[00m list
[   0:   1:   operator] `#`
[   1:   4: identifier] `use`
[   5:   8: identifier] `std`
[   8:  10:   operator] `::`
[  10:  13: identifier] `mem`
[  15:  18: identifier] `pub`
[  19:  23: identifier] `type`
[  24:  28: identifier] `List`
[  29:  35: identifier] `struct`
[  35:  36:   operator] `<`
[  36:  37: identifier] `T`
[  37:  38:   operator] `>`
[  39:  40:  separator] `{`
[  45:  49: identifier] `data`
[  49:  50:   operator] `:`
[  51:  52:   operator] `^`
[  52:  55: identifier] `mut`
[  56:  57: identifier] `T`
[  57:  58:  separator] `,`
[  63:  69: identifier] `length`
[  69:  70:   operator] `:`
[  71:  75: identifier] `uint`
[  75:  76:  separator] `,`
[  81:  89: identifier] `capacity`
[  89:  90:   operator] `:`
[  91:  95: identifier] `uint`
[  95:  96:  separator] `,`
[  97:  98:  separator] `}`
[  98:  99:  separator] `;`
[ 101: 114: identifier] `BASE_CAPACITY`
[ 114: 115:   operator] `:`
[ 116: 120: identifier] `uint`
[ 121: 122:   operator] `=`
[ 123: 124:     number] `4`
[ 124: 125:  separator] `;`
[ 127: 130: identifier] `pub`
[ 131: 135: identifier] `func`
[ 136: 137:  separator] `(`
[ 137: 141: identifier] `List`
[ 141: 142:  separator] `)`
[ 143: 146: identifier] `new`
[ 146: 147:   operator] `<`
[ 147: 148: identifier] `T`
[ 148: 149:   operator] `>`
[ 149: 150:  separator] `(`
[ 150: 151:  separator] `)`
[ 152: 154:   operator] `->`
[ 155: 156:   operator] `^`
[ 156: 159: identifier] `mut`
[ 160: 164: identifier] `List`
[ 164: 165:   operator] `<`
[ 165: 166: identifier] `T`
[ 166: 167:   operator] `>`
[ 168: 169:  separator] `{`
[ 174: 180: identifier] `return`
[ 181: 185: identifier] `List`
[ 185: 187:   operator] `::`
[ 187: 202: identifier] `newWithCapacity`
[ 202: 203:   operator] `<`
[ 203: 204: identifier] `T`
[ 204: 205:   operator] `>`
[ 205: 206:  separator] `(`
[ 206: 207:     number] `0`
[ 207: 208:  separator] `)`
[ 208: 209:  separator] `;`
[ 210: 211:  separator] `}`
[ 213: 216: identifier] `pub`
[ 217: 221: identifier] `func`
[ 222: 223:  separator] `(`
[ 223: 227: identifier] `List`
[ 227: 228:  separator] `)`
[ 229: 244: identifier] `newWithCapacity`
[ 244: 245:   operator] `<`
[ 245: 246: identifier] `T`
[ 246: 247:   operator] `>`
[ 247: 248:  separator] `(`
[ 248: 251: identifier] `mut`
[ 252: 255: identifier] `cap`
[ 255: 256:   operator] `:`
[ 257: 261: identifier] `uint`
[ 261: 262:  separator] `)`
[ 263: 265:   operator] `->`
[ 266: 267:   operator] `^`
[ 267: 270: identifier] `mut`
[ 271: 275: identifier] `List`
[ 275: 276:   operator] `<`
[ 276: 277: identifier] `T`
[ 277: 278:   operator] `>`
[ 279: 280:  separator] `{`
[ 285: 287: identifier] `if`
[ 288: 291: identifier] `cap`
[ 292: 294:   operator] `<=`
[ 295: 296:     number] `0`
[ 297: 298:  separator] `{`
[ 307: 310: identifier] `cap`
[ 311: 312:   operator] `=`
[ 313: 326: identifier] `BASE_CAPACITY`
[ 326: 327:  separator] `;`
[ 332: 333:  separator] `}`
[ 339: 343: identifier] `size`
[ 344: 345:   operator] `:`
[ 345: 346:   operator] `=`
[ 347: 353: identifier] `sizeof`
[ 353: 354:  separator] `(`
[ 354: 355: identifier] `T`
[ 355: 356:  separator] `)`
[ 357: 358:   operator] `*`
[ 359: 362: identifier] `cap`
[ 362: 363:  separator] `;`
[ 369: 372: identifier] `res`
[ 373: 374:   operator] `:`
[ 374: 375:   operator] `=`
[ 376: 379: identifier] `mem`
[ 379: 381:   operator] `::`
[ 381: 386: identifier] `alloc`
[ 386: 387:   operator] `<`
[ 387: 391: identifier] `List`
[ 391: 392:   operator] `<`
[ 392: 393: identifier] `T`
[ 393: 394:   operator] `>`
[ 394: 395:   operator] `>`
[ 395: 396:  separator] `(`
[ 396: 397:  separator] `)`
[ 397: 398:  separator] `;`
[ 403: 404:   operator] `@`
[ 404: 407: identifier] `res`
[ 408: 409:   operator] `=`
[ 410: 414: identifier] `List`
[ 414: 415:   operator] `<`
[ 415: 416: identifier] `T`
[ 416: 417:   operator] `>`
[ 417: 418:  separator] `{`
[ 427: 431: identifier] `data`
[ 431: 432:   operator] `:`
[ 433: 434:  separator] `(`
[ 434: 435:   operator] `^`
[ 435: 438: identifier] `mut`
[ 439: 440: identifier] `T`
[ 440: 441:  separator] `)`
[ 441: 442:  separator] `(`
[ 442: 445: identifier] `mem`
[ 445: 447:   operator] `::`
[ 447: 455: identifier] `rawAlloc`
[ 455: 456:  separator] `(`
[ 456: 460: identifier] `size`
[ 460: 461:  separator] `)`
[ 461: 462:  separator] `)`
[ 462: 463:  separator] `,`
[ 472: 478: identifier] `length`
[ 478: 479:   operator] `:`
[ 480: 481:     number] `0`
[ 481: 482:  separator] `,`
[ 491: 499: identifier] `capacity`
[ 499: 500:   operator] `:`
[ 501: 504: identifier] `cap`
[ 504: 505:  separator] `,`
[ 510: 511:  separator] `}`
[ 511: 512:  separator] `;`
[ 518: 524: identifier] `return`
[ 525: 528: identifier] `res`
[ 528: 529:  separator] `;`
[ 530: 531:  separator] `}`
[ 533: 536: identifier] `pub`
[ 537: 541: identifier] `func`
[ 542: 543:  separator] `(`
[ 543: 545: identifier] `it`
[ 545: 546:   operator] `:`
[ 547: 548:   operator] `^`
[ 548: 552: identifier] `List`
[ 552: 553:   operator] `<`
[ 553: 554: identifier] `T`
[ 554: 555:   operator] `>`
[ 555: 556:  separator] `)`
[ 557: 564: identifier] `destroy`
[ 564: 565:  separator] `(`
[ 565: 566:  separator] `)`
[ 567: 568:  separator] `{`
[ 573: 576: identifier] `mem`
[ 576: 578:   operator] `::`
[ 578: 585: identifier] `rawFree`
[ 585: 586:  separator] `(`
[ 586: 593: identifier] `uintptr`
[ 593: 594:  separator] `(`
[ 594: 596: identifier] `it`
[ 596: 597:  separator] `.`
[ 597: 601: identifier] `data`
[ 601: 602:  separator] `)`
[ 602: 603:  separator] `)`
[ 603: 604:  separator] `;`
[ 609: 612: identifier] `mem`
[ 612: 614:   operator] `::`
[ 614: 618: identifier] `free`
[ 618: 619:  separator] `(`
[ 619: 621: identifier] `it`
[ 621: 622:  separator] `)`
[ 622: 623:  separator] `;`
[ 624: 625:  separator] `}`
[ 627: 630: identifier] `pub`
[ 631: 635: identifier] `func`
[ 636: 637:  separator] `(`
[ 637: 639: identifier] `it`
[ 639: 640:   operator] `:`
[ 641: 642:   operator] `^`
[ 642: 646: identifier] `List`
[ 646: 647:   operator] `<`
[ 647: 648: identifier] `T`
[ 648: 649:   operator] `>`
[ 649: 650:  separator] `)`
[ 651: 663: identifier] `toRawPointer`
[ 663: 664:  separator] `(`
[ 664: 665:  separator] `)`
[ 666: 668:   operator] `->`
[ 669: 670:   operator] `^`
[ 670: 671: identifier] `T`
[ 672: 673:  separator] `{`
[ 678: 684: identifier] `return`
[ 685: 687: identifier] `it`
[ 687: 688:  separator] `.`
[ 688: 692: identifier] `data`
[ 692: 693:  separator] `;`
[ 694: 695:  separator] `}`
[ 697: 700: identifier] `pub`
[ 701: 705: identifier] `func`
[ 706: 707:  separator] `(`
[ 707: 709: identifier] `it`
[ 709: 710:   operator] `:`
[ 711: 715: identifier] `List`
[ 715: 716:   operator] `<`
[ 716: 717: identifier] `T`
[ 717: 718:   operator] `>`
[ 718: 719:  separator] `)`
[ 720: 723: identifier] `get`
[ 723: 724:  separator] `(`
[ 724: 729: identifier] `index`
[ 729: 730:   operator] `:`
[ 731: 735: identifier] `uint`
[ 735: 736:  separator] `)`
[ 737: 739:   operator] `->`
[ 740: 741: identifier] `T`
[ 742: 743:  separator] `{`
[ 748: 750: identifier] `if`
[ 751: 756: identifier] `index`
[ 757: 759:   operator] `>=`
[ 760: 762: identifier] `it`
[ 762: 763:  separator] `.`
[ 763: 769: identifier] `length`
[ 770: 771:  separator] `{`
[ 780: 785: identifier] `panic`
[ 785: 786:  separator] `(`
[ 787: 812:     string] `List.get: index >= length`
[ 813: 814:  separator] `)`
[ 814: 815:  separator] `;`
[ 820: 821:  separator] `}`
[ 827: 833: identifier] `return`
[ 834: 836: identifier] `it`
[ 836: 837:  separator] `.`
[ 837: 841: identifier] `data`
[ 841: 842:  separator] `[`
[ 842: 847: identifier] `index`
[ 847: 848:  separator] `]`
[ 848: 849:  separator] `;`
[ 850: 851:  separator] `}`
[ 853: 856: identifier] `pub`
[ 857: 861: identifier] `func`
[ 862: 863:  separator] `(`
[ 863: 865: identifier] `it`
[ 865: 866:   operator] `:`
[ 867: 871: identifier] `List`
[ 871: 872:   operator] `<`
[ 872: 873: identifier] `T`
[ 873: 874:   operator] `>`
[ 874: 875:  separator] `)`
[ 876: 885: identifier] `getLength`
[ 885: 886:  separator] `(`
[ 886: 887:  separator] `)`
[ 888: 890:   operator] `->`
[ 891: 895: identifier] `uint`
[ 896: 897:  separator] `{`
[ 902: 908: identifier] `return`
[ 909: 911: identifier] `it`
[ 911: 912:  separator] `.`
[ 912: 918: identifier] `length`
[ 918: 919:  separator] `;`
[ 920: 921:  separator] `}`
[ 923: 926: identifier] `pub`
[ 927: 931: identifier] `func`
[ 932: 933:  separator] `(`
[ 933: 935: identifier] `it`
[ 935: 936:   operator] `:`
[ 937: 941: identifier] `List`
[ 941: 942:   operator] `<`
[ 942: 943: identifier] `T`
[ 943: 944:   operator] `>`
[ 944: 945:  separator] `)`
[ 946: 957: identifier] `getCapacity`
[ 957: 958:  separator] `(`
[ 958: 959:  separator] `)`
[ 960: 962:   operator] `->`
[ 963: 967: identifier] `uint`
[ 968: 969:  separator] `{`
[ 974: 980: identifier] `return`
[ 981: 983: identifier] `it`
[ 983: 984:  separator] `.`
[ 984: 992: identifier] `capacity`
[ 992: 993:  separator] `;`
[ 994: 995:  separator] `}`
[ 997:1029: doccomment] `/// This will double the size of`
[1030:1048: doccomment] `/// the lists data`
[1049:1087: doccomment] `/// Note that for now the memcpy seems`
[1088:1129: doccomment] `/// to be having some issues, so I'm just`
[1130:1169: doccomment] `/// manually swapping the data for now.`
[1170:1174: identifier] `func`
[1175:1176:  separator] `(`
[1176:1178: identifier] `it`
[1178:1179:   operator] `:`
[1180:1181:   operator] `^`
[1181:1184: identifier] `mut`
[1185:1189: identifier] `List`
[1189:1190:   operator] `<`
[1190:1191: identifier] `T`
[1191:1192:   operator] `>`
[1192:1193:  separator] `)`
[1194:1198: identifier] `grow`
[1198:1199:  separator] `(`
[1199:1200:  separator] `)`
[1201:1202:  separator] `{`
[1207:1214: identifier] `oldData`
[1215:1216:   operator] `:`
[1216:1217:   operator] `=`
[1218:1220: identifier] `it`
[1220:1221:  separator] `.`
[1221:1225: identifier] `data`
[1225:1226:  separator] `;`
[1231:1233: identifier] `it`
[1233:1234:  separator] `.`
[1234:1242: identifier] `capacity`
[1243:1244:   operator] `*`
[1244:1245:   operator] `=`
[1246:1247:     number] `2`
[1247:1248:  separator] `;`
[1253:1260: identifier] `newData`
[1261:1262:   operator] `:`
[1262:1263:   operator] `=`
[1264:1265:  separator] `(`
[1265:1266:   operator] `^`
[1266:1269: identifier] `mut`
[1270:1271: identifier] `T`
[1271:1272:  separator] `)`
[1272:1273:  separator] `(`
[1273:1276: identifier] `mem`
[1276:1278:   operator] `::`
[1278:1286: identifier] `rawAlloc`
[1286:1287:  separator] `(`
[1287:1293: identifier] `sizeof`
[1293:1294:  separator] `(`
[1294:1295: identifier] `T`
[1295:1296:  separator] `)`
[1297:1298:   operator] `*`
[1299:1301: identifier] `it`
[1301:1302:  separator] `.`
[1302:1310: identifier] `capacity`
[1310:1311:  separator] `)`
[1311:1312:  separator] `)`
[1312:1313:  separator] `;`
[1319:1322: identifier] `mut`
[1323:1324: identifier] `i`
[1325:1326:   operator] `:`
[1326:1327:   operator] `=`
[1328:1332: identifier] `uint`
[1332:1333:  separator] `(`
[1333:1334:     number] `0`
[1334:1335:  separator] `)`
[1335:1336:  separator] `;`
[1341:1344: identifier] `for`
[1345:1346: identifier] `i`
[1347:1348:   operator] `<`
[1349:1351: identifier] `it`
[1351:1352:  separator] `.`
[1352:1358: identifier] `length`
[1359:1360:  separator] `{`
[1369:1376: identifier] `newData`
[1376:1377:  separator] `[`
[1377:1378: identifier] `i`
[1378:1379:  separator] `]`
[1380:1381:   operator] `=`
[1382:1389: identifier] `oldData`
[1389:1390:  separator] `[`
[1390:1391: identifier] `i`
[1391:1392:  separator] `]`
[1392:1393:  separator] `;`
[1402:1403: identifier] `i`
[1404:1405:   operator] `+`
[1405:1406:   operator] `=`
[1407:1408:     number] `1`
[1408:1409:  separator] `;`
[1414:1415:  separator] `}`
[1421:1424: identifier] `mem`
[1424:1426:   operator] `::`
[1426:1433: identifier] `rawFree`
[1433:1434:  separator] `(`
[1434:1441: identifier] `uintptr`
[1441:1442:  separator] `(`
[1442:1449: identifier] `oldData`
[1449:1450:  separator] `)`
[1450:1451:  separator] `)`
[1451:1452:  separator] `;`
[1457:1459: identifier] `it`
[1459:1460:  separator] `.`
[1460:1464: identifier] `data`
[1465:1466:   operator] `=`
[1467:1474: identifier] `newData`
[1474:1475:  separator] `;`
[1476:1477:  separator] `}`
[1479:1520: doccomment] `/// This will peek at the top of the List`
[1521:1566: doccomment] `/// it will _not_ pop the value off the list.`
[1567:1605: doccomment] `/// Returns None if the list is empty.`
[1606:1609: identifier] `pub`
[1610:1614: identifier] `func`
[1615:1616:  separator] `(`
[1616:1618: identifier] `it`
[1618:1619:   operator] `:`
[1620:1621:   operator] `^`
[1621:1624: identifier] `mut`
[1625:1629: identifier] `List`
[1629:1630:   operator] `<`
[1630:1631: identifier] `T`
[1631:1632:   operator] `>`
[1632:1633:  separator] `)`
[1634:1637: identifier] `top`
[1637:1638:  separator] `(`
[1638:1639:  separator] `)`
[1640:1642:   operator] `->`
[1643:1649: identifier] `Option`
[1649:1650:   operator] `<`
[1650:1651: identifier] `T`
[1651:1652:   operator] `>`
[1653:1654:  separator] `{`
[1659:1661: identifier] `if`
[1662:1664: identifier] `it`
[1664:1665:  separator] `.`
[1665:1671: identifier] `length`
[1672:1674:   operator] `==`
[1675:1676:     number] `0`
[1677:1678:  separator] `{`
[1687:1693: identifier] `return`
[1694:1700: identifier] `Option`
[1700:1702:   operator] `::`
[1702:1706: identifier] `None`
[1706:1707:  separator] `;`
[1712:1713:  separator] `}`
[1718:1724: identifier] `return`
[1725:1731: identifier] `Option`
[1731:1733:   operator] `::`
[1733:1737: identifier] `Some`
[1737:1738:  separator] `(`
[1738:1740: identifier] `it`
[1740:1741:  separator] `.`
[1741:1744: identifier] `get`
[1744:1745:  separator] `(`
[1745:1747: identifier] `it`
[1747:1748:  separator] `.`
[1748:1754: identifier] `length`
[1755:1756:   operator] `-`
[1757:1758:     number] `1`
[1758:1759:  separator] `)`
[1759:1760:  separator] `)`
[1760:1761:  separator] `;`
[1762:1763:  separator] `}`
[1765:1814: doccomment] `/// Pop the last value T from the list. Note that`
[1815:1857: doccomment] `/// it does not clear out the popped item.`
[1858:1896: doccomment] `/// Returns None if the list is empty.`
[1897:1900: identifier] `pub`
[1901:1905: identifier] `func`
[1906:1907:  separator] `(`
[1907:1909: identifier] `it`
[1909:1910:   operator] `:`
[1911:1912:   operator] `^`
[1912:1915: identifier] `mut`
[1916:1920: identifier] `List`
[1920:1921:   operator] `<`
[1921:1922: identifier] `T`
[1922:1923:   operator] `>`
[1923:1924:  separator] `)`
[1925:1928: identifier] `pop`
[1928:1929:  separator] `(`
[1929:1930:  separator] `)`
[1931:1933:   operator] `->`
[1934:1940: identifier] `Option`
[1940:1941:   operator] `<`
[1941:1942: identifier] `T`
[1942:1943:   operator] `>`
[1944:1945:  separator] `{`
[1950:1952: identifier] `if`
[1953:1955: identifier] `it`
[1955:1956:  separator] `.`
[1956:1962: identifier] `length`
[1963:1965:   operator] `==`
[1966:1967:     number] `0`
[1968:1969:  separator] `{`
[1978:1984: identifier] `return`
[1985:1991: identifier] `Option`
[1991:1993:   operator] `::`
[1993:1997: identifier] `None`
[1997:1998:  separator] `;`
[2003:2004:  separator] `}`
[2009:2020: identifier] `poppedValue`
[2021:2022:   operator] `:`
[2022:2023:   operator] `=`
[2024:2026: identifier] `it`
[2026:2027:  separator] `.`
[2027:2030: identifier] `top`
[2030:2031:  separator] `(`
[2031:2032:  separator] `)`
[2032:2033:  separator] `;`
[2062:2064: identifier] `it`
[2064:2065:  separator] `.`
[2065:2071: identifier] `length`
[2072:2073:   operator] `-`
[2073:2074:   operator] `=`
[2075:2076:     number] `1`
[2076:2077:  separator] `;`
[2082:2088: identifier] `return`
[2089:2100: identifier] `poppedValue`
[2100:2101:  separator] `;`
[2102:2103:  separator] `}`
[2105:2149: doccomment] `/// Append a value of type T to the List. If`
[2150:2198: doccomment] `/// the length is at its capacity it will double`
[2199:2215: doccomment] `/// in capacity.`
[2216:2219: identifier] `pub`
[2220:2224: identifier] `func`
[2225:2226:  separator] `(`
[2226:2228: identifier] `it`
[2228:2229:   operator] `:`
[2230:2231:   operator] `^`
[2231:2234: identifier] `mut`
[2235:2239: identifier] `List`
[2239:2240:   operator] `<`
[2240:2241: identifier] `T`
[2241:2242:   operator] `>`
[2242:2243:  separator] `)`
[2244:2250: identifier] `append`
[2250:2251:  separator] `(`
[2251:2256: identifier] `value`
[2256:2257:   operator] `:`
[2258:2259: identifier] `T`
[2259:2260:  separator] `)`
[2261:2262:  separator] `{`
[2267:2269: identifier] `if`
[2270:2272: identifier] `it`
[2272:2273:  separator] `.`
[2273:2279: identifier] `length`
[2280:2282:   operator] `==`
[2283:2285: identifier] `it`
[2285:2286:  separator] `.`
[2286:2294: identifier] `capacity`
[2295:2296:  separator] `{`
[2305:2307: identifier] `it`
[2307:2308:  separator] `.`
[2308:2312: identifier] `grow`
[2312:2313:  separator] `(`
[2313:2314:  separator] `)`
[2314:2315:  separator] `;`
[2320:2321:  separator] `}`
[2327:2329: identifier] `it`
[2329:2330:  separator] `.`
[2330:2334: identifier] `data`
[2334:2335:  separator] `[`
[2335:2337: identifier] `it`
[2337:2338:  separator] `.`
[2338:2344: identifier] `length`
[2344:2345:  separator] `]`
[2346:2347:   operator] `=`
[2348:2353: identifier] `value`
[2353:2354:  separator] `;`
[2359:2361: identifier] `it`
[2361:2362:  separator] `.`
[2362:2368: identifier] `length`
[2369:2370:   operator] `+`
[2370:2371:   operator] `=`
[2372:2373:     number] `1`
[2373:2374:  separator] `;`
[2375:2376:  separator] `}`
 [32mEnded lexing[00m list (5.64ms)
 [32mStarted parsing[00m list
 [32mEnded parsing[00m list (1.61ms)
[01m[32mEnded read/lex/parse phase[00m (47.30ms)
[01m[32mStarted cyclic dependency check[00m
[01m[32mEnded cyclic dependency check[00m (0.02ms)
[01m[32mStarted construction phase[00m
 [32mStarted constructing module[00m __main
  [32mStarted constructing submodule[00m test-dynamic-string
  [32mEnded constructing submodule[00m test-dynamic-string (0.09ms)
 [32mEnded constructing module[00m __main (0.12ms)
 [32mStarted constructing module[00m std::io
  [32mStarted constructing submodule[00m file
  [32mEnded constructing submodule[00m file (0.14ms)
  [32mStarted constructing submodule[00m println
  [32mEnded constructing submodule[00m println (0.11ms)
 [32mEnded constructing module[00m std::io (0.30ms)
 [32mStarted constructing module[00m std::string
  [32mStarted constructing submodule[00m string
  [32mEnded constructing submodule[00m string (0.17ms)
  [32mStarted constructing submodule[00m util
  [32mEnded constructing submodule[00m util (0.11ms)
 [32mEnded constructing module[00m std::string (0.33ms)
 [32mStarted constructing module[00m std::mem
  [32mStarted constructing submodule[00m mem
  [32mEnded constructing submodule[00m mem (0.10ms)
  [32mStarted constructing submodule[00m raw
  [32mEnded constructing submodule[00m raw (0.03ms)
 [32mEnded constructing module[00m std::mem (0.18ms)
 [32mStarted constructing module[00m std::unicode::utf8
  [32mStarted constructing submodule[00m coding
  [32mEnded constructing submodule[00m coding (0.33ms)
 [32mEnded constructing module[00m std::unicode::utf8 (0.35ms)
 [32mStarted constructing module[00m std::adt
  [32mStarted constructing submodule[00m list
  [32mEnded constructing submodule[00m list (0.18ms)
 [32mEnded constructing module[00m std::adt (0.22ms)
[01m[32mEnded construction phase[00m (1.66ms)
[01m[32mStarted resolve phase[00m
 [32mStarted resolving module[00m std::mem
 [32mEnded resolving module[00m std::mem (0.25ms)
This scope:
 copyArray (function)
 free (function)
 freeArray (function)
 rawAlloc (function)
 rawFree (function)
 alloc (function)
 RawArray (type)
 allocArray (function)
Parent scope:
  u64 (type)
  f32 (type)
  f64 (type)
  string (type)
  rune (type)
  panic (function)
  s64 (type)
  u8 (type)
  int (type)
  uintptr (type)
  bool (type)
  void (type)
  ype(18) (type)
  Option (type)
  s8 (type)
  s32 (type)
  u32 (type)
  uint (type)
  s128 (type)
  u16 (type)
  f128 (type)
  s16 (type)
  u128 (type)
 [32mStarted resolving module[00m std::unicode::utf8
 [32mEnded resolving module[00m std::unicode::utf8 (0.61ms)
This scope:
 numRunes (function)
 numBytes (function)
 decode (function)
 encode (function)
 TRAILING_BYTES (variable)
 OFFSETS (variable)
Parent scope:
  s16 (type)
  u128 (type)
  f128 (type)
  string (type)
  rune (type)
  panic (function)
  s64 (type)
  u8 (type)
  u64 (type)
  f32 (type)
  f64 (type)
  void (type)
  ype(18) (type)
  Option (type)
  s8 (type)
  s32 (type)
  int (type)
  uintptr (type)
  bool (type)
  s128 (type)
  u16 (type)
  u32 (type)
  uint (type)
 [32mStarted resolving module[00m std::adt
 [32mEnded resolving module[00m std::adt (0.41ms)
This scope:
 List (type)
 BASE_CAPACITY (variable)
Parent scope:
  uint (type)
  s128 (type)
  u16 (type)
  u32 (type)
  s16 (type)
  u128 (type)
  f128 (type)
  f32 (type)
  f64 (type)
  string (type)
  rune (type)
  panic (function)
  s64 (type)
  u8 (type)
  u64 (type)
  uintptr (type)
  bool (type)
  void (type)
  ype(18) (type)
  Option (type)
  s8 (type)
  s32 (type)
  int (type)
 [32mStarted resolving module[00m std::string
 [32mEnded resolving module[00m std::string (0.47ms)
This scope:
 hasSuffix (function)
 compare (function)
 String (type)
 contains (function)
 hasPrefix (function)
Parent scope:
  u32 (type)
  uint (type)
  s128 (type)
  u16 (type)
  f128 (type)
  s16 (type)
  u128 (type)
  u64 (type)
  f32 (type)
  f64 (type)
  string (type)
  rune (type)
  panic (function)
  s64 (type)
  u8 (type)
  int (type)
  uintptr (type)
  bool (type)
  void (type)
  ype(18) (type)
  Option (type)
  s8 (type)
  s32 (type)
 [32mStarted resolving module[00m std::io
 [32mEnded resolving module[00m std::io (0.42ms)
This scope:
 println (function)
 print (function)
 printByte (function)
 printUint (function)
 FILE (type)
 Path (type)
 printDynamicString (function)
 printRune (function)
 printInt (function)
 FileMode (type)
 File (type)
Parent scope:
  ype(18) (type)
  Option (type)
  s8 (type)
  s32 (type)
  int (type)
  uintptr (type)
  bool (type)
  void (type)
  s128 (type)
  u16 (type)
  u32 (type)
  uint (type)
  s16 (type)
  u128 (type)
  f128 (type)
  rune (type)
  panic (function)
  s64 (type)
  u8 (type)
  u64 (type)
  f32 (type)
  f64 (type)
  string (type)
 [32mStarted resolving module[00m __main
 [32mEnded resolving module[00m __main (0.15ms)
This scope:
 main (function)
Parent scope:
  s16 (type)
  u128 (type)
  f128 (type)
  panic (function)
  s64 (type)
  u8 (type)
  u64 (type)
  f32 (type)
  f64 (type)
  string (type)
  rune (type)
  Option (type)
  s8 (type)
  s32 (type)
  int (type)
  uintptr (type)
  bool (type)
  void (type)
  ype(18) (type)
  s128 (type)
  u16 (type)
  u32 (type)
  uint (type)
[01m[32mEnded resolve phase[00m (4.37ms)
[01m[32mStarted inference phase[00m
 [32mStarted inferring submodule[00m mem
 [32mEnded inferring submodule[00m mem (1.03ms)
 [32mStarted inferring submodule[00m raw
 [32mEnded inferring submodule[00m raw (0.19ms)
 [32mStarted inferring submodule[00m file
 [32mEnded inferring submodule[00m file (0.66ms)
 [32mStarted inferring submodule[00m coding
 [32mEnded inferring submodule[00m coding (9.52ms)
 [32mStarted inferring submodule[00m list
 [32mEnded inferring submodule[00m list (5.65ms)
 [32mStarted inferring submodule[00m string
 [32mEnded inferring submodule[00m string (8.38ms)
 [32mStarted inferring submodule[00m util
 [32mEnded inferring submodule[00m util (0.95ms)
 [32mStarted inferring submodule[00m println
 [32mEnded inferring submodule[00m println (1.06ms)
 [32mStarted inferring submodule[00m test-dynamic-string
 [32mEnded inferring submodule[00m test-dynamic-string (1.80ms)
AST of submodule `__main/test-dynamic-string`:
([34mUseDirective[00m: std::io[00m)
([34mUseDirective[00m: std::string[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m main[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: test[00m [34m^mut String[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: from[00m)[00m ([34mStringLiteral[00m:       [33mhello [00m[00m [34mstring[00m)[00m [34m^mut String[00m)[00m)[00m 
	[00m ([34mDeferStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: destroy[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printDynamicString[00m)[00m ([34mVariableAccessExpr[00m: test[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mRuneLiteral[00m:  [33mw[00m[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mRuneLiteral[00m:  [33mo[00m[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: concat[00m)[00m ([34mStringLiteral[00m:    [33mrld[00m[00m [34mstring[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printDynamicString[00m)[00m ([34mVariableAccessExpr[00m: test[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: poppedValue[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: println[00m)[00m ([34mStringLiteral[00m:              [33mjust popped: [00m[00m [34mstring[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m unwrap[00m)[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: println[00m)[00m ([34mStringLiteral[00m: [33m[00m[00m [34mstring[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printDynamicString[00m)[00m ([34mVariableAccessExpr[00m: test[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: length[00m)[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: poppedValue[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m unwrap[00m)[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mRuneLiteral[00m:  [33m京[00m[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: value[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mRuneLiteral[00m:   [33m[00m[36m\n[33m[00m[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m unwrap[00m)[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::io/file`:
([34mUseDirective[00m: std::mem[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: FILE = struct {})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m fopen[00m ([34mVariableDecl[00m: ([34mVariable[00m: loc[00m [34m^u8[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: mode[00m [34m^u8[00m)[00m)[00m :[00m [34m^FILE[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m fseek[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: offset[00m [34muint[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: whence[00m [34muint[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m ftell[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m :[00m [34muint[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m rewind[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m fread[00m ([34mVariableDecl[00m: ([34mVariable[00m: where[00m [34m^u8[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: sz[00m [34muint[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: dunno[00m [34muint[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m fclose[00m ([34mVariableDecl[00m: ([34mVariable[00m: handle[00m [34m^FILE[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m getenv[00m ([34mVariableDecl[00m: ([34mVariable[00m: what[00m [34m^u8[00m)[00m)[00m :[00m [34m^u8[00m nil[00m)[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: FileMode = enum {Read: (), Write: (), Append: ()})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m getLegacyMode[00m :[00m [34mstring[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mVariableAccessExpr[00m: f[00m)[00m ([34mEnumLiteral[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStringLiteral[00m:  [33mr[00m[00m [34mstring[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mVariableAccessExpr[00m: f[00m)[00m ([34mEnumLiteral[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStringLiteral[00m:  [33mw[00m[00m [34mstring[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mVariableAccessExpr[00m: f[00m)[00m ([34mEnumLiteral[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStringLiteral[00m:  [33ma[00m[00m [34mstring[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mStringLiteral[00m:  [33mr[00m[00m [34mstring[00m)[00m)[00m)[00m)[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: Path = struct {location: string})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m new[00m ([34mVariableDecl[00m: ([34mVariable[00m: location[00m [34mstring[00m)[00m)[00m :[00m [34m^mut Path[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m p[00m [34m^mut Path[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<Path>[00m alloc[00m)[00m [34m^mut Path[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: p[00m)[00m)[00m member[00m location[00m)[00m  =[00m ([34mVariableAccessExpr[00m: location[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: p[00m)[00m)[00m)[00m)[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: File = struct {name: string, path: ^mut Path, handle: ^FILE})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m open[00m ([34mVariableDecl[00m: ([34mVariable[00m: path[00m [34m^mut Path[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: mode[00m [34mFileMode[00m)[00m)[00m :[00m [34m^mut File[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m f[00m [34m^mut File[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<File>[00m alloc[00m)[00m [34m^mut File[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: f[00m)[00m)[00m member[00m path[00m)[00m  =[00m ([34mVariableAccessExpr[00m: path[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: f[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m readToString[00m :[00m [34mstring[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: f[00m)[00m)[00m member[00m name[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m close[00m :[00m [34mvoid[00m ([34mBlock[00m)[00m)[00m)

AST of submodule `std::io/println`:
([34mUseDirective[00m: std::unicode::utf8[00m)
([34mUseDirective[00m: std::string[00m)
([34mUseDirective[00m: std::mem[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m printf[00m ([34mVariableDecl[00m: ([34mVariable[00m: fmt[00m [34m^u8[00m)[00m)[00m :[00m [34mint[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m println[00m ([34mVariableDecl[00m: ([34mVariable[00m: message[00m [34mstring[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: message[00m)[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:   [33m[00m[36m\n[33m[00m[00m [34m^u8[00m)[00m [34mint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:       [33m%.*s[00m[36m\n[33m[00m[00m [34m^u8[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: message[00m)[00m)[00m ([34mReferenceToExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: message[00m)[00m index[00m ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m [34m&u8[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m print[00m ([34mVariableDecl[00m: ([34mVariable[00m: message[00m [34mstring[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: message[00m)[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:     [33m%.*s[00m[00m [34m^u8[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: message[00m)[00m)[00m ([34mReferenceToExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: message[00m)[00m index[00m ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m [34m&u8[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printDynamicString[00m ([34mVariableDecl[00m: ([34mVariable[00m: s[00m [34m^String[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: length[00m)[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: at[00m)[00m ([34mVariableAccessExpr[00m: idx[00m)[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printRune[00m)[00m ([34mRuneLiteral[00m:   [33m[00m[36m\n[33m[00m[00m [34mrune[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printRune[00m ([34mVariableDecl[00m: ([34mVariable[00m: r[00m [34mrune[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m rPtr[00m [34m^u8[00m)[00m  =[00m ([34mCastExpr[00m: ([34mCastExpr[00m: ([34mReferenceToExpr[00m: ([34mVariableAccessExpr[00m: r[00m)[00m [34m&rune[00m)[00m [34muintptr[00m)[00m [34m^u8[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: rCast[00m [34m[]rune[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mVariableAccessExpr[00m: r[00m)[00m ,[00m [34m[]rune[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: numBytes[00m [34muint[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: numBytes[00m)[00m ([34mVariableAccessExpr[00m: rCast[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:     [33m%.*s[00m[00m [34m^u8[00m)[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: numBytes[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m ([34mVariableAccessExpr[00m: rPtr[00m)[00m [34mint[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printByte[00m ([34mVariableDecl[00m: ([34mVariable[00m: byte[00m [34mu8[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:   [33m%c[00m[00m [34m^u8[00m)[00m ([34mVariableAccessExpr[00m: byte[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printInt[00m ([34mVariableDecl[00m: ([34mVariable[00m: num[00m [34mint[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:    [33m%zd[00m[00m [34m^u8[00m)[00m ([34mVariableAccessExpr[00m: num[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m printUint[00m ([34mVariableDecl[00m: ([34mVariable[00m: num[00m [34muint[00m)[00m)[00m :[00m [34mint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: printf[00m)[00m ([34mStringLiteral[00m:    [33m%zu[00m[00m [34m^u8[00m)[00m ([34mVariableAccessExpr[00m: num[00m)[00m [34mint[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::string/string`:
([34mUseDirective[00m: std::adt[00m)
([34mUseDirective[00m: std::mem[00m)
([34mUseDirective[00m: std::unicode::utf8[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: String = struct {data: ^mut List<rune>})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m from[00m ([34mVariableDecl[00m: ([34mVariable[00m: source[00m [34mstring[00m)[00m)[00m :[00m [34m^mut String[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: str[00m [34m^mut String[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: withCapacity[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m [34m^mut String[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: char[00m [34m[]u8[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: source[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m ,[00m [34m[]u8[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: decodedChar[00m [34m[]rune[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mrune[00m)[00m ,[00m [34m[]rune[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: decodeChar[00m [34muint[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: decode[00m)[00m ([34mVariableAccessExpr[00m: decodedChar[00m)[00m ([34mVariableAccessExpr[00m: char[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: decodedChar[00m)[00m index[00m ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: str[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m withCapacity[00m ([34mVariableDecl[00m: ([34mVariable[00m: size[00m [34muint[00m)[00m)[00m :[00m [34m^mut String[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: str[00m [34m^mut String[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<String>[00m alloc[00m)[00m [34m^mut String[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: str[00m)[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m data[00m :[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m newWithCapacity[00m)[00m ([34mVariableAccessExpr[00m: size[00m)[00m [34m^mut List<rune>[00m)[00m ,[00m [34mString[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mVariableAccessExpr[00m: size[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mRuneLiteral[00m:   [33m[00m[36m\0[33m[00m[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: str[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m clear[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: length[00m)[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m pop[00m :[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: length[00m)[00m [34muint[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mEnumLiteral[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m pop[00m)[00m [34mOption[00m [34m<[00m [34mrune[00m [34m>[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m concat[00m ([34mVariableDecl[00m: ([34mVariable[00m: other[00m [34mstring[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: other[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: otherRunePointer[00m [34muintptr[00m)[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: other[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m [34muintptr[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: append[00m)[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: otherRunePointer[00m)[00m [34mrune[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m append[00m ([34mVariableDecl[00m: ([34mVariable[00m: char[00m [34mrune[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m append[00m)[00m ([34mVariableAccessExpr[00m: char[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m at[00m ([34mVariableDecl[00m: ([34mVariable[00m: index[00m [34muint[00m)[00m)[00m :[00m [34mrune[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m get[00m)[00m ([34mVariableAccessExpr[00m: index[00m)[00m [34mrune[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m length[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m getLength[00m)[00m [34muint[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m destroy[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<rune>[00m destroy[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<String>[00m free[00m)[00m ([34mVariableAccessExpr[00m: a[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::string/util`:
([34mFunctionDecl[00m: ([34mFunction[00m: [00m contains[00m ([34mVariableDecl[00m: ([34mVariable[00m: haystack[00m [34mstring[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: needle[00m [34mstring[00m)[00m)[00m :[00m [34mbool[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: haystack[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: needle[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m count[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: haystack[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: haystack[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: needle[00m)[00m index[00m ([34mVariableAccessExpr[00m: count[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: count[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mVariableAccessExpr[00m: count[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mVariableAccessExpr[00m: count[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: needle[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mtrue[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m hasPrefix[00m ([34mVariableDecl[00m: ([34mVariable[00m: source[00m [34mstring[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: prefix[00m [34mstring[00m)[00m)[00m :[00m [34mbool[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: prefix[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: prefix[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_NOT_EQ[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: source[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: prefix[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mtrue[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m hasSuffix[00m ([34mVariableDecl[00m: ([34mVariable[00m: source[00m [34mstring[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: suffix[00m [34mstring[00m)[00m)[00m :[00m [34mbool[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: suffix[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m idx[00m [34muint[00m)[00m  =[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: source[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: suffix[00m)[00m)[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: idx[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: suffix[00m)[00m)[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_NOT_EQ[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: source[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: suffix[00m)[00m index[00m ([34mVariableAccessExpr[00m: idx[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: idx[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mtrue[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m compare[00m ([34mVariableDecl[00m: ([34mVariable[00m: a[00m [34mstring[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: b[00m [34mstring[00m)[00m)[00m :[00m [34mbool[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_NOT_EQ[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: a[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: b[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: a[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_NOT_EQ[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: a[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: b[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mfalse[00m)[00m)[00m)[00m nil[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mBoolLiteral[00m: [33mtrue[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::mem/mem`:
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m alloc[00m :[00m [34m^mut T[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawAlloc[00m)[00m ([34mSizeofExpr[00m: [34mT[00m)[00m [34muintptr[00m)[00m [34m^mut T[00m)[00m)[00m)[00m)[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: RawArray = struct {size: uint, ptr: ^u8})[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m allocArray[00m ([34mVariableDecl[00m: ([34mVariable[00m: num[00m [34muint[00m)[00m)[00m :[00m [34m[]T[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: rawPtr[00m [34m^u8[00m)[00m  =[00m ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawAlloc[00m)[00m ([34mBinaryExpr[00m: BINOP_MUL[00m ([34mSizeofExpr[00m: [34mT[00m)[00m ([34mVariableAccessExpr[00m: num[00m)[00m)[00m [34muintptr[00m)[00m [34m^u8[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: rawArray[00m [34mRawArray[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m size[00m :[00m ([34mVariableAccessExpr[00m: num[00m)[00m ,[00m 
	[00m ptr[00m :[00m ([34mVariableAccessExpr[00m: rawPtr[00m)[00m ,[00m [34mRawArray[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: arrPtr[00m [34m^[]T[00m)[00m  =[00m ([34mCastExpr[00m: ([34mCastExpr[00m: ([34mPointerToExpr[00m: ([34mVariableAccessExpr[00m: rawArray[00m)[00m [34m^RawArray[00m)[00m [34muintptr[00m)[00m [34m^[]T[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: arrPtr[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m copyArray[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m dest[00m [34m[]T[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]T[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: num[00m [34muint[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m max[00m [34muint[00m)[00m  =[00m ([34mVariableAccessExpr[00m: num[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER[00m ([34mVariableAccessExpr[00m: max[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mVariableAccessExpr[00m: max[00m)[00m  =[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER[00m ([34mVariableAccessExpr[00m: max[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mVariableAccessExpr[00m: max[00m)[00m  =[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mVariableAccessExpr[00m: max[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m  =[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: i[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m free[00m ([34mVariableDecl[00m: ([34mVariable[00m: ptr[00m [34m^T[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawFree[00m)[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: ptr[00m)[00m [34muintptr[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m freeArray[00m ([34mVariableDecl[00m: ([34mVariable[00m: array[00m [34m[]T[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m rawArray[00m [34mRawArray[00m)[00m  =[00m ([34mDerefAccessExpr[00m: ([34mCastExpr[00m: ([34mCastExpr[00m: ([34mReferenceToExpr[00m: ([34mVariableAccessExpr[00m: array[00m)[00m [34m&[]T[00m)[00m [34muintptr[00m)[00m [34m^RawArray[00m)[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawFree[00m)[00m ([34mCastExpr[00m: ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: rawArray[00m)[00m member[00m ptr[00m)[00m [34muintptr[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::mem/raw`:
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m malloc[00m ([34mVariableDecl[00m: ([34mVariable[00m: size[00m [34muint[00m)[00m)[00m :[00m [34m^void[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [32m[c][00m[00m [00m free[00m ([34mVariableDecl[00m: ([34mVariable[00m: ptr[00m [34m^void[00m)[00m)[00m :[00m [34mvoid[00m nil[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m rawAlloc[00m ([34mVariableDecl[00m: ([34mVariable[00m: bytes[00m [34muint[00m)[00m)[00m :[00m [34muintptr[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: malloc[00m)[00m ([34mVariableAccessExpr[00m: bytes[00m)[00m [34m^void[00m)[00m [34muintptr[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m rawFree[00m ([34mVariableDecl[00m: ([34mVariable[00m: ptr[00m [34muintptr[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: free[00m)[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: ptr[00m)[00m [34m^void[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::unicode::utf8/coding`:
([34mVariableDecl[00m: ([34mVariable[00m: TRAILING_BYTES[00m [34m[]u8[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m1[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m3[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m5[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m5[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m5[00m [34mu8[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m5[00m [34mu8[00m)[00m ,[00m [34m[]u8[00m)[00m)
([34mVariableDecl[00m: ([34mVariable[00m: OFFSETS[00m [34m[]u32[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m ([34mNumericLiteral[00m: [33m0[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m12416[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m925824[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m63447168[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m4194836608[00m [34mu32[00m)[00m ,[00m 
	[00m ([34mNumericLiteral[00m: [33m2181570688[00m [34mu32[00m)[00m ,[00m [34m[]u32[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m numRunes[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]u8[00m)[00m)[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m num[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: nb[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: TRAILING_BYTES[00m)[00m index[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: i[00m)[00m BINOP_ADD[00m  =[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: nb[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m numBytes[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]rune[00m)[00m)[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m num[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: ch[00m [34mrune[00m)[00m  =[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m2048[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m65536[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m1114112[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m4[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: i[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: num[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m decode[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m dest[00m [34m[]rune[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]u8[00m)[00m)[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m srcIndex[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m destIndex[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: nb[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: TRAILING_BYTES[00m)[00m index[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m ([34mVariableAccessExpr[00m: nb[00m)[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m ch[00m [34mrune[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34mrune[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: nb[00m)[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_ADD[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_BIT_LEFT[00m  =[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: nb[00m)[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_ADD[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_BIT_LEFT[00m  =[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: nb[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_ADD[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_BIT_LEFT[00m  =[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_ADD[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m BINOP_SUB[00m  =[00m ([34mCastExpr[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: OFFSETS[00m)[00m index[00m ([34mVariableAccessExpr[00m: nb[00m)[00m)[00m [34mrune[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m  =[00m ([34mVariableAccessExpr[00m: ch[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: [00m encode[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m dest[00m [34m[]u8[00m)[00m)[00m ([34mVariableDecl[00m: ([34mVariable[00m: src[00m [34m[]rune[00m)[00m)[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m srcIndex[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m destIndex[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: src[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: ch[00m [34mrune[00m)[00m  =[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: src[00m)[00m index[00m ([34mVariableAccessExpr[00m: srcIndex[00m)[00m)[00m)[00m 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: ch[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m2048[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m192[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m65536[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m12[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m224[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m)[00m ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m1114112[00m [34mrune[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mArrayLenExpr[00m: ([34mVariableAccessExpr[00m: dest[00m)[00m)[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m18[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m240[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m12[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mBinaryExpr[00m: BINOP_BIT_RIGHT[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m6[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: dest[00m)[00m index[00m ([34mBinaryExpr[00m: BINOP_ADD[00m ([34mVariableAccessExpr[00m: destIndex[00m)[00m ([34mNumericLiteral[00m: [33m3[00m [34muint[00m)[00m)[00m)[00m  =[00m ([34mCastExpr[00m: ([34mBinaryExpr[00m: BINOP_BIT_OR[00m ([34mBinaryExpr[00m: BINOP_BIT_AND[00m ([34mVariableAccessExpr[00m: ch[00m)[00m ([34mNumericLiteral[00m: [33m63[00m [34mrune[00m)[00m)[00m ([34mNumericLiteral[00m: [33m128[00m [34mrune[00m)[00m)[00m [34mu8[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m4[00m [34muint[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: srcIndex[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: destIndex[00m)[00m)[00m)[00m)[00m)

AST of submodule `std::adt/list`:
([34mUseDirective[00m: std::mem[00m)
([34mTypeDecl[00m: ([34mNamedType[00m: List = struct<T> {data: ^mut T, length: uint, capacity: uint})[00m)
([34mVariableDecl[00m: ([34mVariable[00m: BASE_CAPACITY[00m [34muint[00m)[00m  =[00m ([34mNumericLiteral[00m: [33m4[00m [34muint[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m new[00m :[00m [34m^mut List<T>[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<T>[00m newWithCapacity[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m [34m^mut List<T>[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m newWithCapacity[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m cap[00m [34muint[00m)[00m)[00m :[00m [34m^mut List<T>[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_LESS_EQ[00m ([34mVariableAccessExpr[00m: cap[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mVariableAccessExpr[00m: cap[00m)[00m  =[00m ([34mVariableAccessExpr[00m: BASE_CAPACITY[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: size[00m [34muint[00m)[00m  =[00m ([34mBinaryExpr[00m: BINOP_MUL[00m ([34mSizeofExpr[00m: [34mT[00m)[00m ([34mVariableAccessExpr[00m: cap[00m)[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: res[00m [34m^mut List<T>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<List<T>>[00m alloc[00m)[00m [34m^mut List<T>[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: res[00m)[00m)[00m  =[00m ([34mCompositeLiteral[00m: 
	[00m data[00m :[00m ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawAlloc[00m)[00m ([34mVariableAccessExpr[00m: size[00m)[00m [34muintptr[00m)[00m [34m^mut T[00m)[00m ,[00m 
	[00m length[00m :[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m ,[00m 
	[00m capacity[00m :[00m ([34mVariableAccessExpr[00m: cap[00m)[00m ,[00m [34mList[00m [34m<[00m [34mT[00m [34m>[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: res[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m destroy[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawFree[00m)[00m ([34mCastExpr[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m [34muintptr[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<List<T>>[00m free[00m)[00m ([34mVariableAccessExpr[00m: it[00m)[00m [34mvoid[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m toRawPointer[00m :[00m [34m^T[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m get[00m ([34mVariableDecl[00m: ([34mVariable[00m: index[00m [34muint[00m)[00m)[00m :[00m [34mT[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_GREATER_EQ[00m ([34mVariableAccessExpr[00m: index[00m)[00m ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: it[00m)[00m member[00m length[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: panic[00m)[00m ([34mStringLiteral[00m:                          [33mList.get: index >= length[00m[00m [34mstring[00m)[00m [34mvoid[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: it[00m)[00m member[00m data[00m)[00m index[00m ([34mVariableAccessExpr[00m: index[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m getLength[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: it[00m)[00m member[00m length[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m getCapacity[00m :[00m [34muint[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mVariableAccessExpr[00m: it[00m)[00m member[00m capacity[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m grow[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: oldData[00m [34m^mut T[00m)[00m  =[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m capacity[00m)[00m BINOP_MUL[00m  =[00m ([34mNumericLiteral[00m: [33m2[00m [34muint[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: newData[00m [34m^mut T[00m)[00m  =[00m ([34mCastExpr[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawAlloc[00m)[00m ([34mBinaryExpr[00m: BINOP_MUL[00m ([34mSizeofExpr[00m: [34mT[00m)[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m capacity[00m)[00m)[00m [34muintptr[00m)[00m [34m^mut T[00m)[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: [32m [mutable][00m i[00m [34muint[00m)[00m  =[00m ([34mCastExpr[00m: ([34mNumericLiteral[00m: [33m0[00m [34mint[00m)[00m [34muint[00m)[00m)[00m 
	[00m ([34mLoopStat[00m: ([34mBinaryExpr[00m: BINOP_LESS[00m ([34mVariableAccessExpr[00m: i[00m)[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: newData[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m  =[00m ([34mArrayAccessExpr[00m: array[00m ([34mVariableAccessExpr[00m: oldData[00m)[00m index[00m ([34mVariableAccessExpr[00m: i[00m)[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mVariableAccessExpr[00m: i[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: rawFree[00m)[00m ([34mCastExpr[00m: ([34mVariableAccessExpr[00m: oldData[00m)[00m [34muintptr[00m)[00m [34mvoid[00m)[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m  =[00m ([34mVariableAccessExpr[00m: newData[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m top[00m :[00m [34mOption[00m [34m<[00m [34mT[00m [34m>[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mEnumLiteral[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mEnumLiteral[00m: ([34mTupleLiteral[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<T>[00m get[00m)[00m ([34mBinaryExpr[00m: BINOP_SUB[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m [34mT[00m)[00m ,[00m)[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m pop[00m :[00m [34mOption[00m [34m<[00m [34mT[00m [34m>[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m ([34mNumericLiteral[00m: [33m0[00m [34muint[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mReturnStat[00m: ([34mEnumLiteral[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mVariableDecl[00m: ([34mVariable[00m: poppedValue[00m [34mOption[00m [34m<[00m [34mT[00m [34m>[00m)[00m  =[00m ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<T>[00m top[00m)[00m [34mOption[00m [34m<[00m [34mT[00m [34m>[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m BINOP_SUB[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m 
	[00m ([34mReturnStat[00m: ([34mVariableAccessExpr[00m: poppedValue[00m)[00m)[00m)[00m)[00m)
([34mFunctionDecl[00m: ([34mFunction[00m: <T>[00m append[00m ([34mVariableDecl[00m: ([34mVariable[00m: value[00m [34mT[00m)[00m)[00m :[00m [34mvoid[00m ([34mBlock[00m: 
	[00m ([34mIfStat[00m: ([34mBinaryExpr[00m: BINOP_EQ[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m capacity[00m)[00m)[00m ([34mBlock[00m: 
	[00m ([34mCallStat[00m: ([34mCallExpr[00m: ([34mFunctionAccessExpr[00m: [32m<T>[00m grow[00m)[00m [34mvoid[00m)[00m)[00m)[00m nil[00m)[00m 
	[00m ([34mAssignStat[00m: ([34mArrayAccessExpr[00m: array[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m data[00m)[00m index[00m ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m)[00m  =[00m ([34mVariableAccessExpr[00m: value[00m)[00m)[00m 
	[00m ([34mBinopAssignStat[00m: ([34mStructAccessExpr[00m: struct[00m ([34mDerefAccessExpr[00m: ([34mVariableAccessExpr[00m: it[00m)[00m)[00m member[00m length[00m)[00m BINOP_ADD[00m  =[00m ([34mNumericLiteral[00m: [33m1[00m [34muint[00m)[00m)[00m)[00m)[00m)

[01m[32mEnded inference phase[00m (38.80ms)
[01m[32mStarted semantic analysis phase[00m
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.09ms)
 [32mEnded analysis pass[00m attribute (0.13ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.08ms)
 [32mEnded analysis pass[00m unreachable (0.10ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.08ms)
 [32mEnded analysis pass[00m break and next (0.10ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.08ms)
 [32mEnded analysis pass[00m deprecated (0.10ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.07ms)
 [32mEnded analysis pass[00m recusrive definition (0.10ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.25ms)
 [32mEnded analysis pass[00m type (0.28ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.11ms)
 [32mEnded analysis pass[00m immutable assign (0.13ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.12ms)
 [32mEnded analysis pass[00m use before declare (0.14ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.10ms)
 [32mEnded analysis pass[00m misc (0.12ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.11ms)
 [32mEnded analysis pass[00m reference (0.13ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m __main/test-dynamic-string
  [32mEnded checking submodule[00m __main/test-dynamic-string (0.15ms)
 [32mEnded analysis pass[00m unused (0.17ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.14ms)
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.10ms)
 [32mEnded analysis pass[00m attribute (0.29ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.08ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.13ms)
 [32mEnded analysis pass[00m unreachable (0.26ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.09ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.13ms)
 [32mEnded analysis pass[00m break and next (0.28ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.09ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.13ms)
 [32mEnded analysis pass[00m deprecated (0.28ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.08ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.09ms)
 [32mEnded analysis pass[00m recusrive definition (0.22ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.13ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.17ms)
 [32mEnded analysis pass[00m type (0.36ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.07ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.09ms)
 [32mEnded analysis pass[00m immutable assign (0.20ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.08ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.11ms)
 [32mEnded analysis pass[00m use before declare (0.24ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.06ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.09ms)
 [32mEnded analysis pass[00m misc (0.20ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.08ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.09ms)
 [32mEnded analysis pass[00m reference (0.22ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::io/file
  [32mEnded checking submodule[00m std::io/file (0.08ms)
  [32mStarted checking submodule[00m std::io/println
  [32mEnded checking submodule[00m std::io/println (0.11ms)
 [32mEnded analysis pass[00m unused (0.23ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.11ms)
 [32mEnded analysis pass[00m attribute (0.29ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.10ms)
 [32mEnded analysis pass[00m unreachable (0.28ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.11ms)
 [32mEnded analysis pass[00m break and next (0.29ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.11ms)
 [32mEnded analysis pass[00m deprecated (0.29ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.10ms)
 [32mEnded analysis pass[00m recusrive definition (0.27ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.16ms)
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.30ms)
 [32mEnded analysis pass[00m type (0.52ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.10ms)
 [32mEnded analysis pass[00m immutable assign (0.30ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.16ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.13ms)
 [32mEnded analysis pass[00m use before declare (0.34ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.13ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.10ms)
 [32mEnded analysis pass[00m misc (0.28ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::string/string
  [32mEnded checking submodule[00m std::string/string (0.15ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.10ms)
 [32mEnded analysis pass[00m reference (0.30ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::string/string
[33m[01mwarning:[00m [string:22:3] Unused variable `decodeChar`
        decodeChar := utf8::decode(decodedChar, char);
        [32m[01m^[00m

  [32mEnded checking submodule[00m std::string/string (0.20ms)
  [32mStarted checking submodule[00m std::string/util
  [32mEnded checking submodule[00m std::string/util (0.12ms)
 [32mEnded analysis pass[00m unused (0.37ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.08ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.03ms)
 [32mEnded analysis pass[00m attribute (0.16ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.07ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m unreachable (0.15ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.07ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.03ms)
 [32mEnded analysis pass[00m break and next (0.14ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.07ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m deprecated (0.14ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.07ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m recusrive definition (0.14ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.12ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.03ms)
 [32mEnded analysis pass[00m type (0.20ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.07ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
 [32mEnded analysis pass[00m immutable assign (0.14ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.08ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.03ms)
 [32mEnded analysis pass[00m use before declare (0.17ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.02ms)
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.08ms)
 [32mEnded analysis pass[00m misc (0.16ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.07ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.03ms)
 [32mEnded analysis pass[00m reference (0.15ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::mem/mem
  [32mEnded checking submodule[00m std::mem/mem (0.09ms)
  [32mStarted checking submodule[00m std::mem/raw
  [32mEnded checking submodule[00m std::mem/raw (0.03ms)
 [32mEnded analysis pass[00m unused (0.17ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.34ms)
 [32mEnded analysis pass[00m attribute (0.36ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.33ms)
 [32mEnded analysis pass[00m unreachable (0.35ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.34ms)
 [32mEnded analysis pass[00m break and next (0.37ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.33ms)
 [32mEnded analysis pass[00m deprecated (0.36ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.32ms)
 [32mEnded analysis pass[00m recusrive definition (0.35ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.60ms)
 [32mEnded analysis pass[00m type (0.63ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.34ms)
 [32mEnded analysis pass[00m immutable assign (0.37ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.39ms)
 [32mEnded analysis pass[00m use before declare (0.41ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.34ms)
 [32mEnded analysis pass[00m misc (0.36ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.34ms)
 [32mEnded analysis pass[00m reference (0.37ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::unicode::utf8/coding
  [32mEnded checking submodule[00m std::unicode::utf8/coding (0.38ms)
 [32mEnded analysis pass[00m unused (0.40ms)
 [32mStarted analysis pass[00m attribute
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.15ms)
 [32mEnded analysis pass[00m attribute (0.18ms)
 [32mStarted analysis pass[00m unreachable
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.14ms)
 [32mEnded analysis pass[00m unreachable (0.17ms)
 [32mStarted analysis pass[00m break and next
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.15ms)
 [32mEnded analysis pass[00m break and next (0.17ms)
 [32mStarted analysis pass[00m deprecated
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.15ms)
 [32mEnded analysis pass[00m deprecated (0.18ms)
 [32mStarted analysis pass[00m recusrive definition
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.14ms)
 [32mEnded analysis pass[00m recusrive definition (0.17ms)
 [32mStarted analysis pass[00m type
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.38ms)
 [32mEnded analysis pass[00m type (0.41ms)
 [32mStarted analysis pass[00m immutable assign
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.15ms)
 [32mEnded analysis pass[00m immutable assign (0.17ms)
 [32mStarted analysis pass[00m use before declare
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.19ms)
 [32mEnded analysis pass[00m use before declare (0.22ms)
 [32mStarted analysis pass[00m misc
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.14ms)
 [32mEnded analysis pass[00m misc (0.17ms)
 [32mStarted analysis pass[00m reference
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.16ms)
 [32mEnded analysis pass[00m reference (0.18ms)
 [32mStarted analysis pass[00m unused
  [32mStarted checking submodule[00m std::adt/list
  [32mEnded checking submodule[00m std::adt/list (0.18ms)
 [32mEnded analysis pass[00m unused (0.20ms)
[01m[32mEnded semantic analysis phase[00m (17.52ms)
[01m[32mStarted codegen phase[00m
 [32mStarted codegenning[00m __main
 [32mEnded codegenning[00m __main (6.16ms)
 [32mStarted codegenning[00m std::io
 [32mEnded codegenning[00m std::io (15.71ms)
 [32mStarted codegenning[00m std::string
 [32mEnded codegenning[00m std::string (28.35ms)
 [32mStarted codegenning[00m std::mem
 [32mEnded codegenning[00m std::mem (2.69ms)
 [32mStarted codegenning[00m std::unicode::utf8
 [32mEnded codegenning[00m std::unicode::utf8 (33.42ms)
 [32mStarted codegenning[00m std::adt
 [32mEnded codegenning[00m std::adt (11.67ms)
 [32mStarted codegenning[00m __runtime
 [32mEnded codegenning[00m __runtime (10.01ms)
 [32mStarted creating binary[00m
  [32mStarted creating object[00m __main
  [32mEnded creating object[00m __main (5.44ms)
  [32mStarted creating object[00m std::io
  [32mEnded creating object[00m std::io (5.18ms)
  [32mStarted creating object[00m std::string
  [32mEnded creating object[00m std::string (7.50ms)
  [32mStarted creating object[00m std::mem
  [32mEnded creating object[00m std::mem (1.30ms)
  [32mStarted creating object[00m std::unicode::utf8
  [32mEnded creating object[00m std::unicode::utf8 (5.20ms)
  [32mStarted creating object[00m std::adt
  [32mEnded creating object[00m std::adt (4.64ms)
  [32mStarted creating object[00m __runtime
  [32mEnded creating object[00m __runtime (2.91ms)
  [32mStarted linking[00m
cc [-fno-PIE -nodefaultlibs -lc -lm main-_M6__main.o main-_M3std_M2io.o main-_M3std_M6string.o main-_M3std_M3mem.o main-_M3std_M7unicode_M4utf8.o main-_M3std_M3adt.o main-_M9__runtime.o -o main]
  [32mEnded linking[00m (34.11ms)
 [32mEnded creating binary[00m (67.09ms)
[01m[32mEnded codegen phase[00m (176.47ms)
[32m[01mFinished build[00m (1 file(s), 293.19ms)
