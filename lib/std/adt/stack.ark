#use std::mem

pub type Stack struct <T> {
	data: ^mut List<T>,
};

pub func (Stack) new<T>() -> ^mut Stack<T> {
	stack := mem::alloc<Stack<T>>();
	@stack = Stack<T> {
		data: List::new<T>(), 
	};
	return stack;
}

pub func (s: ^Stack<T>) getLength() -> uint {
	return s.data.getLength();
}

pub func (s: ^Stack<T>) getCapacity() -> uint {
	return s.data.getCapacity();
}

pub func (s: ^Stack<T>) push(val: T) {
	s.data.append(val);	
}

pub func (s: ^Stack<T>) pop() -> Option<T> {
	return s.data.pop();
}

pub func (s: ^Stack<T>) destroy() {
	s.data.destroy();
    mem::free(s);
}