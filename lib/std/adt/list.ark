#use std::mem

pub type List struct<T> {
    data: ^mut T,
    length: uint,
    capacity: uint,
    growthRate: f32,
};

BASE_CAPACITY: uint = 4;
DEFAULT_GROWTH_RATE: f32 = 2;

pub func (List) new<T>() -> ^mut List<T> {
    return List::newWithCapacity<T>(0);
}

pub func (List) newWithCapacity<T>(mut cap: uint) -> ^mut List<T> {
    if cap <= 0 {
        cap = BASE_CAPACITY;
    }

    size := sizeof(T) * cap;

    res := mem::alloc<List<T>>();
    @res = List<T>{
        data: (^mut T)(mem::rawAlloc(size)),
        length: 0,
        growthRate: DEFAULT_GROWTH_RATE,
        capacity: cap,
    };

    return res;
}

pub func (it: ^List<T>) destroy() {
    mem::rawFree(uintptr(it.data));
    mem::free(it);
}

pub func (it: ^List<T>) toRawPointer() -> ^T {
    return it.data;
}

pub func (it: List<T>) get(index: uint) -> T {
    if index >= it.length {
        panic("List.get: index >= length");
    }

    return it.data[index];
}

pub func (it: List<T>) getLength() -> uint {
    return it.length;
}

pub func (it: List<T>) getCapacity() -> uint {
    return it.capacity;
}

/// This will double the size of
/// the lists data
/// Note that for now the memcpy seems
/// to be having some issues, so I'm just
/// manually swapping the data for now.
func (it: ^mut List<T>) grow() {
    oldData := it.data;
    it.capacity = uint(f32(it.capacity) * it.growthRate);
    newData := (^mut T)(mem::rawAlloc(sizeof(T) * it.capacity));

    mut i := uint(0);
    for i < it.length {
        newData[i] = oldData[i];
        i += 1;
    }

    mem::rawFree(uintptr(oldData));
    it.data = newData;
}

pub func (it: ^mut List<T>) setGrowthRate(mut rate: f32) {
    if rate <= 0f {
        rate = DEFAULT_GROWTH_RATE;
    }
    it.growthRate = rate;
}

/// This will peek at the top of the List
/// it will _not_ pop the value off the list.
/// Returns None if the list is empty.
pub func (it: ^mut List<T>) top() -> Option<T> {
    if it.length == 0 {
        return Option::None;
    }
    return Option::Some(it.get(it.length - 1));
}

/// Pop the last value T from the list. Note that
/// it does not clear out the popped item.
/// Returns None if the list is empty.
pub func (it: ^mut List<T>) pop() -> Option<T> {
    if it.length == 0 {
        return Option::None;
    }
    poppedValue := it.top();
    // clear old value?
    it.length -= 1;
    return poppedValue;
}

/// Append a value of type T to the List. If
/// the length is at its capacity it will double
/// in capacity.
pub func (it: ^mut List<T>) append(value: T) {
    if it.length == it.capacity {
        it.grow();
    }

    it.data[it.length] = value;
    it.length += 1;
}
