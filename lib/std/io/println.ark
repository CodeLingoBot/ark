#use std::unicode::utf8
#use std::string
#use std::mem

[c] func printf(fmt: ^u8, ...) -> int;

// a very unsophisticated println
// function
pub func println(message: string) -> int {
	if len(message) == 0 {
		return C::printf(c"\n");
	}
	return C::printf(c"%.*s\n", len(message), &message[0]);
}

pub func print(message: string) -> int {
	if len(message) == 0 {
		return 0;
	}
	return C::printf(c"%.*s", len(message), &message[0]);
}

pub func printDynamicString(s: ^string::String) -> int {
	mut idx := uint(0);
	for idx < s.length() {
		valAtIdx := s.at(idx);
		printRune(valAtIdx.unwrap());
		idx += 1;
	}
	printRune('\n');
	return int(idx);
}

pub func printRune(r: rune) -> int {
	mut rPtr := (^u8)(uintptr(&r));
	rCast := []rune{r};
	numBytes := utf8::numBytes(rCast);
   	C::printf(c"%.*s", numBytes, rPtr);
	return 0;
}

pub func printByte(byte: u8) -> int {
	return C::printf(c"%c", byte);
}

pub func printInt(num: int) -> int {
	// use z for register-sized integer
	return C::printf(c"%zd", num);
}

pub func printUint(num: uint) -> int {
	// use z for register-sized integer
	return C::printf(c"%zu", num);
}
