#use std::mem

type FILE struct {};

[c] func fopen(loc: ^u8, mode: ^u8) -> ^FILE;
[c] func fseek(handle: ^FILE, offset: uint, whence: uint);
[c] func ftell(handle: ^FILE) -> uint;
[c] func rewind(handle: ^FILE);
[c] func fread(where: ^u8, sz: uint, dunno: uint, handle: ^FILE);
[c] func fclose(handle: ^FILE);
[c] func getenv(what: ^u8) -> ^u8;

pub type FileMode enum {
	Read,
	Write,
	Append,
};

// this is kinda cheeky
// match pls senpai
pub func (f: FileMode) getLegacyMode() -> string {
	if f == FileMode::Read {
		return "r";
	}
	else if f == FileMode::Write {
		return "w";
	}
	else if f == FileMode::Append {
		return "a";
	}
	return "r"; // fuck it read
}

pub type Path struct {
	location: string,
};

pub func (Path) new(location: string) -> ^mut Path {
	mut p: ^mut Path = mem::alloc<Path>();
	p.location = location;
	return p;
}

pub type File struct {
	name: string,
	path: ^mut Path,
	handle: ^FILE,
};

pub func (File) open(path: ^mut Path, mode: FileMode) -> ^mut File {
	mut f: ^mut File = mem::alloc<File>();
	f.path = path;
	// this is to avoid a parsing error where you can't
	// index a call expr (call expr ! access expr)
	legacyMode: string = mode.getLegacyMode();
	// f.handle = C::fopen((^u8)(&f.path.location[0]), (^u8)(&legacyMode[0]));
	return f;
}

pub func (f: ^mut File) readToString() -> string {
	return f.name;
}

pub func (f: ^mut File) close() {
	// C::fclose(f.handle);
}
