// TODO: check for overflow when doing `num * sizeof(T)``

pub func alloc<T>() -> ^mut T {
    return (^mut T)(rawAlloc(sizeof(T)));
}

pub func allocArray<T>(num: uint) -> []T {
    rawPtr := (^T)(rawAlloc(sizeof(T) * num));
    return makeArray(rawPtr, num);
}

pub func copyArray<T>(mut dest: []T, src: []T, num: uint) {
    mut max := num;
    if max > len(dest) {
        max = len(dest);
    }
    if max > len(src) {
        max = len(src);
    }

    mut i: uint = 0;
    for i < max {
        dest[i] = src[i];
        i += 1;
    }
}

pub func free<T>(ptr: ^T) {
    rawFree(uintptr(ptr));
}

pub func freeArray<T>(array: []T) {
    (_, ptr) := breakArray<T>(array);
    rawFree(uintptr(ptr));
}