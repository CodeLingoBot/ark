pub func contains(haystack: string, needle: string) -> bool {
	if len(haystack) < len(needle) {
		return false;
	}
	
	mut idx := uint(0);
	mut count := uint(0);
	for idx < len(haystack) {
		if haystack[idx] == needle[count] {
			count += 1;
		} else {
			count = 0;
		}

		if count == len(needle) {
			return true;
		}

		idx += 1;
	}

	return false;
}

pub func hasPrefix(source: string, prefix: string) -> bool {
	if len(prefix) > len(source) {
		return false;
	}
	mut idx := uint(0);
	for idx < len(prefix) {
		if source[idx] != prefix[idx] {
			return false;
		}
		idx += 1;
	}
	return true;
}

pub func hasSuffix(source: string, suffix: string) -> bool {
	
	if len(suffix) > len(source) {
		return false;
	}

	mut idx := len(source) - len(suffix);
	// im too tired to know why this works
	// but it works
	for idx < len(suffix) - idx {
		if source[idx] != suffix[idx] {
			return false;
		}
		idx += 1;
	}
	return true;
}

pub func compare(a: string, b: string) -> bool {
	if len(a) != len(b) {
		return false;
	}

	mut i := uint(0);
	for i < len(a) {
		if a[i] != b[i] {
			return false;
		}
	}

	return true;
}